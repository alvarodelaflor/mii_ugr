(function(window, undefined) {
    var readyList, rootjQuery, core_strundefined = typeof undefined, location = window.location, document = window.document, docElem = document.documentElement, _jQuery = window.jQuery, _$ = window.$, class2type = {}, core_deletedIds = [], core_version = "1.10.2-pre", core_concat = core_deletedIds.concat, core_push = core_deletedIds.push, core_slice = core_deletedIds.slice, core_indexOf = core_deletedIds.indexOf, core_toString = class2type.toString, core_hasOwn = class2type.hasOwnProperty, core_trim = core_version.trim, jQuery = function(selector, context) {
        return new jQuery.fn.init(selector, context, rootjQuery);
    }, core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source, core_rnotwhite = /\S+/g, rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/, rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/, rvalidchars = /^[\],:{}\s]*$/, rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g, rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g, rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g, rmsPrefix = /^-ms-/, rdashAlpha = /-([\da-z])/gi, fcamelCase = function(all, letter) {
        return letter.toUpperCase();
    }, completed = function(event) {
        if (document.addEventListener || "load" === event.type || "complete" === document.readyState) {
            detach();
            jQuery.ready();
        }
    }, detach = function() {
        if (document.addEventListener) {
            document.removeEventListener("DOMContentLoaded", completed, false);
            window.removeEventListener("load", completed, false);
        } else {
            document.detachEvent("onreadystatechange", completed);
            window.detachEvent("onload", completed);
        }
    };
    jQuery.fn = jQuery.prototype = {
        jquery: core_version,
        constructor: jQuery,
        init: function(selector, context, rootjQuery) {
            var match, elem;
            if (!selector) return this;
            if ("string" === typeof selector) {
                if ("<" === selector.charAt(0) && ">" === selector.charAt(selector.length - 1) && selector.length >= 3) match = [ null, selector, null ]; else match = rquickExpr.exec(selector);
                if (match && (match[1] || !context)) if (match[1]) {
                    context = context instanceof jQuery ? context[0] : context;
                    jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));
                    if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) for (match in context) if (jQuery.isFunction(this[match])) this[match](context[match]); else this.attr(match, context[match]);
                    return this;
                } else {
                    elem = document.getElementById(match[2]);
                    if (elem && elem.parentNode) {
                        if (elem.id !== match[2]) return rootjQuery.find(selector);
                        this.length = 1;
                        this[0] = elem;
                    }
                    this.context = document;
                    this.selector = selector;
                    return this;
                } else if (!context || context.jquery) return (context || rootjQuery).find(selector); else return this.constructor(context).find(selector);
            } else if (selector.nodeType) {
                this.context = this[0] = selector;
                this.length = 1;
                return this;
            } else if (jQuery.isFunction(selector)) return rootjQuery.ready(selector);
            if (selector.selector !== undefined) {
                this.selector = selector.selector;
                this.context = selector.context;
            }
            return jQuery.makeArray(selector, this);
        },
        selector: "",
        length: 0,
        toArray: function() {
            return core_slice.call(this);
        },
        get: function(num) {
            return null == num ? this.toArray() : num < 0 ? this[this.length + num] : this[num];
        },
        pushStack: function(elems) {
            var ret = jQuery.merge(this.constructor(), elems);
            ret.prevObject = this;
            ret.context = this.context;
            return ret;
        },
        each: function(callback, args) {
            return jQuery.each(this, callback, args);
        },
        ready: function(fn) {
            jQuery.ready.promise().done(fn);
            return this;
        },
        slice: function() {
            return this.pushStack(core_slice.apply(this, arguments));
        },
        first: function() {
            return this.eq(0);
        },
        last: function() {
            return this.eq(-1);
        },
        eq: function(i) {
            var len = this.length, j = +i + (i < 0 ? len : 0);
            return this.pushStack(j >= 0 && j < len ? [ this[j] ] : []);
        },
        map: function(callback) {
            return this.pushStack(jQuery.map(this, function(elem, i) {
                return callback.call(elem, i, elem);
            }));
        },
        end: function() {
            return this.prevObject || this.constructor(null);
        },
        push: core_push,
        sort: [].sort,
        splice: [].splice
    };
    jQuery.fn.init.prototype = jQuery.fn;
    jQuery.extend = jQuery.fn.extend = function() {
        var src, copyIsArray, copy, name, options, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
        if ("boolean" === typeof target) {
            deep = target;
            target = arguments[1] || {};
            i = 2;
        }
        if ("object" !== typeof target && !jQuery.isFunction(target)) target = {};
        if (length === i) {
            target = this;
            --i;
        }
        for (;i < length; i++) if (null != (options = arguments[i])) for (name in options) {
            src = target[name];
            copy = options[name];
            if (target === copy) continue;
            if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                if (copyIsArray) {
                    copyIsArray = false;
                    clone = src && jQuery.isArray(src) ? src : [];
                } else clone = src && jQuery.isPlainObject(src) ? src : {};
                target[name] = jQuery.extend(deep, clone, copy);
            } else if (copy !== undefined) target[name] = copy;
        }
        return target;
    };
    jQuery.extend({
        expando: "jQuery" + (core_version + Math.random()).replace(/\D/g, ""),
        noConflict: function(deep) {
            if (window.$ === jQuery) window.$ = _$;
            if (deep && window.jQuery === jQuery) window.jQuery = _jQuery;
            return jQuery;
        },
        isReady: false,
        readyWait: 1,
        holdReady: function(hold) {
            if (hold) jQuery.readyWait++; else jQuery.ready(true);
        },
        ready: function(wait) {
            if (true === wait ? --jQuery.readyWait : jQuery.isReady) return;
            if (!document.body) return setTimeout(jQuery.ready);
            jQuery.isReady = true;
            if (true !== wait && --jQuery.readyWait > 0) return;
            readyList.resolveWith(document, [ jQuery ]);
            if (jQuery.fn.trigger) jQuery(document).trigger("ready").off("ready");
        },
        isFunction: function(obj) {
            return "function" === jQuery.type(obj);
        },
        isArray: Array.isArray || function(obj) {
            return "array" === jQuery.type(obj);
        },
        isWindow: function(obj) {
            return null != obj && obj == obj.window;
        },
        isNumeric: function(obj) {
            return !isNaN(parseFloat(obj)) && isFinite(obj);
        },
        type: function(obj) {
            if (null == obj) return String(obj);
            return "object" === typeof obj || "function" === typeof obj ? class2type[core_toString.call(obj)] || "object" : typeof obj;
        },
        isPlainObject: function(obj) {
            var key;
            if (!obj || "object" !== jQuery.type(obj) || obj.nodeType || jQuery.isWindow(obj)) return false;
            try {
                if (obj.constructor && !core_hasOwn.call(obj, "constructor") && !core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) return false;
            } catch (e) {
                return false;
            }
            if (jQuery.support.ownLast) for (key in obj) return core_hasOwn.call(obj, key);
            for (key in obj) ;
            return key === undefined || core_hasOwn.call(obj, key);
        },
        isEmptyObject: function(obj) {
            var name;
            for (name in obj) return false;
            return true;
        },
        error: function(msg) {
            throw new Error(msg);
        },
        parseHTML: function(data, context, keepScripts) {
            if (!data || "string" !== typeof data) return null;
            if ("boolean" === typeof context) {
                keepScripts = context;
                context = false;
            }
            context = context || document;
            var parsed = rsingleTag.exec(data), scripts = !keepScripts && [];
            if (parsed) return [ context.createElement(parsed[1]) ];
            parsed = jQuery.buildFragment([ data ], context, scripts);
            if (scripts) jQuery(scripts).remove();
            return jQuery.merge([], parsed.childNodes);
        },
        parseJSON: function(data) {
            if (window.JSON && window.JSON.parse) return window.JSON.parse(data);
            if (null === data) return data;
            if ("string" === typeof data) {
                data = jQuery.trim(data);
                if (data) if (rvalidchars.test(data.replace(rvalidescape, "@").replace(rvalidtokens, "]").replace(rvalidbraces, ""))) return new Function("return " + data)();
            }
            jQuery.error("Invalid JSON: " + data);
        },
        parseXML: function(data) {
            var xml, tmp;
            if (!data || "string" !== typeof data) return null;
            try {
                if (window.DOMParser) {
                    tmp = new DOMParser();
                    xml = tmp.parseFromString(data, "text/xml");
                } else {
                    xml = new ActiveXObject("Microsoft.XMLDOM");
                    xml.async = "false";
                    xml.loadXML(data);
                }
            } catch (e) {
                xml = undefined;
            }
            if (!xml || !xml.documentElement || xml.getElementsByTagName("parsererror").length) jQuery.error("Invalid XML: " + data);
            return xml;
        },
        noop: function() {},
        globalEval: function(data) {
            if (data && jQuery.trim(data)) (window.execScript || function(data) {
                window["eval"].call(window, data);
            })(data);
        },
        camelCase: function(string) {
            return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
        },
        nodeName: function(elem, name) {
            return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
        },
        each: function(obj, callback, args) {
            var value, i = 0, length = obj.length, isArray = isArraylike(obj);
            if (args) if (isArray) for (;i < length; i++) {
                value = callback.apply(obj[i], args);
                if (false === value) break;
            } else for (i in obj) {
                value = callback.apply(obj[i], args);
                if (false === value) break;
            } else if (isArray) for (;i < length; i++) {
                value = callback.call(obj[i], i, obj[i]);
                if (false === value) break;
            } else for (i in obj) {
                value = callback.call(obj[i], i, obj[i]);
                if (false === value) break;
            }
            return obj;
        },
        trim: core_trim && !core_trim.call("﻿ ") ? function(text) {
            return null == text ? "" : core_trim.call(text);
        } : function(text) {
            return null == text ? "" : (text + "").replace(rtrim, "");
        },
        makeArray: function(arr, results) {
            var ret = results || [];
            if (null != arr) if (isArraylike(Object(arr))) jQuery.merge(ret, "string" === typeof arr ? [ arr ] : arr); else core_push.call(ret, arr);
            return ret;
        },
        inArray: function(elem, arr, i) {
            var len;
            if (arr) {
                if (core_indexOf) return core_indexOf.call(arr, elem, i);
                len = arr.length;
                i = i ? i < 0 ? Math.max(0, len + i) : i : 0;
                for (;i < len; i++) if (i in arr && arr[i] === elem) return i;
            }
            return -1;
        },
        merge: function(first, second) {
            var l = second.length, i = first.length, j = 0;
            if ("number" === typeof l) for (;j < l; j++) first[i++] = second[j]; else while (second[j] !== undefined) first[i++] = second[j++];
            first.length = i;
            return first;
        },
        grep: function(elems, callback, inv) {
            var retVal, ret = [], i = 0, length = elems.length;
            inv = !!inv;
            for (;i < length; i++) {
                retVal = !!callback(elems[i], i);
                if (inv !== retVal) ret.push(elems[i]);
            }
            return ret;
        },
        map: function(elems, callback, arg) {
            var value, i = 0, length = elems.length, isArray = isArraylike(elems), ret = [];
            if (isArray) for (;i < length; i++) {
                value = callback(elems[i], i, arg);
                if (null != value) ret[ret.length] = value;
            } else for (i in elems) {
                value = callback(elems[i], i, arg);
                if (null != value) ret[ret.length] = value;
            }
            return core_concat.apply([], ret);
        },
        guid: 1,
        proxy: function(fn, context) {
            var args, proxy, tmp;
            if ("string" === typeof context) {
                tmp = fn[context];
                context = fn;
                fn = tmp;
            }
            if (!jQuery.isFunction(fn)) return undefined;
            args = core_slice.call(arguments, 2);
            proxy = function() {
                return fn.apply(context || this, args.concat(core_slice.call(arguments)));
            };
            proxy.guid = fn.guid = fn.guid || jQuery.guid++;
            return proxy;
        },
        access: function(elems, fn, key, value, chainable, emptyGet, raw) {
            var i = 0, length = elems.length, bulk = null == key;
            if ("object" === jQuery.type(key)) {
                chainable = true;
                for (i in key) jQuery.access(elems, fn, i, key[i], true, emptyGet, raw);
            } else if (value !== undefined) {
                chainable = true;
                if (!jQuery.isFunction(value)) raw = true;
                if (bulk) if (raw) {
                    fn.call(elems, value);
                    fn = null;
                } else {
                    bulk = fn;
                    fn = function(elem, key, value) {
                        return bulk.call(jQuery(elem), value);
                    };
                }
                if (fn) for (;i < length; i++) fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
            }
            return chainable ? elems : bulk ? fn.call(elems) : length ? fn(elems[0], key) : emptyGet;
        },
        now: function() {
            return new Date().getTime();
        },
        swap: function(elem, options, callback, args) {
            var ret, name, old = {};
            for (name in options) {
                old[name] = elem.style[name];
                elem.style[name] = options[name];
            }
            ret = callback.apply(elem, args || []);
            for (name in options) elem.style[name] = old[name];
            return ret;
        }
    });
    jQuery.ready.promise = function(obj) {
        if (!readyList) {
            readyList = jQuery.Deferred();
            if ("complete" === document.readyState) setTimeout(jQuery.ready); else if (document.addEventListener) {
                document.addEventListener("DOMContentLoaded", completed, false);
                window.addEventListener("load", completed, false);
            } else {
                document.attachEvent("onreadystatechange", completed);
                window.attachEvent("onload", completed);
                var top = false;
                try {
                    top = null == window.frameElement && document.documentElement;
                } catch (e) {}
                if (top && top.doScroll) (function doScrollCheck() {
                    if (!jQuery.isReady) {
                        try {
                            top.doScroll("left");
                        } catch (e) {
                            return setTimeout(doScrollCheck, 50);
                        }
                        detach();
                        jQuery.ready();
                    }
                })();
            }
        }
        return readyList.promise(obj);
    };
    jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
        class2type["[object " + name + "]"] = name.toLowerCase();
    });
    function isArraylike(obj) {
        var length = obj.length, type = jQuery.type(obj);
        if (jQuery.isWindow(obj)) return false;
        if (1 === obj.nodeType && length) return true;
        return "array" === type || "function" !== type && (0 === length || "number" === typeof length && length > 0 && length - 1 in obj);
    }
    rootjQuery = jQuery(document);
    (function(window, undefined) {
        var i, support, cachedruns, Expr, getText, isXML, compile, outermostContext, sortInput, setDocument, document, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains, expando = "sizzle" + -new Date(), preferredDoc = window.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), hasDuplicate = false, sortOrder = function(a, b) {
            if (a === b) {
                hasDuplicate = true;
                return 0;
            }
            return 0;
        }, strundefined = typeof undefined, MAX_NEGATIVE = 1 << 31, hasOwn = {}.hasOwnProperty, arr = [], pop = arr.pop, push_native = arr.push, push = arr.push, slice = arr.slice, indexOf = arr.indexOf || function(elem) {
            var i = 0, len = this.length;
            for (;i < len; i++) if (this[i] === elem) return i;
            return -1;
        }, booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", whitespace = "[\\x20\\t\\r\\n\\f]", characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+", identifier = characterEncoding.replace("w", "w#"), attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace + "*(?:([*^$|!~]?=)" + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]", pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace(3, 8) + ")*)|.*)\\)|)", rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"), rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"), rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"), rsibling = new RegExp(whitespace + "*[+~]"), rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*)" + whitespace + "*\\]", "g"), rpseudo = new RegExp(pseudos), ridentifier = new RegExp("^" + identifier + "$"), matchExpr = {
            ID: new RegExp("^#(" + characterEncoding + ")"),
            CLASS: new RegExp("^\\.(" + characterEncoding + ")"),
            TAG: new RegExp("^(" + characterEncoding.replace("w", "w*") + ")"),
            ATTR: new RegExp("^" + attributes),
            PSEUDO: new RegExp("^" + pseudos),
            CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
            bool: new RegExp("^(?:" + booleans + ")$", "i"),
            needsContext: new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
        }, rnative = /^[^{]+\{\s*\[native \w/, rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rescape = /'|\\/g, runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"), funescape = function(_, escaped, escapedWhitespace) {
            var high = "0x" + escaped - 65536;
            return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(55296 | high >> 10, 56320 | 1023 & high);
        };
        try {
            push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
            arr[preferredDoc.childNodes.length].nodeType;
        } catch (e) {
            push = {
                apply: arr.length ? function(target, els) {
                    push_native.apply(target, slice.call(els));
                } : function(target, els) {
                    var j = target.length, i = 0;
                    while (target[j++] = els[i++]) ;
                    target.length = j - 1;
                }
            };
        }
        function Sizzle(selector, context, results, seed) {
            var match, elem, m, nodeType, i, groups, old, nid, newContext, newSelector;
            if ((context ? context.ownerDocument || context : preferredDoc) !== document) setDocument(context);
            context = context || document;
            results = results || [];
            if (!selector || "string" !== typeof selector) return results;
            if (1 !== (nodeType = context.nodeType) && 9 !== nodeType) return [];
            if (documentIsHTML && !seed) {
                if (match = rquickExpr.exec(selector)) if (m = match[1]) {
                    if (9 === nodeType) {
                        elem = context.getElementById(m);
                        if (elem && elem.parentNode) {
                            if (elem.id === m) {
                                results.push(elem);
                                return results;
                            }
                        } else return results;
                    } else if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {
                        results.push(elem);
                        return results;
                    }
                } else if (match[2]) {
                    push.apply(results, context.getElementsByTagName(selector));
                    return results;
                } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
                    push.apply(results, context.getElementsByClassName(m));
                    return results;
                }
                if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                    nid = old = expando;
                    newContext = context;
                    newSelector = 9 === nodeType && selector;
                    if (1 === nodeType && "object" !== context.nodeName.toLowerCase()) {
                        groups = tokenize(selector);
                        if (old = context.getAttribute("id")) nid = old.replace(rescape, "\\$&"); else context.setAttribute("id", nid);
                        nid = "[id='" + nid + "'] ";
                        i = groups.length;
                        while (i--) groups[i] = nid + toSelector(groups[i]);
                        newContext = rsibling.test(selector) && context.parentNode || context;
                        newSelector = groups.join(",");
                    }
                    if (newSelector) try {
                        push.apply(results, newContext.querySelectorAll(newSelector));
                        return results;
                    } catch (qsaError) {} finally {
                        if (!old) context.removeAttribute("id");
                    }
                }
            }
            return select(selector.replace(rtrim, "$1"), context, results, seed);
        }
        function createCache() {
            var keys = [];
            function cache(key, value) {
                if (keys.push(key += " ") > Expr.cacheLength) delete cache[keys.shift()];
                return cache[key] = value;
            }
            return cache;
        }
        function markFunction(fn) {
            fn[expando] = true;
            return fn;
        }
        function assert(fn) {
            var div = document.createElement("div");
            try {
                return !!fn(div);
            } catch (e) {
                return false;
            } finally {
                if (div.parentNode) div.parentNode.removeChild(div);
                div = null;
            }
        }
        function addHandle(attrs, handler) {
            var arr = attrs.split("|"), i = attrs.length;
            while (i--) Expr.attrHandle[arr[i]] = handler;
        }
        function siblingCheck(a, b) {
            var cur = b && a, diff = cur && 1 === a.nodeType && 1 === b.nodeType && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);
            if (diff) return diff;
            if (cur) while (cur = cur.nextSibling) if (cur === b) return -1;
            return a ? 1 : -1;
        }
        function createInputPseudo(type) {
            return function(elem) {
                var name = elem.nodeName.toLowerCase();
                return "input" === name && elem.type === type;
            };
        }
        function createButtonPseudo(type) {
            return function(elem) {
                var name = elem.nodeName.toLowerCase();
                return ("input" === name || "button" === name) && elem.type === type;
            };
        }
        function createPositionalPseudo(fn) {
            return markFunction(function(argument) {
                argument = +argument;
                return markFunction(function(seed, matches) {
                    var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;
                    while (i--) if (seed[j = matchIndexes[i]]) seed[j] = !(matches[j] = seed[j]);
                });
            });
        }
        isXML = Sizzle.isXML = function(elem) {
            var documentElement = elem && (elem.ownerDocument || elem).documentElement;
            return documentElement ? "HTML" !== documentElement.nodeName : false;
        };
        support = Sizzle.support = {};
        setDocument = Sizzle.setDocument = function(node) {
            var doc = node ? node.ownerDocument || node : preferredDoc, parent = doc.defaultView;
            if (doc === document || 9 !== doc.nodeType || !doc.documentElement) return document;
            document = doc;
            docElem = doc.documentElement;
            documentIsHTML = !isXML(doc);
            if (parent && parent.attachEvent && parent !== parent.top) parent.attachEvent("onbeforeunload", function() {
                setDocument();
            });
            support.attributes = assert(function(div) {
                div.className = "i";
                return !div.getAttribute("className");
            });
            support.getElementsByTagName = assert(function(div) {
                div.appendChild(doc.createComment(""));
                return !div.getElementsByTagName("*").length;
            });
            support.getElementsByClassName = assert(function(div) {
                div.innerHTML = "<div class='a'></div><div class='a i'></div>";
                div.firstChild.className = "i";
                return 2 === div.getElementsByClassName("i").length;
            });
            support.getById = assert(function(div) {
                docElem.appendChild(div).id = expando;
                return !doc.getElementsByName || !doc.getElementsByName(expando).length;
            });
            if (support.getById) {
                Expr.find["ID"] = function(id, context) {
                    if (typeof context.getElementById !== strundefined && documentIsHTML) {
                        var m = context.getElementById(id);
                        return m && m.parentNode ? [ m ] : [];
                    }
                };
                Expr.filter["ID"] = function(id) {
                    var attrId = id.replace(runescape, funescape);
                    return function(elem) {
                        return elem.getAttribute("id") === attrId;
                    };
                };
            } else {
                delete Expr.find["ID"];
                Expr.filter["ID"] = function(id) {
                    var attrId = id.replace(runescape, funescape);
                    return function(elem) {
                        var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
                        return node && node.value === attrId;
                    };
                };
            }
            Expr.find["TAG"] = support.getElementsByTagName ? function(tag, context) {
                if (typeof context.getElementsByTagName !== strundefined) return context.getElementsByTagName(tag);
            } : function(tag, context) {
                var elem, tmp = [], i = 0, results = context.getElementsByTagName(tag);
                if ("*" === tag) {
                    while (elem = results[i++]) if (1 === elem.nodeType) tmp.push(elem);
                    return tmp;
                }
                return results;
            };
            Expr.find["CLASS"] = support.getElementsByClassName && function(className, context) {
                if (typeof context.getElementsByClassName !== strundefined && documentIsHTML) return context.getElementsByClassName(className);
            };
            rbuggyMatches = [];
            rbuggyQSA = [];
            if (support.qsa = rnative.test(doc.querySelectorAll)) {
                assert(function(div) {
                    div.innerHTML = "<select><option selected=''></option></select>";
                    if (!div.querySelectorAll("[selected]").length) rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
                    if (!div.querySelectorAll(":checked").length) rbuggyQSA.push(":checked");
                });
                assert(function(div) {
                    var input = doc.createElement("input");
                    input.setAttribute("type", "hidden");
                    div.appendChild(input).setAttribute("t", "");
                    if (div.querySelectorAll("[t^='']").length) rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
                    if (!div.querySelectorAll(":enabled").length) rbuggyQSA.push(":enabled", ":disabled");
                    div.querySelectorAll("*,:x");
                    rbuggyQSA.push(",.*:");
                });
            }
            if (support.matchesSelector = rnative.test(matches = docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) assert(function(div) {
                support.disconnectedMatch = matches.call(div, "div");
                matches.call(div, "[s!='']:x");
                rbuggyMatches.push("!=", pseudos);
            });
            rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
            rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
            contains = rnative.test(docElem.contains) || docElem.compareDocumentPosition ? function(a, b) {
                var adown = 9 === a.nodeType ? a.documentElement : a, bup = b && b.parentNode;
                return a === bup || !!(bup && 1 === bup.nodeType && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(bup)));
            } : function(a, b) {
                if (b) while (b = b.parentNode) if (b === a) return true;
                return false;
            };
            sortOrder = docElem.compareDocumentPosition ? function(a, b) {
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                }
                var compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition(b);
                if (compare) {
                    if (1 & compare || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
                        if (a === doc || contains(preferredDoc, a)) return -1;
                        if (b === doc || contains(preferredDoc, b)) return 1;
                        return sortInput ? indexOf.call(sortInput, a) - indexOf.call(sortInput, b) : 0;
                    }
                    return 4 & compare ? -1 : 1;
                }
                return a.compareDocumentPosition ? -1 : 1;
            } : function(a, b) {
                var cur, i = 0, aup = a.parentNode, bup = b.parentNode, ap = [ a ], bp = [ b ];
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                } else if (!aup || !bup) return a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf.call(sortInput, a) - indexOf.call(sortInput, b) : 0; else if (aup === bup) return siblingCheck(a, b);
                cur = a;
                while (cur = cur.parentNode) ap.unshift(cur);
                cur = b;
                while (cur = cur.parentNode) bp.unshift(cur);
                while (ap[i] === bp[i]) i++;
                return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
            };
            return doc;
        };
        Sizzle.matches = function(expr, elements) {
            return Sizzle(expr, null, null, elements);
        };
        Sizzle.matchesSelector = function(elem, expr) {
            if ((elem.ownerDocument || elem) !== document) setDocument(elem);
            expr = expr.replace(rattributeQuotes, "='$1']");
            if (support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) try {
                var ret = matches.call(elem, expr);
                if (ret || support.disconnectedMatch || elem.document && 11 !== elem.document.nodeType) return ret;
            } catch (e) {}
            return Sizzle(expr, document, null, [ elem ]).length > 0;
        };
        Sizzle.contains = function(context, elem) {
            if ((context.ownerDocument || context) !== document) setDocument(context);
            return contains(context, elem);
        };
        Sizzle.attr = function(elem, name) {
            if ((elem.ownerDocument || elem) !== document) setDocument(elem);
            var fn = Expr.attrHandle[name.toLowerCase()], val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
            return val === undefined ? support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null : val;
        };
        Sizzle.error = function(msg) {
            throw new Error("Syntax error, unrecognized expression: " + msg);
        };
        Sizzle.uniqueSort = function(results) {
            var elem, duplicates = [], j = 0, i = 0;
            hasDuplicate = !support.detectDuplicates;
            sortInput = !support.sortStable && results.slice(0);
            results.sort(sortOrder);
            if (hasDuplicate) {
                while (elem = results[i++]) if (elem === results[i]) j = duplicates.push(i);
                while (j--) results.splice(duplicates[j], 1);
            }
            return results;
        };
        getText = Sizzle.getText = function(elem) {
            var node, ret = "", i = 0, nodeType = elem.nodeType;
            if (!nodeType) for (;node = elem[i]; i++) ret += getText(node); else if (1 === nodeType || 9 === nodeType || 11 === nodeType) if ("string" === typeof elem.textContent) return elem.textContent; else for (elem = elem.firstChild; elem; elem = elem.nextSibling) ret += getText(elem); else if (3 === nodeType || 4 === nodeType) return elem.nodeValue;
            return ret;
        };
        Expr = Sizzle.selectors = {
            cacheLength: 50,
            createPseudo: markFunction,
            match: matchExpr,
            attrHandle: {},
            find: {},
            relative: {
                ">": {
                    dir: "parentNode",
                    first: true
                },
                " ": {
                    dir: "parentNode"
                },
                "+": {
                    dir: "previousSibling",
                    first: true
                },
                "~": {
                    dir: "previousSibling"
                }
            },
            preFilter: {
                ATTR: function(match) {
                    match[1] = match[1].replace(runescape, funescape);
                    match[3] = (match[4] || match[5] || "").replace(runescape, funescape);
                    if ("~=" === match[2]) match[3] = " " + match[3] + " ";
                    return match.slice(0, 4);
                },
                CHILD: function(match) {
                    match[1] = match[1].toLowerCase();
                    if ("nth" === match[1].slice(0, 3)) {
                        if (!match[3]) Sizzle.error(match[0]);
                        match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * ("even" === match[3] || "odd" === match[3]));
                        match[5] = +(match[7] + match[8] || "odd" === match[3]);
                    } else if (match[3]) Sizzle.error(match[0]);
                    return match;
                },
                PSEUDO: function(match) {
                    var excess, unquoted = !match[5] && match[2];
                    if (matchExpr["CHILD"].test(match[0])) return null;
                    if (match[3] && match[4] !== undefined) match[2] = match[4]; else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                        match[0] = match[0].slice(0, excess);
                        match[2] = unquoted.slice(0, excess);
                    }
                    return match.slice(0, 3);
                }
            },
            filter: {
                TAG: function(nodeNameSelector) {
                    var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                    return "*" === nodeNameSelector ? function() {
                        return true;
                    } : function(elem) {
                        return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                    };
                },
                CLASS: function(className) {
                    var pattern = classCache[className + " "];
                    return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function(elem) {
                        return pattern.test("string" === typeof elem.className && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "");
                    });
                },
                ATTR: function(name, operator, check) {
                    return function(elem) {
                        var result = Sizzle.attr(elem, name);
                        if (null == result) return "!=" === operator;
                        if (!operator) return true;
                        result += "";
                        return "=" === operator ? result === check : "!=" === operator ? result !== check : "^=" === operator ? check && 0 === result.indexOf(check) : "*=" === operator ? check && result.indexOf(check) > -1 : "$=" === operator ? check && result.slice(-check.length) === check : "~=" === operator ? (" " + result + " ").indexOf(check) > -1 : "|=" === operator ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
                    };
                },
                CHILD: function(type, what, argument, first, last) {
                    var simple = "nth" !== type.slice(0, 3), forward = "last" !== type.slice(-4), ofType = "of-type" === what;
                    return 1 === first && 0 === last ? function(elem) {
                        return !!elem.parentNode;
                    } : function(elem, context, xml) {
                        var cache, outerCache, node, diff, nodeIndex, start, dir = simple !== forward ? "nextSibling" : "previousSibling", parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType;
                        if (parent) {
                            if (simple) {
                                while (dir) {
                                    node = elem;
                                    while (node = node[dir]) if (ofType ? node.nodeName.toLowerCase() === name : 1 === node.nodeType) return false;
                                    start = dir = "only" === type && !start && "nextSibling";
                                }
                                return true;
                            }
                            start = [ forward ? parent.firstChild : parent.lastChild ];
                            if (forward && useCache) {
                                outerCache = parent[expando] || (parent[expando] = {});
                                cache = outerCache[type] || [];
                                nodeIndex = cache[0] === dirruns && cache[1];
                                diff = cache[0] === dirruns && cache[2];
                                node = nodeIndex && parent.childNodes[nodeIndex];
                                while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) if (1 === node.nodeType && ++diff && node === elem) {
                                    outerCache[type] = [ dirruns, nodeIndex, diff ];
                                    break;
                                }
                            } else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) diff = cache[1]; else while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) if ((ofType ? node.nodeName.toLowerCase() === name : 1 === node.nodeType) && ++diff) {
                                if (useCache) (node[expando] || (node[expando] = {}))[type] = [ dirruns, diff ];
                                if (node === elem) break;
                            }
                            diff -= last;
                            return diff === first || 0 === diff % first && diff / first >= 0;
                        }
                    };
                },
                PSEUDO: function(pseudo, argument) {
                    var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);
                    if (fn[expando]) return fn(argument);
                    if (fn.length > 1) {
                        args = [ pseudo, pseudo, "", argument ];
                        return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches) {
                            var idx, matched = fn(seed, argument), i = matched.length;
                            while (i--) {
                                idx = indexOf.call(seed, matched[i]);
                                seed[idx] = !(matches[idx] = matched[i]);
                            }
                        }) : function(elem) {
                            return fn(elem, 0, args);
                        };
                    }
                    return fn;
                }
            },
            pseudos: {
                not: markFunction(function(selector) {
                    var input = [], results = [], matcher = compile(selector.replace(rtrim, "$1"));
                    return matcher[expando] ? markFunction(function(seed, matches, context, xml) {
                        var elem, unmatched = matcher(seed, null, xml, []), i = seed.length;
                        while (i--) if (elem = unmatched[i]) seed[i] = !(matches[i] = elem);
                    }) : function(elem, context, xml) {
                        input[0] = elem;
                        matcher(input, null, xml, results);
                        return !results.pop();
                    };
                }),
                has: markFunction(function(selector) {
                    return function(elem) {
                        return Sizzle(selector, elem).length > 0;
                    };
                }),
                contains: markFunction(function(text) {
                    return function(elem) {
                        return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
                    };
                }),
                lang: markFunction(function(lang) {
                    if (!ridentifier.test(lang || "")) Sizzle.error("unsupported lang: " + lang);
                    lang = lang.replace(runescape, funescape).toLowerCase();
                    return function(elem) {
                        var elemLang;
                        do if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                            elemLang = elemLang.toLowerCase();
                            return elemLang === lang || 0 === elemLang.indexOf(lang + "-");
                        } while ((elem = elem.parentNode) && 1 === elem.nodeType);
                        return false;
                    };
                }),
                target: function(elem) {
                    var hash = window.location && window.location.hash;
                    return hash && hash.slice(1) === elem.id;
                },
                root: function(elem) {
                    return elem === docElem;
                },
                focus: function(elem) {
                    return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
                },
                enabled: function(elem) {
                    return false === elem.disabled;
                },
                disabled: function(elem) {
                    return true === elem.disabled;
                },
                checked: function(elem) {
                    var nodeName = elem.nodeName.toLowerCase();
                    return "input" === nodeName && !!elem.checked || "option" === nodeName && !!elem.selected;
                },
                selected: function(elem) {
                    if (elem.parentNode) elem.parentNode.selectedIndex;
                    return true === elem.selected;
                },
                empty: function(elem) {
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) if (elem.nodeName > "@" || 3 === elem.nodeType || 4 === elem.nodeType) return false;
                    return true;
                },
                parent: function(elem) {
                    return !Expr.pseudos["empty"](elem);
                },
                header: function(elem) {
                    return rheader.test(elem.nodeName);
                },
                input: function(elem) {
                    return rinputs.test(elem.nodeName);
                },
                button: function(elem) {
                    var name = elem.nodeName.toLowerCase();
                    return "input" === name && "button" === elem.type || "button" === name;
                },
                text: function(elem) {
                    var attr;
                    return "input" === elem.nodeName.toLowerCase() && "text" === elem.type && (null == (attr = elem.getAttribute("type")) || attr.toLowerCase() === elem.type);
                },
                first: createPositionalPseudo(function() {
                    return [ 0 ];
                }),
                last: createPositionalPseudo(function(matchIndexes, length) {
                    return [ length - 1 ];
                }),
                eq: createPositionalPseudo(function(matchIndexes, length, argument) {
                    return [ argument < 0 ? argument + length : argument ];
                }),
                even: createPositionalPseudo(function(matchIndexes, length) {
                    var i = 0;
                    for (;i < length; i += 2) matchIndexes.push(i);
                    return matchIndexes;
                }),
                odd: createPositionalPseudo(function(matchIndexes, length) {
                    var i = 1;
                    for (;i < length; i += 2) matchIndexes.push(i);
                    return matchIndexes;
                }),
                lt: createPositionalPseudo(function(matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (;--i >= 0; ) matchIndexes.push(i);
                    return matchIndexes;
                }),
                gt: createPositionalPseudo(function(matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (;++i < length; ) matchIndexes.push(i);
                    return matchIndexes;
                })
            }
        };
        Expr.pseudos["nth"] = Expr.pseudos["eq"];
        for (i in {
            radio: true,
            checkbox: true,
            file: true,
            password: true,
            image: true
        }) Expr.pseudos[i] = createInputPseudo(i);
        for (i in {
            submit: true,
            reset: true
        }) Expr.pseudos[i] = createButtonPseudo(i);
        function setFilters() {}
        setFilters.prototype = Expr.filters = Expr.pseudos;
        Expr.setFilters = new setFilters();
        function tokenize(selector, parseOnly) {
            var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + " "];
            if (cached) return parseOnly ? 0 : cached.slice(0);
            soFar = selector;
            groups = [];
            preFilters = Expr.preFilter;
            while (soFar) {
                if (!matched || (match = rcomma.exec(soFar))) {
                    if (match) soFar = soFar.slice(match[0].length) || soFar;
                    groups.push(tokens = []);
                }
                matched = false;
                if (match = rcombinators.exec(soFar)) {
                    matched = match.shift();
                    tokens.push({
                        value: matched,
                        type: match[0].replace(rtrim, " ")
                    });
                    soFar = soFar.slice(matched.length);
                }
                for (type in Expr.filter) if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                    matched = match.shift();
                    tokens.push({
                        value: matched,
                        type: type,
                        matches: match
                    });
                    soFar = soFar.slice(matched.length);
                }
                if (!matched) break;
            }
            return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(0);
        }
        function toSelector(tokens) {
            var i = 0, len = tokens.length, selector = "";
            for (;i < len; i++) selector += tokens[i].value;
            return selector;
        }
        function addCombinator(matcher, combinator, base) {
            var dir = combinator.dir, checkNonElements = base && "parentNode" === dir, doneName = done++;
            return combinator.first ? function(elem, context, xml) {
                while (elem = elem[dir]) if (1 === elem.nodeType || checkNonElements) return matcher(elem, context, xml);
            } : function(elem, context, xml) {
                var data, cache, outerCache, dirkey = dirruns + " " + doneName;
                if (xml) {
                    while (elem = elem[dir]) if (1 === elem.nodeType || checkNonElements) if (matcher(elem, context, xml)) return true;
                } else while (elem = elem[dir]) if (1 === elem.nodeType || checkNonElements) {
                    outerCache = elem[expando] || (elem[expando] = {});
                    if ((cache = outerCache[dir]) && cache[0] === dirkey) {
                        if (true === (data = cache[1]) || data === cachedruns) return true === data;
                    } else {
                        cache = outerCache[dir] = [ dirkey ];
                        cache[1] = matcher(elem, context, xml) || cachedruns;
                        if (true === cache[1]) return true;
                    }
                }
            };
        }
        function elementMatcher(matchers) {
            return matchers.length > 1 ? function(elem, context, xml) {
                var i = matchers.length;
                while (i--) if (!matchers[i](elem, context, xml)) return false;
                return true;
            } : matchers[0];
        }
        function condense(unmatched, map, filter, context, xml) {
            var elem, newUnmatched = [], i = 0, len = unmatched.length, mapped = null != map;
            for (;i < len; i++) if (elem = unmatched[i]) if (!filter || filter(elem, context, xml)) {
                newUnmatched.push(elem);
                if (mapped) map.push(i);
            }
            return newUnmatched;
        }
        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
            if (postFilter && !postFilter[expando]) postFilter = setMatcher(postFilter);
            if (postFinder && !postFinder[expando]) postFinder = setMatcher(postFinder, postSelector);
            return markFunction(function(seed, results, context, xml) {
                var temp, i, elem, preMap = [], postMap = [], preexisting = results.length, elems = seed || multipleContexts(selector || "*", context.nodeType ? [ context ] : context, []), matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
                if (matcher) matcher(matcherIn, matcherOut, context, xml);
                if (postFilter) {
                    temp = condense(matcherOut, postMap);
                    postFilter(temp, [], context, xml);
                    i = temp.length;
                    while (i--) if (elem = temp[i]) matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                }
                if (seed) {
                    if (postFinder || preFilter) {
                        if (postFinder) {
                            temp = [];
                            i = matcherOut.length;
                            while (i--) if (elem = matcherOut[i]) temp.push(matcherIn[i] = elem);
                            postFinder(null, matcherOut = [], temp, xml);
                        }
                        i = matcherOut.length;
                        while (i--) if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf.call(seed, elem) : preMap[i]) > -1) seed[temp] = !(results[temp] = elem);
                    }
                } else {
                    matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
                    if (postFinder) postFinder(null, results, matcherOut, xml); else push.apply(results, matcherOut);
                }
            });
        }
        function matcherFromTokens(tokens) {
            var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[" "], i = leadingRelative ? 1 : 0, matchContext = addCombinator(function(elem) {
                return elem === checkContext;
            }, implicitRelative, true), matchAnyContext = addCombinator(function(elem) {
                return indexOf.call(checkContext, elem) > -1;
            }, implicitRelative, true), matchers = [ function(elem, context, xml) {
                return !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
            } ];
            for (;i < len; i++) if (matcher = Expr.relative[tokens[i].type]) matchers = [ addCombinator(elementMatcher(matchers), matcher) ]; else {
                matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
                if (matcher[expando]) {
                    j = ++i;
                    for (;j < len; j++) if (Expr.relative[tokens[j].type]) break;
                    return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1).concat({
                        value: " " === tokens[i - 2].type ? "*" : ""
                    })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
                }
                matchers.push(matcher);
            }
            return elementMatcher(matchers);
        }
        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
            var matcherCachedRuns = 0, bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function(seed, context, xml, results, expandContext) {
                var elem, j, matcher, setMatched = [], matchedCount = 0, i = "0", unmatched = seed && [], outermost = null != expandContext, contextBackup = outermostContext, elems = seed || byElement && Expr.find["TAG"]("*", expandContext && context.parentNode || context), dirrunsUnique = dirruns += null == contextBackup ? 1 : Math.random() || .1;
                if (outermost) {
                    outermostContext = context !== document && context;
                    cachedruns = matcherCachedRuns;
                }
                for (;null != (elem = elems[i]); i++) {
                    if (byElement && elem) {
                        j = 0;
                        while (matcher = elementMatchers[j++]) if (matcher(elem, context, xml)) {
                            results.push(elem);
                            break;
                        }
                        if (outermost) {
                            dirruns = dirrunsUnique;
                            cachedruns = ++matcherCachedRuns;
                        }
                    }
                    if (bySet) {
                        if (elem = !matcher && elem) matchedCount--;
                        if (seed) unmatched.push(elem);
                    }
                }
                matchedCount += i;
                if (bySet && i !== matchedCount) {
                    j = 0;
                    while (matcher = setMatchers[j++]) matcher(unmatched, setMatched, context, xml);
                    if (seed) {
                        if (matchedCount > 0) while (i--) if (!(unmatched[i] || setMatched[i])) setMatched[i] = pop.call(results);
                        setMatched = condense(setMatched);
                    }
                    push.apply(results, setMatched);
                    if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) Sizzle.uniqueSort(results);
                }
                if (outermost) {
                    dirruns = dirrunsUnique;
                    outermostContext = contextBackup;
                }
                return unmatched;
            };
            return bySet ? markFunction(superMatcher) : superMatcher;
        }
        compile = Sizzle.compile = function(selector, group) {
            var i, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + " "];
            if (!cached) {
                if (!group) group = tokenize(selector);
                i = group.length;
                while (i--) {
                    cached = matcherFromTokens(group[i]);
                    if (cached[expando]) setMatchers.push(cached); else elementMatchers.push(cached);
                }
                cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
            }
            return cached;
        };
        function multipleContexts(selector, contexts, results) {
            var i = 0, len = contexts.length;
            for (;i < len; i++) Sizzle(selector, contexts[i], results);
            return results;
        }
        function select(selector, context, results, seed) {
            var i, tokens, token, type, find, match = tokenize(selector);
            if (!seed) if (1 === match.length) {
                tokens = match[0] = match[0].slice(0);
                if (tokens.length > 2 && "ID" === (token = tokens[0]).type && support.getById && 9 === context.nodeType && documentIsHTML && Expr.relative[tokens[1].type]) {
                    context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
                    if (!context) return results;
                    selector = selector.slice(tokens.shift().value.length);
                }
                i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
                while (i--) {
                    token = tokens[i];
                    if (Expr.relative[type = token.type]) break;
                    if (find = Expr.find[type]) if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && context.parentNode || context)) {
                        tokens.splice(i, 1);
                        selector = seed.length && toSelector(tokens);
                        if (!selector) {
                            push.apply(results, seed);
                            return results;
                        }
                        break;
                    }
                }
            }
            compile(selector, match)(seed, context, !documentIsHTML, results, rsibling.test(selector));
            return results;
        }
        support.sortStable = expando.split("").sort(sortOrder).join("") === expando;
        support.detectDuplicates = hasDuplicate;
        setDocument();
        support.sortDetached = assert(function(div1) {
            return 1 & div1.compareDocumentPosition(document.createElement("div"));
        });
        if (!assert(function(div) {
            div.innerHTML = "<a href='#'></a>";
            return "#" === div.firstChild.getAttribute("href");
        })) addHandle("type|href|height|width", function(elem, name, isXML) {
            if (!isXML) return elem.getAttribute(name, "type" === name.toLowerCase() ? 1 : 2);
        });
        if (!support.attributes || !assert(function(div) {
            div.innerHTML = "<input/>";
            div.firstChild.setAttribute("value", "");
            return "" === div.firstChild.getAttribute("value");
        })) addHandle("value", function(elem, name, isXML) {
            if (!isXML && "input" === elem.nodeName.toLowerCase()) return elem.defaultValue;
        });
        if (!assert(function(div) {
            return null == div.getAttribute("disabled");
        })) addHandle(booleans, function(elem, name, isXML) {
            var val;
            if (!isXML) return (val = elem.getAttributeNode(name)) && val.specified ? val.value : true === elem[name] ? name.toLowerCase() : null;
        });
        jQuery.find = Sizzle;
        jQuery.expr = Sizzle.selectors;
        jQuery.expr[":"] = jQuery.expr.pseudos;
        jQuery.unique = Sizzle.uniqueSort;
        jQuery.text = Sizzle.getText;
        jQuery.isXMLDoc = Sizzle.isXML;
        jQuery.contains = Sizzle.contains;
    })(window);
    var optionsCache = {};
    function createOptions(options) {
        var object = optionsCache[options] = {};
        jQuery.each(options.match(core_rnotwhite) || [], function(_, flag) {
            object[flag] = true;
        });
        return object;
    }
    jQuery.Callbacks = function(options) {
        options = "string" === typeof options ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);
        var firing, memory, fired, firingLength, firingIndex, firingStart, list = [], stack = !options.once && [], fire = function(data) {
            memory = options.memory && data;
            fired = true;
            firingIndex = firingStart || 0;
            firingStart = 0;
            firingLength = list.length;
            firing = true;
            for (;list && firingIndex < firingLength; firingIndex++) if (false === list[firingIndex].apply(data[0], data[1]) && options.stopOnFalse) {
                memory = false;
                break;
            }
            firing = false;
            if (list) if (stack) {
                if (stack.length) fire(stack.shift());
            } else if (memory) list = []; else self.disable();
        }, self = {
            add: function() {
                if (list) {
                    var start = list.length;
                    (function add(args) {
                        jQuery.each(args, function(_, arg) {
                            var type = jQuery.type(arg);
                            if ("function" === type) {
                                if (!options.unique || !self.has(arg)) list.push(arg);
                            } else if (arg && arg.length && "string" !== type) add(arg);
                        });
                    })(arguments);
                    if (firing) firingLength = list.length; else if (memory) {
                        firingStart = start;
                        fire(memory);
                    }
                }
                return this;
            },
            remove: function() {
                if (list) jQuery.each(arguments, function(_, arg) {
                    var index;
                    while ((index = jQuery.inArray(arg, list, index)) > -1) {
                        list.splice(index, 1);
                        if (firing) {
                            if (index <= firingLength) firingLength--;
                            if (index <= firingIndex) firingIndex--;
                        }
                    }
                });
                return this;
            },
            has: function(fn) {
                return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);
            },
            empty: function() {
                list = [];
                firingLength = 0;
                return this;
            },
            disable: function() {
                list = stack = memory = undefined;
                return this;
            },
            disabled: function() {
                return !list;
            },
            lock: function() {
                stack = undefined;
                if (!memory) self.disable();
                return this;
            },
            locked: function() {
                return !stack;
            },
            fireWith: function(context, args) {
                if (list && (!fired || stack)) {
                    args = args || [];
                    args = [ context, args.slice ? args.slice() : args ];
                    if (firing) stack.push(args); else fire(args);
                }
                return this;
            },
            fire: function() {
                self.fireWith(this, arguments);
                return this;
            },
            fired: function() {
                return !!fired;
            }
        };
        return self;
    };
    jQuery.extend({
        Deferred: function(func) {
            var tuples = [ [ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ], [ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ], [ "notify", "progress", jQuery.Callbacks("memory") ] ], state = "pending", promise = {
                state: function() {
                    return state;
                },
                always: function() {
                    deferred.done(arguments).fail(arguments);
                    return this;
                },
                then: function() {
                    var fns = arguments;
                    return jQuery.Deferred(function(newDefer) {
                        jQuery.each(tuples, function(i, tuple) {
                            var action = tuple[0], fn = jQuery.isFunction(fns[i]) && fns[i];
                            deferred[tuple[1]](function() {
                                var returned = fn && fn.apply(this, arguments);
                                if (returned && jQuery.isFunction(returned.promise)) returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify); else newDefer[action + "With"](this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments);
                            });
                        });
                        fns = null;
                    }).promise();
                },
                promise: function(obj) {
                    return null != obj ? jQuery.extend(obj, promise) : promise;
                }
            }, deferred = {};
            promise.pipe = promise.then;
            jQuery.each(tuples, function(i, tuple) {
                var list = tuple[2], stateString = tuple[3];
                promise[tuple[1]] = list.add;
                if (stateString) list.add(function() {
                    state = stateString;
                }, tuples[1 ^ i][2].disable, tuples[2][2].lock);
                deferred[tuple[0]] = function() {
                    deferred[tuple[0] + "With"](this === deferred ? promise : this, arguments);
                    return this;
                };
                deferred[tuple[0] + "With"] = list.fireWith;
            });
            promise.promise(deferred);
            if (func) func.call(deferred, deferred);
            return deferred;
        },
        when: function(subordinate) {
            var i = 0, resolveValues = core_slice.call(arguments), length = resolveValues.length, remaining = 1 !== length || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0, deferred = 1 === remaining ? subordinate : jQuery.Deferred(), updateFunc = function(i, contexts, values) {
                return function(value) {
                    contexts[i] = this;
                    values[i] = arguments.length > 1 ? core_slice.call(arguments) : value;
                    if (values === progressValues) deferred.notifyWith(contexts, values); else if (!--remaining) deferred.resolveWith(contexts, values);
                };
            }, progressValues, progressContexts, resolveContexts;
            if (length > 1) {
                progressValues = new Array(length);
                progressContexts = new Array(length);
                resolveContexts = new Array(length);
                for (;i < length; i++) if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues)); else --remaining;
            }
            if (!remaining) deferred.resolveWith(resolveContexts, resolveValues);
            return deferred.promise();
        }
    });
    jQuery.support = function(support) {
        var all, a, input, select, fragment, opt, eventName, isSupported, i, div = document.createElement("div");
        div.setAttribute("className", "t");
        div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
        all = div.getElementsByTagName("*") || [];
        a = div.getElementsByTagName("a")[0];
        if (!a || !a.style || !all.length) return support;
        select = document.createElement("select");
        opt = select.appendChild(document.createElement("option"));
        input = div.getElementsByTagName("input")[0];
        a.style.cssText = "top:1px;float:left;opacity:.5";
        support.getSetAttribute = "t" !== div.className;
        support.leadingWhitespace = 3 === div.firstChild.nodeType;
        support.tbody = !div.getElementsByTagName("tbody").length;
        support.htmlSerialize = !!div.getElementsByTagName("link").length;
        support.style = /top/.test(a.getAttribute("style"));
        support.hrefNormalized = "/a" === a.getAttribute("href");
        support.opacity = /^0.5/.test(a.style.opacity);
        support.cssFloat = !!a.style.cssFloat;
        support.checkOn = !!input.value;
        support.optSelected = opt.selected;
        support.enctype = !!document.createElement("form").enctype;
        support.html5Clone = "<:nav></:nav>" !== document.createElement("nav").cloneNode(true).outerHTML;
        support.inlineBlockNeedsLayout = false;
        support.shrinkWrapBlocks = false;
        support.pixelPosition = false;
        support.deleteExpando = true;
        support.noCloneEvent = true;
        support.reliableMarginRight = true;
        support.boxSizingReliable = true;
        input.checked = true;
        support.noCloneChecked = input.cloneNode(true).checked;
        select.disabled = true;
        support.optDisabled = !opt.disabled;
        try {
            delete div.test;
        } catch (e) {
            support.deleteExpando = false;
        }
        input = document.createElement("input");
        input.setAttribute("value", "");
        support.input = "" === input.getAttribute("value");
        input.value = "t";
        input.setAttribute("type", "radio");
        support.radioValue = "t" === input.value;
        input.setAttribute("checked", "t");
        input.setAttribute("name", "t");
        fragment = document.createDocumentFragment();
        fragment.appendChild(input);
        support.appendChecked = input.checked;
        support.checkClone = fragment.cloneNode(true).cloneNode(true).lastChild.checked;
        if (div.attachEvent) {
            div.attachEvent("onclick", function() {
                support.noCloneEvent = false;
            });
            div.cloneNode(true).click();
        }
        for (i in {
            submit: true,
            change: true,
            focusin: true
        }) {
            div.setAttribute(eventName = "on" + i, "t");
            support[i + "Bubbles"] = eventName in window || false === div.attributes[eventName].expando;
        }
        div.style.backgroundClip = "content-box";
        div.cloneNode(true).style.backgroundClip = "";
        support.clearCloneStyle = "content-box" === div.style.backgroundClip;
        for (i in jQuery(support)) break;
        support.ownLast = "0" !== i;
        jQuery(function() {
            var container, marginDiv, tds, divReset = "padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;", body = document.getElementsByTagName("body")[0];
            if (!body) return;
            container = document.createElement("div");
            container.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px";
            body.appendChild(container).appendChild(div);
            div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
            tds = div.getElementsByTagName("td");
            tds[0].style.cssText = "padding:0;margin:0;border:0;display:none";
            isSupported = 0 === tds[0].offsetHeight;
            tds[0].style.display = "";
            tds[1].style.display = "none";
            support.reliableHiddenOffsets = isSupported && 0 === tds[0].offsetHeight;
            div.innerHTML = "";
            div.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";
            jQuery.swap(body, null != body.style.zoom ? {
                zoom: 1
            } : {}, function() {
                support.boxSizing = 4 === div.offsetWidth;
            });
            if (window.getComputedStyle) {
                support.pixelPosition = "1%" !== (window.getComputedStyle(div, null) || {}).top;
                support.boxSizingReliable = "4px" === (window.getComputedStyle(div, null) || {
                    width: "4px"
                }).width;
                marginDiv = div.appendChild(document.createElement("div"));
                marginDiv.style.cssText = div.style.cssText = divReset;
                marginDiv.style.marginRight = marginDiv.style.width = "0";
                div.style.width = "1px";
                support.reliableMarginRight = !parseFloat((window.getComputedStyle(marginDiv, null) || {}).marginRight);
            }
            if (typeof div.style.zoom !== core_strundefined) {
                div.innerHTML = "";
                div.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";
                support.inlineBlockNeedsLayout = 3 === div.offsetWidth;
                div.style.display = "block";
                div.innerHTML = "<div></div>";
                div.firstChild.style.width = "5px";
                support.shrinkWrapBlocks = 3 !== div.offsetWidth;
                if (support.inlineBlockNeedsLayout) body.style.zoom = 1;
            }
            body.removeChild(container);
            container = div = tds = marginDiv = null;
        });
        all = select = fragment = opt = a = input = null;
        return support;
    }({});
    var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/, rmultiDash = /([A-Z])/g;
    function internalData(elem, name, data, pvt) {
        if (!jQuery.acceptData(elem)) return;
        var ret, thisCache, internalKey = jQuery.expando, isNode = elem.nodeType, cache = isNode ? jQuery.cache : elem, id = isNode ? elem[internalKey] : elem[internalKey] && internalKey;
        if ((!id || !cache[id] || !pvt && !cache[id].data) && data === undefined && "string" === typeof name) return;
        if (!id) if (isNode) id = elem[internalKey] = core_deletedIds.pop() || jQuery.guid++; else id = internalKey;
        if (!cache[id]) cache[id] = isNode ? {} : {
            toJSON: jQuery.noop
        };
        if ("object" === typeof name || "function" === typeof name) if (pvt) cache[id] = jQuery.extend(cache[id], name); else cache[id].data = jQuery.extend(cache[id].data, name);
        thisCache = cache[id];
        if (!pvt) {
            if (!thisCache.data) thisCache.data = {};
            thisCache = thisCache.data;
        }
        if (data !== undefined) thisCache[jQuery.camelCase(name)] = data;
        if ("string" === typeof name) {
            ret = thisCache[name];
            if (null == ret) ret = thisCache[jQuery.camelCase(name)];
        } else ret = thisCache;
        return ret;
    }
    function internalRemoveData(elem, name, pvt) {
        if (!jQuery.acceptData(elem)) return;
        var thisCache, i, isNode = elem.nodeType, cache = isNode ? jQuery.cache : elem, id = isNode ? elem[jQuery.expando] : jQuery.expando;
        if (!cache[id]) return;
        if (name) {
            thisCache = pvt ? cache[id] : cache[id].data;
            if (thisCache) {
                if (!jQuery.isArray(name)) if (name in thisCache) name = [ name ]; else {
                    name = jQuery.camelCase(name);
                    if (name in thisCache) name = [ name ]; else name = name.split(" ");
                } else name = name.concat(jQuery.map(name, jQuery.camelCase));
                i = name.length;
                while (i--) delete thisCache[name[i]];
                if (pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache)) return;
            }
        }
        if (!pvt) {
            delete cache[id].data;
            if (!isEmptyDataObject(cache[id])) return;
        }
        if (isNode) jQuery.cleanData([ elem ], true); else if (jQuery.support.deleteExpando || cache != cache.window) delete cache[id]; else cache[id] = null;
    }
    jQuery.extend({
        cache: {},
        noData: {
            applet: true,
            embed: true,
            object: "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
        },
        hasData: function(elem) {
            elem = elem.nodeType ? jQuery.cache[elem[jQuery.expando]] : elem[jQuery.expando];
            return !!elem && !isEmptyDataObject(elem);
        },
        data: function(elem, name, data) {
            return internalData(elem, name, data);
        },
        removeData: function(elem, name) {
            return internalRemoveData(elem, name);
        },
        _data: function(elem, name, data) {
            return internalData(elem, name, data, true);
        },
        _removeData: function(elem, name) {
            return internalRemoveData(elem, name, true);
        },
        acceptData: function(elem) {
            if (elem.nodeType && 1 !== elem.nodeType && 9 !== elem.nodeType) return false;
            var noData = elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()];
            return !noData || true !== noData && elem.getAttribute("classid") === noData;
        }
    });
    jQuery.fn.extend({
        data: function(key, value) {
            var attrs, name, data = null, i = 0, elem = this[0];
            if (key === undefined) {
                if (this.length) {
                    data = jQuery.data(elem);
                    if (1 === elem.nodeType && !jQuery._data(elem, "parsedAttrs")) {
                        attrs = elem.attributes;
                        for (;i < attrs.length; i++) {
                            name = attrs[i].name;
                            if (0 === name.indexOf("data-")) {
                                name = jQuery.camelCase(name.slice(5));
                                dataAttr(elem, name, data[name]);
                            }
                        }
                        jQuery._data(elem, "parsedAttrs", true);
                    }
                }
                return data;
            }
            if ("object" === typeof key) return this.each(function() {
                jQuery.data(this, key);
            });
            return arguments.length > 1 ? this.each(function() {
                jQuery.data(this, key, value);
            }) : elem ? dataAttr(elem, key, jQuery.data(elem, key)) : null;
        },
        removeData: function(key) {
            return this.each(function() {
                jQuery.removeData(this, key);
            });
        }
    });
    function dataAttr(elem, key, data) {
        if (data === undefined && 1 === elem.nodeType) {
            var name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();
            data = elem.getAttribute(name);
            if ("string" === typeof data) {
                try {
                    data = "true" === data ? true : "false" === data ? false : "null" === data ? null : +data + "" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;
                } catch (e) {}
                jQuery.data(elem, key, data);
            } else data = undefined;
        }
        return data;
    }
    function isEmptyDataObject(obj) {
        var name;
        for (name in obj) {
            if ("data" === name && jQuery.isEmptyObject(obj[name])) continue;
            if ("toJSON" !== name) return false;
        }
        return true;
    }
    jQuery.extend({
        queue: function(elem, type, data) {
            var queue;
            if (elem) {
                type = (type || "fx") + "queue";
                queue = jQuery._data(elem, type);
                if (data) if (!queue || jQuery.isArray(data)) queue = jQuery._data(elem, type, jQuery.makeArray(data)); else queue.push(data);
                return queue || [];
            }
        },
        dequeue: function(elem, type) {
            type = type || "fx";
            var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function() {
                jQuery.dequeue(elem, type);
            };
            if ("inprogress" === fn) {
                fn = queue.shift();
                startLength--;
            }
            if (fn) {
                if ("fx" === type) queue.unshift("inprogress");
                delete hooks.stop;
                fn.call(elem, next, hooks);
            }
            if (!startLength && hooks) hooks.empty.fire();
        },
        _queueHooks: function(elem, type) {
            var key = type + "queueHooks";
            return jQuery._data(elem, key) || jQuery._data(elem, key, {
                empty: jQuery.Callbacks("once memory").add(function() {
                    jQuery._removeData(elem, type + "queue");
                    jQuery._removeData(elem, key);
                })
            });
        }
    });
    jQuery.fn.extend({
        queue: function(type, data) {
            var setter = 2;
            if ("string" !== typeof type) {
                data = type;
                type = "fx";
                setter--;
            }
            if (arguments.length < setter) return jQuery.queue(this[0], type);
            return data === undefined ? this : this.each(function() {
                var queue = jQuery.queue(this, type, data);
                jQuery._queueHooks(this, type);
                if ("fx" === type && "inprogress" !== queue[0]) jQuery.dequeue(this, type);
            });
        },
        dequeue: function(type) {
            return this.each(function() {
                jQuery.dequeue(this, type);
            });
        },
        delay: function(time, type) {
            time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
            type = type || "fx";
            return this.queue(type, function(next, hooks) {
                var timeout = setTimeout(next, time);
                hooks.stop = function() {
                    clearTimeout(timeout);
                };
            });
        },
        clearQueue: function(type) {
            return this.queue(type || "fx", []);
        },
        promise: function(type, obj) {
            var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function() {
                if (!--count) defer.resolveWith(elements, [ elements ]);
            };
            if ("string" !== typeof type) {
                obj = type;
                type = undefined;
            }
            type = type || "fx";
            while (i--) {
                tmp = jQuery._data(elements[i], type + "queueHooks");
                if (tmp && tmp.empty) {
                    count++;
                    tmp.empty.add(resolve);
                }
            }
            resolve();
            return defer.promise(obj);
        }
    });
    var nodeHook, boolHook, rclass = /[\t\r\n\f]/g, rreturn = /\r/g, rfocusable = /^(?:input|select|textarea|button|object)$/i, rclickable = /^(?:a|area)$/i, ruseDefault = /^(?:checked|selected)$/i, getSetAttribute = jQuery.support.getSetAttribute, getSetInput = jQuery.support.input;
    jQuery.fn.extend({
        attr: function(name, value) {
            return jQuery.access(this, jQuery.attr, name, value, arguments.length > 1);
        },
        removeAttr: function(name) {
            return this.each(function() {
                jQuery.removeAttr(this, name);
            });
        },
        prop: function(name, value) {
            return jQuery.access(this, jQuery.prop, name, value, arguments.length > 1);
        },
        removeProp: function(name) {
            name = jQuery.propFix[name] || name;
            return this.each(function() {
                try {
                    this[name] = undefined;
                    delete this[name];
                } catch (e) {}
            });
        },
        addClass: function(value) {
            var classes, elem, cur, clazz, j, i = 0, len = this.length, proceed = "string" === typeof value && value;
            if (jQuery.isFunction(value)) return this.each(function(j) {
                jQuery(this).addClass(value.call(this, j, this.className));
            });
            if (proceed) {
                classes = (value || "").match(core_rnotwhite) || [];
                for (;i < len; i++) {
                    elem = this[i];
                    cur = 1 === elem.nodeType && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : " ");
                    if (cur) {
                        j = 0;
                        while (clazz = classes[j++]) if (cur.indexOf(" " + clazz + " ") < 0) cur += clazz + " ";
                        elem.className = jQuery.trim(cur);
                    }
                }
            }
            return this;
        },
        removeClass: function(value) {
            var classes, elem, cur, clazz, j, i = 0, len = this.length, proceed = 0 === arguments.length || "string" === typeof value && value;
            if (jQuery.isFunction(value)) return this.each(function(j) {
                jQuery(this).removeClass(value.call(this, j, this.className));
            });
            if (proceed) {
                classes = (value || "").match(core_rnotwhite) || [];
                for (;i < len; i++) {
                    elem = this[i];
                    cur = 1 === elem.nodeType && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : "");
                    if (cur) {
                        j = 0;
                        while (clazz = classes[j++]) while (cur.indexOf(" " + clazz + " ") >= 0) cur = cur.replace(" " + clazz + " ", " ");
                        elem.className = value ? jQuery.trim(cur) : "";
                    }
                }
            }
            return this;
        },
        toggleClass: function(value, stateVal) {
            var type = typeof value;
            if ("boolean" === typeof stateVal && "string" === type) return stateVal ? this.addClass(value) : this.removeClass(value);
            if (jQuery.isFunction(value)) return this.each(function(i) {
                jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
            });
            return this.each(function() {
                if ("string" === type) {
                    var className, i = 0, self = jQuery(this), classNames = value.match(core_rnotwhite) || [];
                    while (className = classNames[i++]) if (self.hasClass(className)) self.removeClass(className); else self.addClass(className);
                } else if (type === core_strundefined || "boolean" === type) {
                    if (this.className) jQuery._data(this, "__className__", this.className);
                    this.className = this.className || false === value ? "" : jQuery._data(this, "__className__") || "";
                }
            });
        },
        hasClass: function(selector) {
            var className = " " + selector + " ", i = 0, l = this.length;
            for (;i < l; i++) if (1 === this[i].nodeType && (" " + this[i].className + " ").replace(rclass, " ").indexOf(className) >= 0) return true;
            return false;
        },
        val: function(value) {
            var ret, hooks, isFunction, elem = this[0];
            if (!arguments.length) {
                if (elem) {
                    hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
                    if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) return ret;
                    ret = elem.value;
                    return "string" === typeof ret ? ret.replace(rreturn, "") : null == ret ? "" : ret;
                }
                return;
            }
            isFunction = jQuery.isFunction(value);
            return this.each(function(i) {
                var val;
                if (1 !== this.nodeType) return;
                if (isFunction) val = value.call(this, i, jQuery(this).val()); else val = value;
                if (null == val) val = ""; else if ("number" === typeof val) val += ""; else if (jQuery.isArray(val)) val = jQuery.map(val, function(value) {
                    return null == value ? "" : value + "";
                });
                hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
                if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) this.value = val;
            });
        }
    });
    jQuery.extend({
        valHooks: {
            option: {
                get: function(elem) {
                    var val = jQuery.find.attr(elem, "value");
                    return null != val ? val : elem.text;
                }
            },
            select: {
                get: function(elem) {
                    var value, option, options = elem.options, index = elem.selectedIndex, one = "select-one" === elem.type || index < 0, values = one ? null : [], max = one ? index + 1 : options.length, i = index < 0 ? max : one ? index : 0;
                    for (;i < max; i++) {
                        option = options[i];
                        if ((option.selected || i === index) && (jQuery.support.optDisabled ? !option.disabled : null === option.getAttribute("disabled")) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {
                            value = jQuery(option).val();
                            if (one) return value;
                            values.push(value);
                        }
                    }
                    return values;
                },
                set: function(elem, value) {
                    var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length;
                    while (i--) {
                        option = options[i];
                        if (option.selected = jQuery.inArray(jQuery(option).val(), values) >= 0) optionSet = true;
                    }
                    if (!optionSet) elem.selectedIndex = -1;
                    return values;
                }
            }
        },
        attr: function(elem, name, value) {
            var hooks, ret, nType = elem.nodeType;
            if (!elem || 3 === nType || 8 === nType || 2 === nType) return;
            if (typeof elem.getAttribute === core_strundefined) return jQuery.prop(elem, name, value);
            if (1 !== nType || !jQuery.isXMLDoc(elem)) {
                name = name.toLowerCase();
                hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook);
            }
            if (value !== undefined) if (null === value) jQuery.removeAttr(elem, name); else if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) return ret; else {
                elem.setAttribute(name, value + "");
                return value;
            } else if (hooks && "get" in hooks && null !== (ret = hooks.get(elem, name))) return ret; else {
                ret = jQuery.find.attr(elem, name);
                return null == ret ? undefined : ret;
            }
        },
        removeAttr: function(elem, value) {
            var name, propName, i = 0, attrNames = value && value.match(core_rnotwhite);
            if (attrNames && 1 === elem.nodeType) while (name = attrNames[i++]) {
                propName = jQuery.propFix[name] || name;
                if (jQuery.expr.match.bool.test(name)) if (getSetInput && getSetAttribute || !ruseDefault.test(name)) elem[propName] = false; else elem[jQuery.camelCase("default-" + name)] = elem[propName] = false; else jQuery.attr(elem, name, "");
                elem.removeAttribute(getSetAttribute ? name : propName);
            }
        },
        attrHooks: {
            type: {
                set: function(elem, value) {
                    if (!jQuery.support.radioValue && "radio" === value && jQuery.nodeName(elem, "input")) {
                        var val = elem.value;
                        elem.setAttribute("type", value);
                        if (val) elem.value = val;
                        return value;
                    }
                }
            }
        },
        propFix: {
            "for": "htmlFor",
            "class": "className"
        },
        prop: function(elem, name, value) {
            var ret, hooks, notxml, nType = elem.nodeType;
            if (!elem || 3 === nType || 8 === nType || 2 === nType) return;
            notxml = 1 !== nType || !jQuery.isXMLDoc(elem);
            if (notxml) {
                name = jQuery.propFix[name] || name;
                hooks = jQuery.propHooks[name];
            }
            if (value !== undefined) return hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined ? ret : elem[name] = value; else return hooks && "get" in hooks && null !== (ret = hooks.get(elem, name)) ? ret : elem[name];
        },
        propHooks: {
            tabIndex: {
                get: function(elem) {
                    var tabindex = jQuery.find.attr(elem, "tabindex");
                    return tabindex ? parseInt(tabindex, 10) : rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ? 0 : -1;
                }
            }
        }
    });
    boolHook = {
        set: function(elem, value, name) {
            if (false === value) jQuery.removeAttr(elem, name); else if (getSetInput && getSetAttribute || !ruseDefault.test(name)) elem.setAttribute(!getSetAttribute && jQuery.propFix[name] || name, name); else elem[jQuery.camelCase("default-" + name)] = elem[name] = true;
            return name;
        }
    };
    jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(i, name) {
        var getter = jQuery.expr.attrHandle[name] || jQuery.find.attr;
        jQuery.expr.attrHandle[name] = getSetInput && getSetAttribute || !ruseDefault.test(name) ? function(elem, name, isXML) {
            var fn = jQuery.expr.attrHandle[name], ret = isXML ? undefined : (jQuery.expr.attrHandle[name] = undefined) != getter(elem, name, isXML) ? name.toLowerCase() : null;
            jQuery.expr.attrHandle[name] = fn;
            return ret;
        } : function(elem, name, isXML) {
            return isXML ? undefined : elem[jQuery.camelCase("default-" + name)] ? name.toLowerCase() : null;
        };
    });
    if (!getSetInput || !getSetAttribute) jQuery.attrHooks.value = {
        set: function(elem, value, name) {
            if (jQuery.nodeName(elem, "input")) elem.defaultValue = value; else return nodeHook && nodeHook.set(elem, value, name);
        }
    };
    if (!getSetAttribute) {
        nodeHook = {
            set: function(elem, value, name) {
                var ret = elem.getAttributeNode(name);
                if (!ret) elem.setAttributeNode(ret = elem.ownerDocument.createAttribute(name));
                ret.value = value += "";
                return "value" === name || value === elem.getAttribute(name) ? value : undefined;
            }
        };
        jQuery.expr.attrHandle.id = jQuery.expr.attrHandle.name = jQuery.expr.attrHandle.coords = function(elem, name, isXML) {
            var ret;
            return isXML ? undefined : (ret = elem.getAttributeNode(name)) && "" !== ret.value ? ret.value : null;
        };
        jQuery.valHooks.button = {
            get: function(elem, name) {
                var ret = elem.getAttributeNode(name);
                return ret && ret.specified ? ret.value : undefined;
            },
            set: nodeHook.set
        };
        jQuery.attrHooks.contenteditable = {
            set: function(elem, value, name) {
                nodeHook.set(elem, "" === value ? false : value, name);
            }
        };
        jQuery.each([ "width", "height" ], function(i, name) {
            jQuery.attrHooks[name] = {
                set: function(elem, value) {
                    if ("" === value) {
                        elem.setAttribute(name, "auto");
                        return value;
                    }
                }
            };
        });
    }
    if (!jQuery.support.hrefNormalized) jQuery.each([ "href", "src" ], function(i, name) {
        jQuery.propHooks[name] = {
            get: function(elem) {
                return elem.getAttribute(name, 4);
            }
        };
    });
    if (!jQuery.support.style) jQuery.attrHooks.style = {
        get: function(elem) {
            return elem.style.cssText || undefined;
        },
        set: function(elem, value) {
            return elem.style.cssText = value + "";
        }
    };
    if (!jQuery.support.optSelected) jQuery.propHooks.selected = {
        get: function(elem) {
            var parent = elem.parentNode;
            if (parent) {
                parent.selectedIndex;
                if (parent.parentNode) parent.parentNode.selectedIndex;
            }
            return null;
        }
    };
    jQuery.each([ "tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable" ], function() {
        jQuery.propFix[this.toLowerCase()] = this;
    });
    if (!jQuery.support.enctype) jQuery.propFix.enctype = "encoding";
    jQuery.each([ "radio", "checkbox" ], function() {
        jQuery.valHooks[this] = {
            set: function(elem, value) {
                if (jQuery.isArray(value)) return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;
            }
        };
        if (!jQuery.support.checkOn) jQuery.valHooks[this].get = function(elem) {
            return null === elem.getAttribute("value") ? "on" : elem.value;
        };
    });
    var rformElems = /^(?:input|select|textarea)$/i, rkeyEvent = /^key/, rmouseEvent = /^(?:mouse|contextmenu)|click/, rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;
    function returnTrue() {
        return true;
    }
    function returnFalse() {
        return false;
    }
    function safeActiveElement() {
        try {
            return document.activeElement;
        } catch (err) {}
    }
    jQuery.event = {
        global: {},
        add: function(elem, types, handler, data, selector) {
            var tmp, events, t, handleObjIn, special, eventHandle, handleObj, handlers, type, namespaces, origType, elemData = jQuery._data(elem);
            if (!elemData) return;
            if (handler.handler) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
                selector = handleObjIn.selector;
            }
            if (!handler.guid) handler.guid = jQuery.guid++;
            if (!(events = elemData.events)) events = elemData.events = {};
            if (!(eventHandle = elemData.handle)) {
                eventHandle = elemData.handle = function(e) {
                    return typeof jQuery !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ? jQuery.event.dispatch.apply(eventHandle.elem, arguments) : undefined;
                };
                eventHandle.elem = elem;
            }
            types = (types || "").match(core_rnotwhite) || [ "" ];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();
                if (!type) continue;
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                special = jQuery.event.special[type] || {};
                handleObj = jQuery.extend({
                    type: type,
                    origType: origType,
                    data: data,
                    handler: handler,
                    guid: handler.guid,
                    selector: selector,
                    needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                    namespace: namespaces.join(".")
                }, handleObjIn);
                if (!(handlers = events[type])) {
                    handlers = events[type] = [];
                    handlers.delegateCount = 0;
                    if (!special.setup || false === special.setup.call(elem, data, namespaces, eventHandle)) if (elem.addEventListener) elem.addEventListener(type, eventHandle, false); else if (elem.attachEvent) elem.attachEvent("on" + type, eventHandle);
                }
                if (special.add) {
                    special.add.call(elem, handleObj);
                    if (!handleObj.handler.guid) handleObj.handler.guid = handler.guid;
                }
                if (selector) handlers.splice(handlers.delegateCount++, 0, handleObj); else handlers.push(handleObj);
                jQuery.event.global[type] = true;
            }
            elem = null;
        },
        remove: function(elem, types, handler, selector, mappedTypes) {
            var j, handleObj, tmp, origCount, t, events, special, handlers, type, namespaces, origType, elemData = jQuery.hasData(elem) && jQuery._data(elem);
            if (!elemData || !(events = elemData.events)) return;
            types = (types || "").match(core_rnotwhite) || [ "" ];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();
                if (!type) {
                    for (type in events) jQuery.event.remove(elem, type + types[t], handler, selector, true);
                    continue;
                }
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                handlers = events[type] || [];
                tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
                origCount = j = handlers.length;
                while (j--) {
                    handleObj = handlers[j];
                    if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || "**" === selector && handleObj.selector)) {
                        handlers.splice(j, 1);
                        if (handleObj.selector) handlers.delegateCount--;
                        if (special.remove) special.remove.call(elem, handleObj);
                    }
                }
                if (origCount && !handlers.length) {
                    if (!special.teardown || false === special.teardown.call(elem, namespaces, elemData.handle)) jQuery.removeEvent(elem, type, elemData.handle);
                    delete events[type];
                }
            }
            if (jQuery.isEmptyObject(events)) {
                delete elemData.handle;
                jQuery._removeData(elem, "events");
            }
        },
        trigger: function(event, data, elem, onlyHandlers) {
            var handle, ontype, cur, bubbleType, special, tmp, i, eventPath = [ elem || document ], type = core_hasOwn.call(event, "type") ? event.type : event, namespaces = core_hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
            cur = tmp = elem = elem || document;
            if (3 === elem.nodeType || 8 === elem.nodeType) return;
            if (rfocusMorph.test(type + jQuery.event.triggered)) return;
            if (type.indexOf(".") >= 0) {
                namespaces = type.split(".");
                type = namespaces.shift();
                namespaces.sort();
            }
            ontype = type.indexOf(":") < 0 && "on" + type;
            event = event[jQuery.expando] ? event : new jQuery.Event(type, "object" === typeof event && event);
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join(".");
            event.namespace_re = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
            event.result = undefined;
            if (!event.target) event.target = elem;
            data = null == data ? [ event ] : jQuery.makeArray(data, [ event ]);
            special = jQuery.event.special[type] || {};
            if (!onlyHandlers && special.trigger && false === special.trigger.apply(elem, data)) return;
            if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
                bubbleType = special.delegateType || type;
                if (!rfocusMorph.test(bubbleType + type)) cur = cur.parentNode;
                for (;cur; cur = cur.parentNode) {
                    eventPath.push(cur);
                    tmp = cur;
                }
                if (tmp === (elem.ownerDocument || document)) eventPath.push(tmp.defaultView || tmp.parentWindow || window);
            }
            i = 0;
            while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
                event.type = i > 1 ? bubbleType : special.bindType || type;
                handle = (jQuery._data(cur, "events") || {})[event.type] && jQuery._data(cur, "handle");
                if (handle) handle.apply(cur, data);
                handle = ontype && cur[ontype];
                if (handle && jQuery.acceptData(cur) && handle.apply && false === handle.apply(cur, data)) event.preventDefault();
            }
            event.type = type;
            if (!onlyHandlers && !event.isDefaultPrevented()) if ((!special._default || false === special._default.apply(eventPath.pop(), data)) && jQuery.acceptData(elem)) if (ontype && elem[type] && !jQuery.isWindow(elem)) {
                tmp = elem[ontype];
                if (tmp) elem[ontype] = null;
                jQuery.event.triggered = type;
                try {
                    elem[type]();
                } catch (e) {}
                jQuery.event.triggered = undefined;
                if (tmp) elem[ontype] = tmp;
            }
            return event.result;
        },
        dispatch: function(event) {
            event = jQuery.event.fix(event);
            var i, ret, handleObj, matched, j, handlerQueue = [], args = core_slice.call(arguments), handlers = (jQuery._data(this, "events") || {})[event.type] || [], special = jQuery.event.special[event.type] || {};
            args[0] = event;
            event.delegateTarget = this;
            if (special.preDispatch && false === special.preDispatch.call(this, event)) return;
            handlerQueue = jQuery.event.handlers.call(this, event, handlers);
            i = 0;
            while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
                event.currentTarget = matched.elem;
                j = 0;
                while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {
                    event.handleObj = handleObj;
                    event.data = handleObj.data;
                    ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                    if (ret !== undefined) if (false === (event.result = ret)) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                }
            }
            if (special.postDispatch) special.postDispatch.call(this, event);
            return event.result;
        },
        handlers: function(event, handlers) {
            var sel, handleObj, matches, i, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
            if (delegateCount && cur.nodeType && (!event.button || "click" !== event.type)) for (;cur != this; cur = cur.parentNode || this) if (1 === cur.nodeType && (true !== cur.disabled || "click" !== event.type)) {
                matches = [];
                for (i = 0; i < delegateCount; i++) {
                    handleObj = handlers[i];
                    sel = handleObj.selector + " ";
                    if (matches[sel] === undefined) matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [ cur ]).length;
                    if (matches[sel]) matches.push(handleObj);
                }
                if (matches.length) handlerQueue.push({
                    elem: cur,
                    handlers: matches
                });
            }
            if (delegateCount < handlers.length) handlerQueue.push({
                elem: this,
                handlers: handlers.slice(delegateCount)
            });
            return handlerQueue;
        },
        fix: function(event) {
            if (event[jQuery.expando]) return event;
            var i, prop, copy, type = event.type, originalEvent = event, fixHook = this.fixHooks[type];
            if (!fixHook) this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};
            copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
            event = new jQuery.Event(originalEvent);
            i = copy.length;
            while (i--) {
                prop = copy[i];
                event[prop] = originalEvent[prop];
            }
            if (!event.target) event.target = originalEvent.srcElement || document;
            if (3 === event.target.nodeType) event.target = event.target.parentNode;
            event.metaKey = !!event.metaKey;
            return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
        },
        props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
        fixHooks: {},
        keyHooks: {
            props: "char charCode key keyCode".split(" "),
            filter: function(event, original) {
                if (null == event.which) event.which = null != original.charCode ? original.charCode : original.keyCode;
                return event;
            }
        },
        mouseHooks: {
            props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
            filter: function(event, original) {
                var body, eventDoc, doc, button = original.button, fromElement = original.fromElement;
                if (null == event.pageX && null != original.clientX) {
                    eventDoc = event.target.ownerDocument || document;
                    doc = eventDoc.documentElement;
                    body = eventDoc.body;
                    event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
                    event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
                }
                if (!event.relatedTarget && fromElement) event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
                if (!event.which && button !== undefined) event.which = 1 & button ? 1 : 2 & button ? 3 : 4 & button ? 2 : 0;
                return event;
            }
        },
        special: {
            load: {
                noBubble: true
            },
            focus: {
                trigger: function() {
                    if (this !== safeActiveElement() && this.focus) try {
                        this.focus();
                        return false;
                    } catch (e) {}
                },
                delegateType: "focusin"
            },
            blur: {
                trigger: function() {
                    if (this === safeActiveElement() && this.blur) {
                        this.blur();
                        return false;
                    }
                },
                delegateType: "focusout"
            },
            click: {
                trigger: function() {
                    if (jQuery.nodeName(this, "input") && "checkbox" === this.type && this.click) {
                        this.click();
                        return false;
                    }
                },
                _default: function(event) {
                    return jQuery.nodeName(event.target, "a");
                }
            },
            beforeunload: {
                postDispatch: function(event) {
                    if (event.result !== undefined) event.originalEvent.returnValue = event.result;
                }
            }
        },
        simulate: function(type, elem, event, bubble) {
            var e = jQuery.extend(new jQuery.Event(), event, {
                type: type,
                isSimulated: true,
                originalEvent: {}
            });
            if (bubble) jQuery.event.trigger(e, null, elem); else jQuery.event.dispatch.call(elem, e);
            if (e.isDefaultPrevented()) event.preventDefault();
        }
    };
    jQuery.removeEvent = document.removeEventListener ? function(elem, type, handle) {
        if (elem.removeEventListener) elem.removeEventListener(type, handle, false);
    } : function(elem, type, handle) {
        var name = "on" + type;
        if (elem.detachEvent) {
            if (typeof elem[name] === core_strundefined) elem[name] = null;
            elem.detachEvent(name, handle);
        }
    };
    jQuery.Event = function(src, props) {
        if (!(this instanceof jQuery.Event)) return new jQuery.Event(src, props);
        if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;
            this.isDefaultPrevented = src.defaultPrevented || false === src.returnValue || src.getPreventDefault && src.getPreventDefault() ? returnTrue : returnFalse;
        } else this.type = src;
        if (props) jQuery.extend(this, props);
        this.timeStamp = src && src.timeStamp || jQuery.now();
        this[jQuery.expando] = true;
    };
    jQuery.Event.prototype = {
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        preventDefault: function() {
            var e = this.originalEvent;
            this.isDefaultPrevented = returnTrue;
            if (!e) return;
            if (e.preventDefault) e.preventDefault(); else e.returnValue = false;
        },
        stopPropagation: function() {
            var e = this.originalEvent;
            this.isPropagationStopped = returnTrue;
            if (!e) return;
            if (e.stopPropagation) e.stopPropagation();
            e.cancelBubble = true;
        },
        stopImmediatePropagation: function() {
            this.isImmediatePropagationStopped = returnTrue;
            this.stopPropagation();
        }
    };
    jQuery.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout"
    }, function(orig, fix) {
        jQuery.event.special[orig] = {
            delegateType: fix,
            bindType: fix,
            handle: function(event) {
                var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
                if (!related || related !== target && !jQuery.contains(target, related)) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply(this, arguments);
                    event.type = fix;
                }
                return ret;
            }
        };
    });
    if (!jQuery.support.submitBubbles) jQuery.event.special.submit = {
        setup: function() {
            if (jQuery.nodeName(this, "form")) return false;
            jQuery.event.add(this, "click._submit keypress._submit", function(e) {
                var elem = e.target, form = jQuery.nodeName(elem, "input") || jQuery.nodeName(elem, "button") ? elem.form : undefined;
                if (form && !jQuery._data(form, "submitBubbles")) {
                    jQuery.event.add(form, "submit._submit", function(event) {
                        event._submit_bubble = true;
                    });
                    jQuery._data(form, "submitBubbles", true);
                }
            });
        },
        postDispatch: function(event) {
            if (event._submit_bubble) {
                delete event._submit_bubble;
                if (this.parentNode && !event.isTrigger) jQuery.event.simulate("submit", this.parentNode, event, true);
            }
        },
        teardown: function() {
            if (jQuery.nodeName(this, "form")) return false;
            jQuery.event.remove(this, "._submit");
        }
    };
    if (!jQuery.support.changeBubbles) jQuery.event.special.change = {
        setup: function() {
            if (rformElems.test(this.nodeName)) {
                if ("checkbox" === this.type || "radio" === this.type) {
                    jQuery.event.add(this, "propertychange._change", function(event) {
                        if ("checked" === event.originalEvent.propertyName) this._just_changed = true;
                    });
                    jQuery.event.add(this, "click._change", function(event) {
                        if (this._just_changed && !event.isTrigger) this._just_changed = false;
                        jQuery.event.simulate("change", this, event, true);
                    });
                }
                return false;
            }
            jQuery.event.add(this, "beforeactivate._change", function(e) {
                var elem = e.target;
                if (rformElems.test(elem.nodeName) && !jQuery._data(elem, "changeBubbles")) {
                    jQuery.event.add(elem, "change._change", function(event) {
                        if (this.parentNode && !event.isSimulated && !event.isTrigger) jQuery.event.simulate("change", this.parentNode, event, true);
                    });
                    jQuery._data(elem, "changeBubbles", true);
                }
            });
        },
        handle: function(event) {
            var elem = event.target;
            if (this !== elem || event.isSimulated || event.isTrigger || "radio" !== elem.type && "checkbox" !== elem.type) return event.handleObj.handler.apply(this, arguments);
        },
        teardown: function() {
            jQuery.event.remove(this, "._change");
            return !rformElems.test(this.nodeName);
        }
    };
    if (!jQuery.support.focusinBubbles) jQuery.each({
        focus: "focusin",
        blur: "focusout"
    }, function(orig, fix) {
        var attaches = 0, handler = function(event) {
            jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);
        };
        jQuery.event.special[fix] = {
            setup: function() {
                if (0 === attaches++) document.addEventListener(orig, handler, true);
            },
            teardown: function() {
                if (0 === --attaches) document.removeEventListener(orig, handler, true);
            }
        };
    });
    jQuery.fn.extend({
        on: function(types, selector, data, fn, one) {
            var type, origFn;
            if ("object" === typeof types) {
                if ("string" !== typeof selector) {
                    data = data || selector;
                    selector = undefined;
                }
                for (type in types) this.on(type, selector, data, types[type], one);
                return this;
            }
            if (null == data && null == fn) {
                fn = selector;
                data = selector = undefined;
            } else if (null == fn) if ("string" === typeof selector) {
                fn = data;
                data = undefined;
            } else {
                fn = data;
                data = selector;
                selector = undefined;
            }
            if (false === fn) fn = returnFalse; else if (!fn) return this;
            if (1 === one) {
                origFn = fn;
                fn = function(event) {
                    jQuery().off(event);
                    return origFn.apply(this, arguments);
                };
                fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
            }
            return this.each(function() {
                jQuery.event.add(this, types, fn, data, selector);
            });
        },
        one: function(types, selector, data, fn) {
            return this.on(types, selector, data, fn, 1);
        },
        off: function(types, selector, fn) {
            var handleObj, type;
            if (types && types.preventDefault && types.handleObj) {
                handleObj = types.handleObj;
                jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
                return this;
            }
            if ("object" === typeof types) {
                for (type in types) this.off(type, selector, types[type]);
                return this;
            }
            if (false === selector || "function" === typeof selector) {
                fn = selector;
                selector = undefined;
            }
            if (false === fn) fn = returnFalse;
            return this.each(function() {
                jQuery.event.remove(this, types, fn, selector);
            });
        },
        trigger: function(type, data) {
            return this.each(function() {
                jQuery.event.trigger(type, data, this);
            });
        },
        triggerHandler: function(type, data) {
            var elem = this[0];
            if (elem) return jQuery.event.trigger(type, data, elem, true);
        }
    });
    var isSimple = /^.[^:#\[\.,]*$/, rparentsprev = /^(?:parents|prev(?:Until|All))/, rneedsContext = jQuery.expr.match.needsContext, guaranteedUnique = {
        children: true,
        contents: true,
        next: true,
        prev: true
    };
    jQuery.fn.extend({
        find: function(selector) {
            var i, ret = [], self = this, len = self.length;
            if ("string" !== typeof selector) return this.pushStack(jQuery(selector).filter(function() {
                for (i = 0; i < len; i++) if (jQuery.contains(self[i], this)) return true;
            }));
            for (i = 0; i < len; i++) jQuery.find(selector, self[i], ret);
            ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
            ret.selector = this.selector ? this.selector + " " + selector : selector;
            return ret;
        },
        has: function(target) {
            var i, targets = jQuery(target, this), len = targets.length;
            return this.filter(function() {
                for (i = 0; i < len; i++) if (jQuery.contains(this, targets[i])) return true;
            });
        },
        not: function(selector) {
            return this.pushStack(winnow(this, selector || [], true));
        },
        filter: function(selector) {
            return this.pushStack(winnow(this, selector || [], false));
        },
        is: function(selector) {
            return !!winnow(this, "string" === typeof selector && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
        },
        closest: function(selectors, context) {
            var cur, i = 0, l = this.length, ret = [], pos = rneedsContext.test(selectors) || "string" !== typeof selectors ? jQuery(selectors, context || this.context) : 0;
            for (;i < l; i++) for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 : 1 === cur.nodeType && jQuery.find.matchesSelector(cur, selectors))) {
                cur = ret.push(cur);
                break;
            }
            return this.pushStack(ret.length > 1 ? jQuery.unique(ret) : ret);
        },
        index: function(elem) {
            if (!elem) return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
            if ("string" === typeof elem) return jQuery.inArray(this[0], jQuery(elem));
            return jQuery.inArray(elem.jquery ? elem[0] : elem, this);
        },
        add: function(selector, context) {
            var set = "string" === typeof selector ? jQuery(selector, context) : jQuery.makeArray(selector && selector.nodeType ? [ selector ] : selector), all = jQuery.merge(this.get(), set);
            return this.pushStack(jQuery.unique(all));
        },
        addBack: function(selector) {
            return this.add(null == selector ? this.prevObject : this.prevObject.filter(selector));
        }
    });
    function sibling(cur, dir) {
        do cur = cur[dir]; while (cur && 1 !== cur.nodeType);
        return cur;
    }
    jQuery.each({
        parent: function(elem) {
            var parent = elem.parentNode;
            return parent && 11 !== parent.nodeType ? parent : null;
        },
        parents: function(elem) {
            return jQuery.dir(elem, "parentNode");
        },
        parentsUntil: function(elem, i, until) {
            return jQuery.dir(elem, "parentNode", until);
        },
        next: function(elem) {
            return sibling(elem, "nextSibling");
        },
        prev: function(elem) {
            return sibling(elem, "previousSibling");
        },
        nextAll: function(elem) {
            return jQuery.dir(elem, "nextSibling");
        },
        prevAll: function(elem) {
            return jQuery.dir(elem, "previousSibling");
        },
        nextUntil: function(elem, i, until) {
            return jQuery.dir(elem, "nextSibling", until);
        },
        prevUntil: function(elem, i, until) {
            return jQuery.dir(elem, "previousSibling", until);
        },
        siblings: function(elem) {
            return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
        },
        children: function(elem) {
            return jQuery.sibling(elem.firstChild);
        },
        contents: function(elem) {
            return jQuery.nodeName(elem, "iframe") ? elem.contentDocument || elem.contentWindow.document : jQuery.merge([], elem.childNodes);
        }
    }, function(name, fn) {
        jQuery.fn[name] = function(until, selector) {
            var ret = jQuery.map(this, fn, until);
            if ("Until" !== name.slice(-5)) selector = until;
            if (selector && "string" === typeof selector) ret = jQuery.filter(selector, ret);
            if (this.length > 1) {
                if (!guaranteedUnique[name]) ret = jQuery.unique(ret);
                if (rparentsprev.test(name)) ret = ret.reverse();
            }
            return this.pushStack(ret);
        };
    });
    jQuery.extend({
        filter: function(expr, elems, not) {
            var elem = elems[0];
            if (not) expr = ":not(" + expr + ")";
            return 1 === elems.length && 1 === elem.nodeType ? jQuery.find.matchesSelector(elem, expr) ? [ elem ] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function(elem) {
                return 1 === elem.nodeType;
            }));
        },
        dir: function(elem, dir, until) {
            var matched = [], cur = elem[dir];
            while (cur && 9 !== cur.nodeType && (until === undefined || 1 !== cur.nodeType || !jQuery(cur).is(until))) {
                if (1 === cur.nodeType) matched.push(cur);
                cur = cur[dir];
            }
            return matched;
        },
        sibling: function(n, elem) {
            var r = [];
            for (;n; n = n.nextSibling) if (1 === n.nodeType && n !== elem) r.push(n);
            return r;
        }
    });
    function winnow(elements, qualifier, not) {
        if (jQuery.isFunction(qualifier)) return jQuery.grep(elements, function(elem, i) {
            return !!qualifier.call(elem, i, elem) !== not;
        });
        if (qualifier.nodeType) return jQuery.grep(elements, function(elem) {
            return elem === qualifier !== not;
        });
        if ("string" === typeof qualifier) {
            if (isSimple.test(qualifier)) return jQuery.filter(qualifier, elements, not);
            qualifier = jQuery.filter(qualifier, elements);
        }
        return jQuery.grep(elements, function(elem) {
            return jQuery.inArray(elem, qualifier) >= 0 !== not;
        });
    }
    function createSafeFragment(document) {
        var list = nodeNames.split("|"), safeFrag = document.createDocumentFragment();
        if (safeFrag.createElement) while (list.length) safeFrag.createElement(list.pop());
        return safeFrag;
    }
    var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" + "header|hgroup|mark|meter|nav|output|progress|section|summary|time|video", rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g, rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"), rleadingWhitespace = /^\s+/, rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, rtagName = /<([\w:]+)/, rtbody = /<tbody/i, rhtml = /<|&#?\w+;/, rnoInnerhtml = /<(?:script|style|link)/i, manipulation_rcheckableType = /^(?:checkbox|radio)$/i, rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rscriptType = /^$|\/(?:java|ecma)script/i, rscriptTypeMasked = /^true\/(.*)/, rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g, wrapMap = {
        option: [ 1, "<select multiple='multiple'>", "</select>" ],
        legend: [ 1, "<fieldset>", "</fieldset>" ],
        area: [ 1, "<map>", "</map>" ],
        param: [ 1, "<object>", "</object>" ],
        thead: [ 1, "<table>", "</table>" ],
        tr: [ 2, "<table><tbody>", "</tbody></table>" ],
        col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
        td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
        _default: jQuery.support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>" ]
    }, safeFragment = createSafeFragment(document), fragmentDiv = safeFragment.appendChild(document.createElement("div"));
    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    jQuery.fn.extend({
        text: function(value) {
            return jQuery.access(this, function(value) {
                return value === undefined ? jQuery.text(this) : this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value));
            }, null, value, arguments.length);
        },
        append: function() {
            return this.domManip(arguments, function(elem) {
                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                    var target = manipulationTarget(this, elem);
                    target.appendChild(elem);
                }
            });
        },
        prepend: function() {
            return this.domManip(arguments, function(elem) {
                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                    var target = manipulationTarget(this, elem);
                    target.insertBefore(elem, target.firstChild);
                }
            });
        },
        before: function() {
            return this.domManip(arguments, function(elem) {
                if (this.parentNode) this.parentNode.insertBefore(elem, this);
            });
        },
        after: function() {
            return this.domManip(arguments, function(elem) {
                if (this.parentNode) this.parentNode.insertBefore(elem, this.nextSibling);
            });
        },
        remove: function(selector, keepData) {
            var elem, elems = selector ? jQuery.filter(selector, this) : this, i = 0;
            for (;null != (elem = elems[i]); i++) {
                if (!keepData && 1 === elem.nodeType) jQuery.cleanData(getAll(elem));
                if (elem.parentNode) {
                    if (keepData && jQuery.contains(elem.ownerDocument, elem)) setGlobalEval(getAll(elem, "script"));
                    elem.parentNode.removeChild(elem);
                }
            }
            return this;
        },
        empty: function() {
            var elem, i = 0;
            for (;null != (elem = this[i]); i++) {
                if (1 === elem.nodeType) jQuery.cleanData(getAll(elem, false));
                while (elem.firstChild) elem.removeChild(elem.firstChild);
                if (elem.options && jQuery.nodeName(elem, "select")) elem.options.length = 0;
            }
            return this;
        },
        clone: function(dataAndEvents, deepDataAndEvents) {
            dataAndEvents = null == dataAndEvents ? false : dataAndEvents;
            deepDataAndEvents = null == deepDataAndEvents ? dataAndEvents : deepDataAndEvents;
            return this.map(function() {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
            });
        },
        html: function(value) {
            return jQuery.access(this, function(value) {
                var elem = this[0] || {}, i = 0, l = this.length;
                if (value === undefined) return 1 === elem.nodeType ? elem.innerHTML.replace(rinlinejQuery, "") : undefined;
                if ("string" === typeof value && !rnoInnerhtml.test(value) && (jQuery.support.htmlSerialize || !rnoshimcache.test(value)) && (jQuery.support.leadingWhitespace || !rleadingWhitespace.test(value)) && !wrapMap[(rtagName.exec(value) || [ "", "" ])[1].toLowerCase()]) {
                    value = value.replace(rxhtmlTag, "<$1></$2>");
                    try {
                        for (;i < l; i++) {
                            elem = this[i] || {};
                            if (1 === elem.nodeType) {
                                jQuery.cleanData(getAll(elem, false));
                                elem.innerHTML = value;
                            }
                        }
                        elem = 0;
                    } catch (e) {}
                }
                if (elem) this.empty().append(value);
            }, null, value, arguments.length);
        },
        replaceWith: function() {
            var args = jQuery.map(this, function(elem) {
                return [ elem.nextSibling, elem.parentNode ];
            }), i = 0;
            this.domManip(arguments, function(elem) {
                var next = args[i++], parent = args[i++];
                if (parent) {
                    if (next && next.parentNode !== parent) next = this.nextSibling;
                    jQuery(this).remove();
                    parent.insertBefore(elem, next);
                }
            }, true);
            return i ? this : this.remove();
        },
        detach: function(selector) {
            return this.remove(selector, true);
        },
        domManip: function(args, callback, allowIntersection) {
            args = core_concat.apply([], args);
            var first, node, hasScripts, scripts, doc, fragment, i = 0, l = this.length, set = this, iNoClone = l - 1, value = args[0], isFunction = jQuery.isFunction(value);
            if (isFunction || !(l <= 1 || "string" !== typeof value || jQuery.support.checkClone || !rchecked.test(value))) return this.each(function(index) {
                var self = set.eq(index);
                if (isFunction) args[0] = value.call(this, index, self.html());
                self.domManip(args, callback, allowIntersection);
            });
            if (l) {
                fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, !allowIntersection && this);
                first = fragment.firstChild;
                if (1 === fragment.childNodes.length) fragment = first;
                if (first) {
                    scripts = jQuery.map(getAll(fragment, "script"), disableScript);
                    hasScripts = scripts.length;
                    for (;i < l; i++) {
                        node = fragment;
                        if (i !== iNoClone) {
                            node = jQuery.clone(node, true, true);
                            if (hasScripts) jQuery.merge(scripts, getAll(node, "script"));
                        }
                        callback.call(this[i], node, i);
                    }
                    if (hasScripts) {
                        doc = scripts[scripts.length - 1].ownerDocument;
                        jQuery.map(scripts, restoreScript);
                        for (i = 0; i < hasScripts; i++) {
                            node = scripts[i];
                            if (rscriptType.test(node.type || "") && !jQuery._data(node, "globalEval") && jQuery.contains(doc, node)) if (node.src) jQuery._evalUrl(node.src); else jQuery.globalEval((node.text || node.textContent || node.innerHTML || "").replace(rcleanScript, ""));
                        }
                    }
                    fragment = first = null;
                }
            }
            return this;
        }
    });
    function manipulationTarget(elem, content) {
        return jQuery.nodeName(elem, "table") && jQuery.nodeName(1 === content.nodeType ? content : content.firstChild, "tr") ? elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")) : elem;
    }
    function disableScript(elem) {
        elem.type = (null !== jQuery.find.attr(elem, "type")) + "/" + elem.type;
        return elem;
    }
    function restoreScript(elem) {
        var match = rscriptTypeMasked.exec(elem.type);
        if (match) elem.type = match[1]; else elem.removeAttribute("type");
        return elem;
    }
    function setGlobalEval(elems, refElements) {
        var elem, i = 0;
        for (;null != (elem = elems[i]); i++) jQuery._data(elem, "globalEval", !refElements || jQuery._data(refElements[i], "globalEval"));
    }
    function cloneCopyEvent(src, dest) {
        if (1 !== dest.nodeType || !jQuery.hasData(src)) return;
        var type, i, l, oldData = jQuery._data(src), curData = jQuery._data(dest, oldData), events = oldData.events;
        if (events) {
            delete curData.handle;
            curData.events = {};
            for (type in events) for (i = 0, l = events[type].length; i < l; i++) jQuery.event.add(dest, type, events[type][i]);
        }
        if (curData.data) curData.data = jQuery.extend({}, curData.data);
    }
    function fixCloneNodeIssues(src, dest) {
        var nodeName, e, data;
        if (1 !== dest.nodeType) return;
        nodeName = dest.nodeName.toLowerCase();
        if (!jQuery.support.noCloneEvent && dest[jQuery.expando]) {
            data = jQuery._data(dest);
            for (e in data.events) jQuery.removeEvent(dest, e, data.handle);
            dest.removeAttribute(jQuery.expando);
        }
        if ("script" === nodeName && dest.text !== src.text) {
            disableScript(dest).text = src.text;
            restoreScript(dest);
        } else if ("object" === nodeName) {
            if (dest.parentNode) dest.outerHTML = src.outerHTML;
            if (jQuery.support.html5Clone && src.innerHTML && !jQuery.trim(dest.innerHTML)) dest.innerHTML = src.innerHTML;
        } else if ("input" === nodeName && manipulation_rcheckableType.test(src.type)) {
            dest.defaultChecked = dest.checked = src.checked;
            if (dest.value !== src.value) dest.value = src.value;
        } else if ("option" === nodeName) dest.defaultSelected = dest.selected = src.defaultSelected; else if ("input" === nodeName || "textarea" === nodeName) dest.defaultValue = src.defaultValue;
    }
    jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function(name, original) {
        jQuery.fn[name] = function(selector) {
            var elems, i = 0, ret = [], insert = jQuery(selector), last = insert.length - 1;
            for (;i <= last; i++) {
                elems = i === last ? this : this.clone(true);
                jQuery(insert[i])[original](elems);
                core_push.apply(ret, elems.get());
            }
            return this.pushStack(ret);
        };
    });
    function getAll(context, tag) {
        var elems, elem, i = 0, found = typeof context.getElementsByTagName !== core_strundefined ? context.getElementsByTagName(tag || "*") : typeof context.querySelectorAll !== core_strundefined ? context.querySelectorAll(tag || "*") : undefined;
        if (!found) for (found = [], elems = context.childNodes || context; null != (elem = elems[i]); i++) if (!tag || jQuery.nodeName(elem, tag)) found.push(elem); else jQuery.merge(found, getAll(elem, tag));
        return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([ context ], found) : found;
    }
    function fixDefaultChecked(elem) {
        if (manipulation_rcheckableType.test(elem.type)) elem.defaultChecked = elem.checked;
    }
    jQuery.extend({
        clone: function(elem, dataAndEvents, deepDataAndEvents) {
            var destElements, node, clone, i, srcElements, inPage = jQuery.contains(elem.ownerDocument, elem);
            if (jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test("<" + elem.nodeName + ">")) clone = elem.cloneNode(true); else {
                fragmentDiv.innerHTML = elem.outerHTML;
                fragmentDiv.removeChild(clone = fragmentDiv.firstChild);
            }
            if ((!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) && (1 === elem.nodeType || 11 === elem.nodeType) && !jQuery.isXMLDoc(elem)) {
                destElements = getAll(clone);
                srcElements = getAll(elem);
                for (i = 0; null != (node = srcElements[i]); ++i) if (destElements[i]) fixCloneNodeIssues(node, destElements[i]);
            }
            if (dataAndEvents) if (deepDataAndEvents) {
                srcElements = srcElements || getAll(elem);
                destElements = destElements || getAll(clone);
                for (i = 0; null != (node = srcElements[i]); i++) cloneCopyEvent(node, destElements[i]);
            } else cloneCopyEvent(elem, clone);
            destElements = getAll(clone, "script");
            if (destElements.length > 0) setGlobalEval(destElements, !inPage && getAll(elem, "script"));
            destElements = srcElements = node = null;
            return clone;
        },
        buildFragment: function(elems, context, scripts, selection) {
            var j, elem, contains, tmp, tag, tbody, wrap, l = elems.length, safe = createSafeFragment(context), nodes = [], i = 0;
            for (;i < l; i++) {
                elem = elems[i];
                if (elem || 0 === elem) if ("object" === jQuery.type(elem)) jQuery.merge(nodes, elem.nodeType ? [ elem ] : elem); else if (!rhtml.test(elem)) nodes.push(context.createTextNode(elem)); else {
                    tmp = tmp || safe.appendChild(context.createElement("div"));
                    tag = (rtagName.exec(elem) || [ "", "" ])[1].toLowerCase();
                    wrap = wrapMap[tag] || wrapMap._default;
                    tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, "<$1></$2>") + wrap[2];
                    j = wrap[0];
                    while (j--) tmp = tmp.lastChild;
                    if (!jQuery.support.leadingWhitespace && rleadingWhitespace.test(elem)) nodes.push(context.createTextNode(rleadingWhitespace.exec(elem)[0]));
                    if (!jQuery.support.tbody) {
                        elem = "table" === tag && !rtbody.test(elem) ? tmp.firstChild : "<table>" === wrap[1] && !rtbody.test(elem) ? tmp : 0;
                        j = elem && elem.childNodes.length;
                        while (j--) if (jQuery.nodeName(tbody = elem.childNodes[j], "tbody") && !tbody.childNodes.length) elem.removeChild(tbody);
                    }
                    jQuery.merge(nodes, tmp.childNodes);
                    tmp.textContent = "";
                    while (tmp.firstChild) tmp.removeChild(tmp.firstChild);
                    tmp = safe.lastChild;
                }
            }
            if (tmp) safe.removeChild(tmp);
            if (!jQuery.support.appendChecked) jQuery.grep(getAll(nodes, "input"), fixDefaultChecked);
            i = 0;
            while (elem = nodes[i++]) {
                if (selection && jQuery.inArray(elem, selection) !== -1) continue;
                contains = jQuery.contains(elem.ownerDocument, elem);
                tmp = getAll(safe.appendChild(elem), "script");
                if (contains) setGlobalEval(tmp);
                if (scripts) {
                    j = 0;
                    while (elem = tmp[j++]) if (rscriptType.test(elem.type || "")) scripts.push(elem);
                }
            }
            tmp = null;
            return safe;
        },
        cleanData: function(elems, acceptData) {
            var elem, type, id, data, i = 0, internalKey = jQuery.expando, cache = jQuery.cache, deleteExpando = jQuery.support.deleteExpando, special = jQuery.event.special;
            for (;null != (elem = elems[i]); i++) if (acceptData || jQuery.acceptData(elem)) {
                id = elem[internalKey];
                data = id && cache[id];
                if (data) {
                    if (data.events) for (type in data.events) if (special[type]) jQuery.event.remove(elem, type); else jQuery.removeEvent(elem, type, data.handle);
                    if (cache[id]) {
                        delete cache[id];
                        if (deleteExpando) delete elem[internalKey]; else if (typeof elem.removeAttribute !== core_strundefined) elem.removeAttribute(internalKey); else elem[internalKey] = null;
                        core_deletedIds.push(id);
                    }
                }
            }
        },
        _evalUrl: function(url) {
            return jQuery.ajax({
                url: url,
                type: "GET",
                dataType: "script",
                async: false,
                global: false,
                "throws": true
            });
        }
    });
    jQuery.fn.extend({
        wrapAll: function(html) {
            if (jQuery.isFunction(html)) return this.each(function(i) {
                jQuery(this).wrapAll(html.call(this, i));
            });
            if (this[0]) {
                var wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
                if (this[0].parentNode) wrap.insertBefore(this[0]);
                wrap.map(function() {
                    var elem = this;
                    while (elem.firstChild && 1 === elem.firstChild.nodeType) elem = elem.firstChild;
                    return elem;
                }).append(this);
            }
            return this;
        },
        wrapInner: function(html) {
            if (jQuery.isFunction(html)) return this.each(function(i) {
                jQuery(this).wrapInner(html.call(this, i));
            });
            return this.each(function() {
                var self = jQuery(this), contents = self.contents();
                if (contents.length) contents.wrapAll(html); else self.append(html);
            });
        },
        wrap: function(html) {
            var isFunction = jQuery.isFunction(html);
            return this.each(function(i) {
                jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
            });
        },
        unwrap: function() {
            return this.parent().each(function() {
                if (!jQuery.nodeName(this, "body")) jQuery(this).replaceWith(this.childNodes);
            }).end();
        }
    });
    var iframe, getStyles, curCSS, ralpha = /alpha\([^)]*\)/i, ropacity = /opacity\s*=\s*([^)]*)/, rposition = /^(top|right|bottom|left)$/, rdisplayswap = /^(none|table(?!-c[ea]).+)/, rmargin = /^margin/, rnumsplit = new RegExp("^(" + core_pnum + ")(.*)$", "i"), rnumnonpx = new RegExp("^(" + core_pnum + ")(?!px)[a-z%]+$", "i"), rrelNum = new RegExp("^([+-])=(" + core_pnum + ")", "i"), elemdisplay = {
        BODY: "block"
    }, cssShow = {
        position: "absolute",
        visibility: "hidden",
        display: "block"
    }, cssNormalTransform = {
        letterSpacing: 0,
        fontWeight: 400
    }, cssExpand = [ "Top", "Right", "Bottom", "Left" ], cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];
    function vendorPropName(style, name) {
        if (name in style) return name;
        var capName = name.charAt(0).toUpperCase() + name.slice(1), origName = name, i = cssPrefixes.length;
        while (i--) {
            name = cssPrefixes[i] + capName;
            if (name in style) return name;
        }
        return origName;
    }
    function isHidden(elem, el) {
        elem = el || elem;
        return "none" === jQuery.css(elem, "display") || !jQuery.contains(elem.ownerDocument, elem);
    }
    function showHide(elements, show) {
        var display, elem, hidden, values = [], index = 0, length = elements.length;
        for (;index < length; index++) {
            elem = elements[index];
            if (!elem.style) continue;
            values[index] = jQuery._data(elem, "olddisplay");
            display = elem.style.display;
            if (show) {
                if (!values[index] && "none" === display) elem.style.display = "";
                if ("" === elem.style.display && isHidden(elem)) values[index] = jQuery._data(elem, "olddisplay", css_defaultDisplay(elem.nodeName));
            } else if (!values[index]) {
                hidden = isHidden(elem);
                if (display && "none" !== display || !hidden) jQuery._data(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"));
            }
        }
        for (index = 0; index < length; index++) {
            elem = elements[index];
            if (!elem.style) continue;
            if (!show || "none" === elem.style.display || "" === elem.style.display) elem.style.display = show ? values[index] || "" : "none";
        }
        return elements;
    }
    jQuery.fn.extend({
        css: function(name, value) {
            return jQuery.access(this, function(elem, name, value) {
                var len, styles, map = {}, i = 0;
                if (jQuery.isArray(name)) {
                    styles = getStyles(elem);
                    len = name.length;
                    for (;i < len; i++) map[name[i]] = jQuery.css(elem, name[i], false, styles);
                    return map;
                }
                return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
            }, name, value, arguments.length > 1);
        },
        show: function() {
            return showHide(this, true);
        },
        hide: function() {
            return showHide(this);
        },
        toggle: function(state) {
            if ("boolean" === typeof state) return state ? this.show() : this.hide();
            return this.each(function() {
                if (isHidden(this)) jQuery(this).show(); else jQuery(this).hide();
            });
        }
    });
    jQuery.extend({
        cssHooks: {
            opacity: {
                get: function(elem, computed) {
                    if (computed) {
                        var ret = curCSS(elem, "opacity");
                        return "" === ret ? "1" : ret;
                    }
                }
            }
        },
        cssNumber: {
            columnCount: true,
            fillOpacity: true,
            fontWeight: true,
            lineHeight: true,
            opacity: true,
            orphans: true,
            widows: true,
            zIndex: true,
            zoom: true
        },
        cssProps: {
            "float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
        },
        style: function(elem, name, value, extra) {
            if (!elem || 3 === elem.nodeType || 8 === elem.nodeType || !elem.style) return;
            var ret, type, hooks, origName = jQuery.camelCase(name), style = elem.style;
            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (value !== undefined) {
                type = typeof value;
                if ("string" === type && (ret = rrelNum.exec(value))) {
                    value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
                    type = "number";
                }
                if (null == value || "number" === type && isNaN(value)) return;
                if ("number" === type && !jQuery.cssNumber[origName]) value += "px";
                if (!jQuery.support.clearCloneStyle && "" === value && 0 === name.indexOf("background")) style[name] = "inherit";
                if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) try {
                    style[name] = value;
                } catch (e) {}
            } else {
                if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) return ret;
                return style[name];
            }
        },
        css: function(elem, name, extra, styles) {
            var num, val, hooks, origName = jQuery.camelCase(name);
            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (hooks && "get" in hooks) val = hooks.get(elem, true, extra);
            if (val === undefined) val = curCSS(elem, name, styles);
            if ("normal" === val && name in cssNormalTransform) val = cssNormalTransform[name];
            if ("" === extra || extra) {
                num = parseFloat(val);
                return true === extra || jQuery.isNumeric(num) ? num || 0 : val;
            }
            return val;
        }
    });
    if (window.getComputedStyle) {
        getStyles = function(elem) {
            return window.getComputedStyle(elem, null);
        };
        curCSS = function(elem, name, _computed) {
            var width, minWidth, maxWidth, computed = _computed || getStyles(elem), ret = computed ? computed.getPropertyValue(name) || computed[name] : undefined, style = elem.style;
            if (computed) {
                if ("" === ret && !jQuery.contains(elem.ownerDocument, elem)) ret = jQuery.style(elem, name);
                if (rnumnonpx.test(ret) && rmargin.test(name)) {
                    width = style.width;
                    minWidth = style.minWidth;
                    maxWidth = style.maxWidth;
                    style.minWidth = style.maxWidth = style.width = ret;
                    ret = computed.width;
                    style.width = width;
                    style.minWidth = minWidth;
                    style.maxWidth = maxWidth;
                }
            }
            return ret;
        };
    } else if (document.documentElement.currentStyle) {
        getStyles = function(elem) {
            return elem.currentStyle;
        };
        curCSS = function(elem, name, _computed) {
            var left, rs, rsLeft, computed = _computed || getStyles(elem), ret = computed ? computed[name] : undefined, style = elem.style;
            if (null == ret && style && style[name]) ret = style[name];
            if (rnumnonpx.test(ret) && !rposition.test(name)) {
                left = style.left;
                rs = elem.runtimeStyle;
                rsLeft = rs && rs.left;
                if (rsLeft) rs.left = elem.currentStyle.left;
                style.left = "fontSize" === name ? "1em" : ret;
                ret = style.pixelLeft + "px";
                style.left = left;
                if (rsLeft) rs.left = rsLeft;
            }
            return "" === ret ? "auto" : ret;
        };
    }
    function setPositiveNumber(elem, value, subtract) {
        var matches = rnumsplit.exec(value);
        return matches ? Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") : value;
    }
    function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
        var i = extra === (isBorderBox ? "border" : "content") ? 4 : "width" === name ? 1 : 0, val = 0;
        for (;i < 4; i += 2) {
            if ("margin" === extra) val += jQuery.css(elem, extra + cssExpand[i], true, styles);
            if (isBorderBox) {
                if ("content" === extra) val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                if ("margin" !== extra) val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
            } else {
                val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                if ("padding" !== extra) val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
            }
        }
        return val;
    }
    function getWidthOrHeight(elem, name, extra) {
        var valueIsBorderBox = true, val = "width" === name ? elem.offsetWidth : elem.offsetHeight, styles = getStyles(elem), isBorderBox = jQuery.support.boxSizing && "border-box" === jQuery.css(elem, "boxSizing", false, styles);
        if (val <= 0 || null == val) {
            val = curCSS(elem, name, styles);
            if (val < 0 || null == val) val = elem.style[name];
            if (rnumnonpx.test(val)) return val;
            valueIsBorderBox = isBorderBox && (jQuery.support.boxSizingReliable || val === elem.style[name]);
            val = parseFloat(val) || 0;
        }
        return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px";
    }
    function css_defaultDisplay(nodeName) {
        var doc = document, display = elemdisplay[nodeName];
        if (!display) {
            display = actualDisplay(nodeName, doc);
            if ("none" === display || !display) {
                iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>").css("cssText", "display:block !important")).appendTo(doc.documentElement);
                doc = (iframe[0].contentWindow || iframe[0].contentDocument).document;
                doc.write("<!doctype html><html><body>");
                doc.close();
                display = actualDisplay(nodeName, doc);
                iframe.detach();
            }
            elemdisplay[nodeName] = display;
        }
        return display;
    }
    function actualDisplay(name, doc) {
        var elem = jQuery(doc.createElement(name)).appendTo(doc.body), display = jQuery.css(elem[0], "display");
        elem.remove();
        return display;
    }
    jQuery.each([ "height", "width" ], function(i, name) {
        jQuery.cssHooks[name] = {
            get: function(elem, computed, extra) {
                if (computed) return 0 === elem.offsetWidth && rdisplayswap.test(jQuery.css(elem, "display")) ? jQuery.swap(elem, cssShow, function() {
                    return getWidthOrHeight(elem, name, extra);
                }) : getWidthOrHeight(elem, name, extra);
            },
            set: function(elem, value, extra) {
                var styles = extra && getStyles(elem);
                return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, jQuery.support.boxSizing && "border-box" === jQuery.css(elem, "boxSizing", false, styles), styles) : 0);
            }
        };
    });
    if (!jQuery.support.opacity) jQuery.cssHooks.opacity = {
        get: function(elem, computed) {
            return ropacity.test((computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "") ? .01 * parseFloat(RegExp.$1) + "" : computed ? "1" : "";
        },
        set: function(elem, value) {
            var style = elem.style, currentStyle = elem.currentStyle, opacity = jQuery.isNumeric(value) ? "alpha(opacity=" + 100 * value + ")" : "", filter = currentStyle && currentStyle.filter || style.filter || "";
            style.zoom = 1;
            if ((value >= 1 || "" === value) && "" === jQuery.trim(filter.replace(ralpha, "")) && style.removeAttribute) {
                style.removeAttribute("filter");
                if ("" === value || currentStyle && !currentStyle.filter) return;
            }
            style.filter = ralpha.test(filter) ? filter.replace(ralpha, opacity) : filter + " " + opacity;
        }
    };
    jQuery(function() {
        if (!jQuery.support.reliableMarginRight) jQuery.cssHooks.marginRight = {
            get: function(elem, computed) {
                if (computed) return jQuery.swap(elem, {
                    display: "inline-block"
                }, curCSS, [ elem, "marginRight" ]);
            }
        };
        if (!jQuery.support.pixelPosition && jQuery.fn.position) jQuery.each([ "top", "left" ], function(i, prop) {
            jQuery.cssHooks[prop] = {
                get: function(elem, computed) {
                    if (computed) {
                        computed = curCSS(elem, prop);
                        return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
                    }
                }
            };
        });
    });
    if (jQuery.expr && jQuery.expr.filters) {
        jQuery.expr.filters.hidden = function(elem) {
            return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 || !jQuery.support.reliableHiddenOffsets && "none" === (elem.style && elem.style.display || jQuery.css(elem, "display"));
        };
        jQuery.expr.filters.visible = function(elem) {
            return !jQuery.expr.filters.hidden(elem);
        };
    }
    jQuery.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function(prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
            expand: function(value) {
                var i = 0, expanded = {}, parts = "string" === typeof value ? value.split(" ") : [ value ];
                for (;i < 4; i++) expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
                return expanded;
            }
        };
        if (!rmargin.test(prefix)) jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
    });
    var r20 = /%20/g, rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
    jQuery.fn.extend({
        serialize: function() {
            return jQuery.param(this.serializeArray());
        },
        serializeArray: function() {
            return this.map(function() {
                var elements = jQuery.prop(this, "elements");
                return elements ? jQuery.makeArray(elements) : this;
            }).filter(function() {
                var type = this.type;
                return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !manipulation_rcheckableType.test(type));
            }).map(function(i, elem) {
                var val = jQuery(this).val();
                return null == val ? null : jQuery.isArray(val) ? jQuery.map(val, function(val) {
                    return {
                        name: elem.name,
                        value: val.replace(rCRLF, "\r\n")
                    };
                }) : {
                    name: elem.name,
                    value: val.replace(rCRLF, "\r\n")
                };
            }).get();
        }
    });
    jQuery.param = function(a, traditional) {
        var prefix, s = [], add = function(key, value) {
            value = jQuery.isFunction(value) ? value() : null == value ? "" : value;
            s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
        };
        if (traditional === undefined) traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
        if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) jQuery.each(a, function() {
            add(this.name, this.value);
        }); else for (prefix in a) buildParams(prefix, a[prefix], traditional, add);
        return s.join("&").replace(r20, "+");
    };
    function buildParams(prefix, obj, traditional, add) {
        var name;
        if (jQuery.isArray(obj)) jQuery.each(obj, function(i, v) {
            if (traditional || rbracket.test(prefix)) add(prefix, v); else buildParams(prefix + "[" + ("object" === typeof v ? i : "") + "]", v, traditional, add);
        }); else if (!traditional && "object" === jQuery.type(obj)) for (name in obj) buildParams(prefix + "[" + name + "]", obj[name], traditional, add); else add(prefix, obj);
    }
    jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup error contextmenu").split(" "), function(i, name) {
        jQuery.fn[name] = function(data, fn) {
            return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
        };
    });
    jQuery.fn.extend({
        hover: function(fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        },
        bind: function(types, data, fn) {
            return this.on(types, null, data, fn);
        },
        unbind: function(types, fn) {
            return this.off(types, null, fn);
        },
        delegate: function(selector, types, data, fn) {
            return this.on(types, selector, data, fn);
        },
        undelegate: function(selector, types, fn) {
            return 1 === arguments.length ? this.off(selector, "**") : this.off(types, selector || "**", fn);
        }
    });
    var ajaxLocParts, ajaxLocation, ajax_nonce = jQuery.now(), ajax_rquery = /\?/, rhash = /#.*$/, rts = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/gm, rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/, _load = jQuery.fn.load, prefilters = {}, transports = {}, allTypes = "*/".concat("*");
    try {
        ajaxLocation = location.href;
    } catch (e) {
        ajaxLocation = document.createElement("a");
        ajaxLocation.href = "";
        ajaxLocation = ajaxLocation.href;
    }
    ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];
    function addToPrefiltersOrTransports(structure) {
        return function(dataTypeExpression, func) {
            if ("string" !== typeof dataTypeExpression) {
                func = dataTypeExpression;
                dataTypeExpression = "*";
            }
            var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(core_rnotwhite) || [];
            if (jQuery.isFunction(func)) while (dataType = dataTypes[i++]) if ("+" === dataType[0]) {
                dataType = dataType.slice(1) || "*";
                (structure[dataType] = structure[dataType] || []).unshift(func);
            } else (structure[dataType] = structure[dataType] || []).push(func);
        };
    }
    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        var inspected = {}, seekingTransport = structure === transports;
        function inspect(dataType) {
            var selected;
            inspected[dataType] = true;
            jQuery.each(structure[dataType] || [], function(_, prefilterOrFactory) {
                var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
                if ("string" === typeof dataTypeOrTransport && !seekingTransport && !inspected[dataTypeOrTransport]) {
                    options.dataTypes.unshift(dataTypeOrTransport);
                    inspect(dataTypeOrTransport);
                    return false;
                } else if (seekingTransport) return !(selected = dataTypeOrTransport);
            });
            return selected;
        }
        return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
    }
    function ajaxExtend(target, src) {
        var deep, key, flatOptions = jQuery.ajaxSettings.flatOptions || {};
        for (key in src) if (src[key] !== undefined) (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
        if (deep) jQuery.extend(true, target, deep);
        return target;
    }
    jQuery.fn.load = function(url, params, callback) {
        if ("string" !== typeof url && _load) return _load.apply(this, arguments);
        var selector, response, type, self = this, off = url.indexOf(" ");
        if (off >= 0) {
            selector = url.slice(off, url.length);
            url = url.slice(0, off);
        }
        if (jQuery.isFunction(params)) {
            callback = params;
            params = undefined;
        } else if (params && "object" === typeof params) type = "POST";
        if (self.length > 0) jQuery.ajax({
            url: url,
            type: type,
            dataType: "html",
            data: params
        }).done(function(responseText) {
            response = arguments;
            self.html(selector ? jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : responseText);
        }).complete(callback && function(jqXHR, status) {
            self.each(callback, response || [ jqXHR.responseText, status, jqXHR ]);
        });
        return this;
    };
    jQuery.each([ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function(i, type) {
        jQuery.fn[type] = function(fn) {
            return this.on(type, fn);
        };
    });
    jQuery.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: ajaxLocation,
            type: "GET",
            isLocal: rlocalProtocol.test(ajaxLocParts[1]),
            global: true,
            processData: true,
            async: true,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            accepts: {
                "*": allTypes,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
            contents: {
                xml: /xml/,
                html: /html/,
                json: /json/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },
            converters: {
                "* text": String,
                "text html": true,
                "text json": jQuery.parseJSON,
                "text xml": jQuery.parseXML
            },
            flatOptions: {
                url: true,
                context: true
            }
        },
        ajaxSetup: function(target, settings) {
            return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target);
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        ajax: function(url, options) {
            if ("object" === typeof url) {
                options = url;
                url = undefined;
            }
            options = options || {};
            var parts, i, cacheURL, responseHeadersString, timeoutTimer, fireGlobals, transport, responseHeaders, s = jQuery.ajaxSetup({}, options), callbackContext = s.context || s, globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event, deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks("once memory"), statusCode = s.statusCode || {}, requestHeaders = {}, requestHeadersNames = {}, state = 0, strAbort = "canceled", jqXHR = {
                readyState: 0,
                getResponseHeader: function(key) {
                    var match;
                    if (2 === state) {
                        if (!responseHeaders) {
                            responseHeaders = {};
                            while (match = rheaders.exec(responseHeadersString)) responseHeaders[match[1].toLowerCase()] = match[2];
                        }
                        match = responseHeaders[key.toLowerCase()];
                    }
                    return null == match ? null : match;
                },
                getAllResponseHeaders: function() {
                    return 2 === state ? responseHeadersString : null;
                },
                setRequestHeader: function(name, value) {
                    var lname = name.toLowerCase();
                    if (!state) {
                        name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
                        requestHeaders[name] = value;
                    }
                    return this;
                },
                overrideMimeType: function(type) {
                    if (!state) s.mimeType = type;
                    return this;
                },
                statusCode: function(map) {
                    var code;
                    if (map) if (state < 2) for (code in map) statusCode[code] = [ statusCode[code], map[code] ]; else jqXHR.always(map[jqXHR.status]);
                    return this;
                },
                abort: function(statusText) {
                    var finalText = statusText || strAbort;
                    if (transport) transport.abort(finalText);
                    done(0, finalText);
                    return this;
                }
            };
            deferred.promise(jqXHR).complete = completeDeferred.add;
            jqXHR.success = jqXHR.done;
            jqXHR.error = jqXHR.fail;
            s.url = ((url || s.url || ajaxLocation) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");
            s.type = options.method || options.type || s.method || s.type;
            s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(core_rnotwhite) || [ "" ];
            if (null == s.crossDomain) {
                parts = rurl.exec(s.url.toLowerCase());
                s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || ("http:" === parts[1] ? "80" : "443")) !== (ajaxLocParts[3] || ("http:" === ajaxLocParts[1] ? "80" : "443"))));
            }
            if (s.data && s.processData && "string" !== typeof s.data) s.data = jQuery.param(s.data, s.traditional);
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
            if (2 === state) return jqXHR;
            fireGlobals = s.global;
            if (fireGlobals && 0 === jQuery.active++) jQuery.event.trigger("ajaxStart");
            s.type = s.type.toUpperCase();
            s.hasContent = !rnoContent.test(s.type);
            cacheURL = s.url;
            if (!s.hasContent) {
                if (s.data) {
                    cacheURL = s.url += (ajax_rquery.test(cacheURL) ? "&" : "?") + s.data;
                    delete s.data;
                }
                if (false === s.cache) s.url = rts.test(cacheURL) ? cacheURL.replace(rts, "$1_=" + ajax_nonce++) : cacheURL + (ajax_rquery.test(cacheURL) ? "&" : "?") + "_=" + ajax_nonce++;
            }
            if (s.ifModified) {
                if (jQuery.lastModified[cacheURL]) jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
                if (jQuery.etag[cacheURL]) jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
            }
            if (s.data && s.hasContent && false !== s.contentType || options.contentType) jqXHR.setRequestHeader("Content-Type", s.contentType);
            jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + ("*" !== s.dataTypes[0] ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);
            for (i in s.headers) jqXHR.setRequestHeader(i, s.headers[i]);
            if (s.beforeSend && (false === s.beforeSend.call(callbackContext, jqXHR, s) || 2 === state)) return jqXHR.abort();
            strAbort = "abort";
            for (i in {
                success: 1,
                error: 1,
                complete: 1
            }) jqXHR[i](s[i]);
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
            if (!transport) done(-1, "No Transport"); else {
                jqXHR.readyState = 1;
                if (fireGlobals) globalEventContext.trigger("ajaxSend", [ jqXHR, s ]);
                if (s.async && s.timeout > 0) timeoutTimer = setTimeout(function() {
                    jqXHR.abort("timeout");
                }, s.timeout);
                try {
                    state = 1;
                    transport.send(requestHeaders, done);
                } catch (e) {
                    if (state < 2) done(-1, e); else throw e;
                }
            }
            function done(status, nativeStatusText, responses, headers) {
                var isSuccess, success, error, response, modified, statusText = nativeStatusText;
                if (2 === state) return;
                state = 2;
                if (timeoutTimer) clearTimeout(timeoutTimer);
                transport = undefined;
                responseHeadersString = headers || "";
                jqXHR.readyState = status > 0 ? 4 : 0;
                isSuccess = status >= 200 && status < 300 || 304 === status;
                if (responses) response = ajaxHandleResponses(s, jqXHR, responses);
                response = ajaxConvert(s, response, jqXHR, isSuccess);
                if (isSuccess) {
                    if (s.ifModified) {
                        modified = jqXHR.getResponseHeader("Last-Modified");
                        if (modified) jQuery.lastModified[cacheURL] = modified;
                        modified = jqXHR.getResponseHeader("etag");
                        if (modified) jQuery.etag[cacheURL] = modified;
                    }
                    if (204 === status || "HEAD" === s.type) statusText = "nocontent"; else if (304 === status) statusText = "notmodified"; else {
                        statusText = response.state;
                        success = response.data;
                        error = response.error;
                        isSuccess = !error;
                    }
                } else {
                    error = statusText;
                    if (status || !statusText) {
                        statusText = "error";
                        if (status < 0) status = 0;
                    }
                }
                jqXHR.status = status;
                jqXHR.statusText = (nativeStatusText || statusText) + "";
                if (isSuccess) deferred.resolveWith(callbackContext, [ success, statusText, jqXHR ]); else deferred.rejectWith(callbackContext, [ jqXHR, statusText, error ]);
                jqXHR.statusCode(statusCode);
                statusCode = undefined;
                if (fireGlobals) globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [ jqXHR, s, isSuccess ? success : error ]);
                completeDeferred.fireWith(callbackContext, [ jqXHR, statusText ]);
                if (fireGlobals) {
                    globalEventContext.trigger("ajaxComplete", [ jqXHR, s ]);
                    if (!--jQuery.active) jQuery.event.trigger("ajaxStop");
                }
            }
            return jqXHR;
        },
        getJSON: function(url, data, callback) {
            return jQuery.get(url, data, callback, "json");
        },
        getScript: function(url, callback) {
            return jQuery.get(url, undefined, callback, "script");
        }
    });
    jQuery.each([ "get", "post" ], function(i, method) {
        jQuery[method] = function(url, data, callback, type) {
            if (jQuery.isFunction(data)) {
                type = type || callback;
                callback = data;
                data = undefined;
            }
            return jQuery.ajax({
                url: url,
                type: method,
                dataType: type,
                data: data,
                success: callback
            });
        };
    });
    function ajaxHandleResponses(s, jqXHR, responses) {
        var firstDataType, ct, finalDataType, type, contents = s.contents, dataTypes = s.dataTypes;
        while ("*" === dataTypes[0]) {
            dataTypes.shift();
            if (ct === undefined) ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
        }
        if (ct) for (type in contents) if (contents[type] && contents[type].test(ct)) {
            dataTypes.unshift(type);
            break;
        }
        if (dataTypes[0] in responses) finalDataType = dataTypes[0]; else {
            for (type in responses) {
                if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                    finalDataType = type;
                    break;
                }
                if (!firstDataType) firstDataType = type;
            }
            finalDataType = finalDataType || firstDataType;
        }
        if (finalDataType) {
            if (finalDataType !== dataTypes[0]) dataTypes.unshift(finalDataType);
            return responses[finalDataType];
        }
    }
    function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2, current, conv, tmp, prev, converters = {}, dataTypes = s.dataTypes.slice();
        if (dataTypes[1]) for (conv in s.converters) converters[conv.toLowerCase()] = s.converters[conv];
        current = dataTypes.shift();
        while (current) {
            if (s.responseFields[current]) jqXHR[s.responseFields[current]] = response;
            if (!prev && isSuccess && s.dataFilter) response = s.dataFilter(response, s.dataType);
            prev = current;
            current = dataTypes.shift();
            if (current) if ("*" === current) current = prev; else if ("*" !== prev && prev !== current) {
                conv = converters[prev + " " + current] || converters["* " + current];
                if (!conv) for (conv2 in converters) {
                    tmp = conv2.split(" ");
                    if (tmp[1] === current) {
                        conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                        if (conv) {
                            if (true === conv) conv = converters[conv2]; else if (true !== converters[conv2]) {
                                current = tmp[0];
                                dataTypes.unshift(tmp[1]);
                            }
                            break;
                        }
                    }
                }
                if (true !== conv) if (conv && s["throws"]) response = conv(response); else try {
                    response = conv(response);
                } catch (e) {
                    return {
                        state: "parsererror",
                        error: conv ? e : "No conversion from " + prev + " to " + current
                    };
                }
            }
        }
        return {
            state: "success",
            data: response
        };
    }
    jQuery.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /(?:java|ecma)script/
        },
        converters: {
            "text script": function(text) {
                jQuery.globalEval(text);
                return text;
            }
        }
    });
    jQuery.ajaxPrefilter("script", function(s) {
        if (s.cache === undefined) s.cache = false;
        if (s.crossDomain) {
            s.type = "GET";
            s.global = false;
        }
    });
    jQuery.ajaxTransport("script", function(s) {
        if (s.crossDomain) {
            var script, head = document.head || jQuery("head")[0] || document.documentElement;
            return {
                send: function(_, callback) {
                    script = document.createElement("script");
                    script.async = true;
                    if (s.scriptCharset) script.charset = s.scriptCharset;
                    script.src = s.url;
                    script.onload = script.onreadystatechange = function(_, isAbort) {
                        if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {
                            script.onload = script.onreadystatechange = null;
                            if (script.parentNode) script.parentNode.removeChild(script);
                            script = null;
                            if (!isAbort) callback(200, "success");
                        }
                    };
                    head.insertBefore(script, head.firstChild);
                },
                abort: function() {
                    if (script) script.onload(undefined, true);
                }
            };
        }
    });
    var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
    jQuery.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
            var callback = oldCallbacks.pop() || jQuery.expando + "_" + ajax_nonce++;
            this[callback] = true;
            return callback;
        }
    });
    jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {
        var callbackName, overwritten, responseContainer, jsonProp = false !== s.jsonp && (rjsonp.test(s.url) ? "url" : "string" === typeof s.data && !(s.contentType || "").indexOf("application/x-www-form-urlencoded") && rjsonp.test(s.data) && "data");
        if (jsonProp || "jsonp" === s.dataTypes[0]) {
            callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
            if (jsonProp) s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName); else if (false !== s.jsonp) s.url += (ajax_rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
            s.converters["script json"] = function() {
                if (!responseContainer) jQuery.error(callbackName + " was not called");
                return responseContainer[0];
            };
            s.dataTypes[0] = "json";
            overwritten = window[callbackName];
            window[callbackName] = function() {
                responseContainer = arguments;
            };
            jqXHR.always(function() {
                window[callbackName] = overwritten;
                if (s[callbackName]) {
                    s.jsonpCallback = originalSettings.jsonpCallback;
                    oldCallbacks.push(callbackName);
                }
                if (responseContainer && jQuery.isFunction(overwritten)) overwritten(responseContainer[0]);
                responseContainer = overwritten = undefined;
            });
            return "script";
        }
    });
    var xhrCallbacks, xhrSupported, xhrId = 0, xhrOnUnloadAbort = window.ActiveXObject && function() {
        var key;
        for (key in xhrCallbacks) xhrCallbacks[key](undefined, true);
    };
    function createStandardXHR() {
        try {
            return new window.XMLHttpRequest();
        } catch (e) {}
    }
    function createActiveXHR() {
        try {
            return new window.ActiveXObject("Microsoft.XMLHTTP");
        } catch (e) {}
    }
    jQuery.ajaxSettings.xhr = window.ActiveXObject ? function() {
        return !this.isLocal && createStandardXHR() || createActiveXHR();
    } : createStandardXHR;
    xhrSupported = jQuery.ajaxSettings.xhr();
    jQuery.support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
    xhrSupported = jQuery.support.ajax = !!xhrSupported;
    if (xhrSupported) jQuery.ajaxTransport(function(s) {
        if (!s.crossDomain || jQuery.support.cors) {
            var callback;
            return {
                send: function(headers, complete) {
                    var handle, i, xhr = s.xhr();
                    if (s.username) xhr.open(s.type, s.url, s.async, s.username, s.password); else xhr.open(s.type, s.url, s.async);
                    if (s.xhrFields) for (i in s.xhrFields) xhr[i] = s.xhrFields[i];
                    if (s.mimeType && xhr.overrideMimeType) xhr.overrideMimeType(s.mimeType);
                    if (!s.crossDomain && !headers["X-Requested-With"]) headers["X-Requested-With"] = "XMLHttpRequest";
                    try {
                        for (i in headers) xhr.setRequestHeader(i, headers[i]);
                    } catch (err) {}
                    xhr.send(s.hasContent && s.data || null);
                    callback = function(_, isAbort) {
                        var status, responseHeaders, statusText, responses;
                        try {
                            if (callback && (isAbort || 4 === xhr.readyState)) {
                                callback = undefined;
                                if (handle) {
                                    xhr.onreadystatechange = jQuery.noop;
                                    if (xhrOnUnloadAbort) delete xhrCallbacks[handle];
                                }
                                if (isAbort) {
                                    if (4 !== xhr.readyState) xhr.abort();
                                } else {
                                    responses = {};
                                    status = xhr.status;
                                    responseHeaders = xhr.getAllResponseHeaders();
                                    if ("string" === typeof xhr.responseText) responses.text = xhr.responseText;
                                    try {
                                        statusText = xhr.statusText;
                                    } catch (e) {
                                        statusText = "";
                                    }
                                    if (!status && s.isLocal && !s.crossDomain) status = responses.text ? 200 : 404; else if (1223 === status) status = 204;
                                }
                            }
                        } catch (firefoxAccessException) {
                            if (!isAbort) complete(-1, firefoxAccessException);
                        }
                        if (responses) complete(status, statusText, responses, responseHeaders);
                    };
                    if (!s.async) callback(); else if (4 === xhr.readyState) setTimeout(callback); else {
                        handle = ++xhrId;
                        if (xhrOnUnloadAbort) {
                            if (!xhrCallbacks) {
                                xhrCallbacks = {};
                                jQuery(window).unload(xhrOnUnloadAbort);
                            }
                            xhrCallbacks[handle] = callback;
                        }
                        xhr.onreadystatechange = callback;
                    }
                },
                abort: function() {
                    if (callback) callback(undefined, true);
                }
            };
        }
    });
    var fxNow, timerId, rfxtypes = /^(?:toggle|show|hide)$/, rfxnum = new RegExp("^(?:([+-])=|)(" + core_pnum + ")([a-z%]*)$", "i"), rrun = /queueHooks$/, animationPrefilters = [ defaultPrefilter ], tweeners = {
        "*": [ function(prop, value) {
            var tween = this.createTween(prop, value), target = tween.cur(), parts = rfxnum.exec(value), unit = parts && parts[3] || (jQuery.cssNumber[prop] ? "" : "px"), start = (jQuery.cssNumber[prop] || "px" !== unit && +target) && rfxnum.exec(jQuery.css(tween.elem, prop)), scale = 1, maxIterations = 20;
            if (start && start[3] !== unit) {
                unit = unit || start[3];
                parts = parts || [];
                start = +target || 1;
                do {
                    scale = scale || ".5";
                    start /= scale;
                    jQuery.style(tween.elem, prop, start + unit);
                } while (scale !== (scale = tween.cur() / target) && 1 !== scale && --maxIterations);
            }
            if (parts) {
                start = tween.start = +start || +target || 0;
                tween.unit = unit;
                tween.end = parts[1] ? start + (parts[1] + 1) * parts[2] : +parts[2];
            }
            return tween;
        } ]
    };
    function createFxNow() {
        setTimeout(function() {
            fxNow = undefined;
        });
        return fxNow = jQuery.now();
    }
    function createTween(value, prop, animation) {
        var tween, collection = (tweeners[prop] || []).concat(tweeners["*"]), index = 0, length = collection.length;
        for (;index < length; index++) if (tween = collection[index].call(animation, prop, value)) return tween;
    }
    function Animation(elem, properties, options) {
        var result, stopped, index = 0, length = animationPrefilters.length, deferred = jQuery.Deferred().always(function() {
            delete tick.elem;
        }), tick = function() {
            if (stopped) return false;
            var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime), temp = remaining / animation.duration || 0, percent = 1 - temp, index = 0, length = animation.tweens.length;
            for (;index < length; index++) animation.tweens[index].run(percent);
            deferred.notifyWith(elem, [ animation, percent, remaining ]);
            if (percent < 1 && length) return remaining; else {
                deferred.resolveWith(elem, [ animation ]);
                return false;
            }
        }, animation = deferred.promise({
            elem: elem,
            props: jQuery.extend({}, properties),
            opts: jQuery.extend(true, {
                specialEasing: {}
            }, options),
            originalProperties: properties,
            originalOptions: options,
            startTime: fxNow || createFxNow(),
            duration: options.duration,
            tweens: [],
            createTween: function(prop, end) {
                var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
                animation.tweens.push(tween);
                return tween;
            },
            stop: function(gotoEnd) {
                var index = 0, length = gotoEnd ? animation.tweens.length : 0;
                if (stopped) return this;
                stopped = true;
                for (;index < length; index++) animation.tweens[index].run(1);
                if (gotoEnd) deferred.resolveWith(elem, [ animation, gotoEnd ]); else deferred.rejectWith(elem, [ animation, gotoEnd ]);
                return this;
            }
        }), props = animation.props;
        propFilter(props, animation.opts.specialEasing);
        for (;index < length; index++) {
            result = animationPrefilters[index].call(animation, elem, props, animation.opts);
            if (result) return result;
        }
        jQuery.map(props, createTween, animation);
        if (jQuery.isFunction(animation.opts.start)) animation.opts.start.call(elem, animation);
        jQuery.fx.timer(jQuery.extend(tick, {
            elem: elem,
            anim: animation,
            queue: animation.opts.queue
        }));
        return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
    }
    function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks;
        for (index in props) {
            name = jQuery.camelCase(index);
            easing = specialEasing[name];
            value = props[index];
            if (jQuery.isArray(value)) {
                easing = value[1];
                value = props[index] = value[0];
            }
            if (index !== name) {
                props[name] = value;
                delete props[index];
            }
            hooks = jQuery.cssHooks[name];
            if (hooks && "expand" in hooks) {
                value = hooks.expand(value);
                delete props[name];
                for (index in value) if (!(index in props)) {
                    props[index] = value[index];
                    specialEasing[index] = easing;
                }
            } else specialEasing[name] = easing;
        }
    }
    jQuery.Animation = jQuery.extend(Animation, {
        tweener: function(props, callback) {
            if (jQuery.isFunction(props)) {
                callback = props;
                props = [ "*" ];
            } else props = props.split(" ");
            var prop, index = 0, length = props.length;
            for (;index < length; index++) {
                prop = props[index];
                tweeners[prop] = tweeners[prop] || [];
                tweeners[prop].unshift(callback);
            }
        },
        prefilter: function(callback, prepend) {
            if (prepend) animationPrefilters.unshift(callback); else animationPrefilters.push(callback);
        }
    });
    function defaultPrefilter(elem, props, opts) {
        var prop, value, toggle, tween, hooks, oldfire, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHidden(elem), dataShow = jQuery._data(elem, "fxshow");
        if (!opts.queue) {
            hooks = jQuery._queueHooks(elem, "fx");
            if (null == hooks.unqueued) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;
                hooks.empty.fire = function() {
                    if (!hooks.unqueued) oldfire();
                };
            }
            hooks.unqueued++;
            anim.always(function() {
                anim.always(function() {
                    hooks.unqueued--;
                    if (!jQuery.queue(elem, "fx").length) hooks.empty.fire();
                });
            });
        }
        if (1 === elem.nodeType && ("height" in props || "width" in props)) {
            opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];
            if ("inline" === jQuery.css(elem, "display") && "none" === jQuery.css(elem, "float")) if (!jQuery.support.inlineBlockNeedsLayout || "inline" === css_defaultDisplay(elem.nodeName)) style.display = "inline-block"; else style.zoom = 1;
        }
        if (opts.overflow) {
            style.overflow = "hidden";
            if (!jQuery.support.shrinkWrapBlocks) anim.always(function() {
                style.overflow = opts.overflow[0];
                style.overflowX = opts.overflow[1];
                style.overflowY = opts.overflow[2];
            });
        }
        for (prop in props) {
            value = props[prop];
            if (rfxtypes.exec(value)) {
                delete props[prop];
                toggle = toggle || "toggle" === value;
                if (value === (hidden ? "hide" : "show")) continue;
                orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
            }
        }
        if (!jQuery.isEmptyObject(orig)) {
            if (dataShow) {
                if ("hidden" in dataShow) hidden = dataShow.hidden;
            } else dataShow = jQuery._data(elem, "fxshow", {});
            if (toggle) dataShow.hidden = !hidden;
            if (hidden) jQuery(elem).show(); else anim.done(function() {
                jQuery(elem).hide();
            });
            anim.done(function() {
                var prop;
                jQuery._removeData(elem, "fxshow");
                for (prop in orig) jQuery.style(elem, prop, orig[prop]);
            });
            for (prop in orig) {
                tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
                if (!(prop in dataShow)) {
                    dataShow[prop] = tween.start;
                    if (hidden) {
                        tween.end = tween.start;
                        tween.start = "width" === prop || "height" === prop ? 1 : 0;
                    }
                }
            }
        }
    }
    function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing);
    }
    jQuery.Tween = Tween;
    Tween.prototype = {
        constructor: Tween,
        init: function(elem, options, prop, end, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || "swing";
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
        },
        cur: function() {
            var hooks = Tween.propHooks[this.prop];
            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
        },
        run: function(percent) {
            var eased, hooks = Tween.propHooks[this.prop];
            if (this.options.duration) this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration); else this.pos = eased = percent;
            this.now = (this.end - this.start) * eased + this.start;
            if (this.options.step) this.options.step.call(this.elem, this.now, this);
            if (hooks && hooks.set) hooks.set(this); else Tween.propHooks._default.set(this);
            return this;
        }
    };
    Tween.prototype.init.prototype = Tween.prototype;
    Tween.propHooks = {
        _default: {
            get: function(tween) {
                var result;
                if (null != tween.elem[tween.prop] && (!tween.elem.style || null == tween.elem.style[tween.prop])) return tween.elem[tween.prop];
                result = jQuery.css(tween.elem, tween.prop, "");
                return !result || "auto" === result ? 0 : result;
            },
            set: function(tween) {
                if (jQuery.fx.step[tween.prop]) jQuery.fx.step[tween.prop](tween); else if (tween.elem.style && (null != tween.elem.style[jQuery.cssProps[tween.prop]] || jQuery.cssHooks[tween.prop])) jQuery.style(tween.elem, tween.prop, tween.now + tween.unit); else tween.elem[tween.prop] = tween.now;
            }
        }
    };
    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function(tween) {
            if (tween.elem.nodeType && tween.elem.parentNode) tween.elem[tween.prop] = tween.now;
        }
    };
    jQuery.each([ "toggle", "show", "hide" ], function(i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function(speed, easing, callback) {
            return null == speed || "boolean" === typeof speed ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
        };
    });
    jQuery.fn.extend({
        fadeTo: function(speed, to, easing, callback) {
            return this.filter(isHidden).css("opacity", 0).show().end().animate({
                opacity: to
            }, speed, easing, callback);
        },
        animate: function(prop, speed, easing, callback) {
            var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function() {
                var anim = Animation(this, jQuery.extend({}, prop), optall);
                if (empty || jQuery._data(this, "finish")) anim.stop(true);
            };
            doAnimation.finish = doAnimation;
            return empty || false === optall.queue ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
        },
        stop: function(type, clearQueue, gotoEnd) {
            var stopQueue = function(hooks) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop(gotoEnd);
            };
            if ("string" !== typeof type) {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = undefined;
            }
            if (clearQueue && false !== type) this.queue(type || "fx", []);
            return this.each(function() {
                var dequeue = true, index = null != type && type + "queueHooks", timers = jQuery.timers, data = jQuery._data(this);
                if (index) {
                    if (data[index] && data[index].stop) stopQueue(data[index]);
                } else for (index in data) if (data[index] && data[index].stop && rrun.test(index)) stopQueue(data[index]);
                for (index = timers.length; index--; ) if (timers[index].elem === this && (null == type || timers[index].queue === type)) {
                    timers[index].anim.stop(gotoEnd);
                    dequeue = false;
                    timers.splice(index, 1);
                }
                if (dequeue || !gotoEnd) jQuery.dequeue(this, type);
            });
        },
        finish: function(type) {
            if (false !== type) type = type || "fx";
            return this.each(function() {
                var index, data = jQuery._data(this), queue = data[type + "queue"], hooks = data[type + "queueHooks"], timers = jQuery.timers, length = queue ? queue.length : 0;
                data.finish = true;
                jQuery.queue(this, type, []);
                if (hooks && hooks.stop) hooks.stop.call(this, true);
                for (index = timers.length; index--; ) if (timers[index].elem === this && timers[index].queue === type) {
                    timers[index].anim.stop(true);
                    timers.splice(index, 1);
                }
                for (index = 0; index < length; index++) if (queue[index] && queue[index].finish) queue[index].finish.call(this);
                delete data.finish;
            });
        }
    });
    function genFx(type, includeWidth) {
        var which, attrs = {
            height: type
        }, i = 0;
        includeWidth = includeWidth ? 1 : 0;
        for (;i < 4; i += 2 - includeWidth) {
            which = cssExpand[i];
            attrs["margin" + which] = attrs["padding" + which] = type;
        }
        if (includeWidth) attrs.opacity = attrs.width = type;
        return attrs;
    }
    jQuery.each({
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, function(name, props) {
        jQuery.fn[name] = function(speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
        };
    });
    jQuery.speed = function(speed, easing, fn) {
        var opt = speed && "object" === typeof speed ? jQuery.extend({}, speed) : {
            complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
            duration: speed,
            easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
        };
        opt.duration = jQuery.fx.off ? 0 : "number" === typeof opt.duration ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
        if (null == opt.queue || true === opt.queue) opt.queue = "fx";
        opt.old = opt.complete;
        opt.complete = function() {
            if (jQuery.isFunction(opt.old)) opt.old.call(this);
            if (opt.queue) jQuery.dequeue(this, opt.queue);
        };
        return opt;
    };
    jQuery.easing = {
        linear: function(p) {
            return p;
        },
        swing: function(p) {
            return .5 - Math.cos(p * Math.PI) / 2;
        }
    };
    jQuery.timers = [];
    jQuery.fx = Tween.prototype.init;
    jQuery.fx.tick = function() {
        var timer, timers = jQuery.timers, i = 0;
        fxNow = jQuery.now();
        for (;i < timers.length; i++) {
            timer = timers[i];
            if (!timer() && timers[i] === timer) timers.splice(i--, 1);
        }
        if (!timers.length) jQuery.fx.stop();
        fxNow = undefined;
    };
    jQuery.fx.timer = function(timer) {
        if (timer() && jQuery.timers.push(timer)) jQuery.fx.start();
    };
    jQuery.fx.interval = 13;
    jQuery.fx.start = function() {
        if (!timerId) timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);
    };
    jQuery.fx.stop = function() {
        clearInterval(timerId);
        timerId = null;
    };
    jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
    };
    jQuery.fx.step = {};
    if (jQuery.expr && jQuery.expr.filters) jQuery.expr.filters.animated = function(elem) {
        return jQuery.grep(jQuery.timers, function(fn) {
            return elem === fn.elem;
        }).length;
    };
    jQuery.fn.offset = function(options) {
        if (arguments.length) return options === undefined ? this : this.each(function(i) {
            jQuery.offset.setOffset(this, options, i);
        });
        var docElem, win, box = {
            top: 0,
            left: 0
        }, elem = this[0], doc = elem && elem.ownerDocument;
        if (!doc) return;
        docElem = doc.documentElement;
        if (!jQuery.contains(docElem, elem)) return box;
        if (typeof elem.getBoundingClientRect !== core_strundefined) box = elem.getBoundingClientRect();
        win = getWindow(doc);
        return {
            top: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),
            left: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)
        };
    };
    jQuery.offset = {
        setOffset: function(elem, options, i) {
            var position = jQuery.css(elem, "position");
            if ("static" === position) elem.style.position = "relative";
            var curElem = jQuery(elem), curOffset = curElem.offset(), curCSSTop = jQuery.css(elem, "top"), curCSSLeft = jQuery.css(elem, "left"), calculatePosition = ("absolute" === position || "fixed" === position) && jQuery.inArray("auto", [ curCSSTop, curCSSLeft ]) > -1, props = {}, curPosition = {}, curTop, curLeft;
            if (calculatePosition) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;
            } else {
                curTop = parseFloat(curCSSTop) || 0;
                curLeft = parseFloat(curCSSLeft) || 0;
            }
            if (jQuery.isFunction(options)) options = options.call(elem, i, curOffset);
            if (null != options.top) props.top = options.top - curOffset.top + curTop;
            if (null != options.left) props.left = options.left - curOffset.left + curLeft;
            if ("using" in options) options.using.call(elem, props); else curElem.css(props);
        }
    };
    jQuery.fn.extend({
        position: function() {
            if (!this[0]) return;
            var offsetParent, offset, parentOffset = {
                top: 0,
                left: 0
            }, elem = this[0];
            if ("fixed" === jQuery.css(elem, "position")) offset = elem.getBoundingClientRect(); else {
                offsetParent = this.offsetParent();
                offset = this.offset();
                if (!jQuery.nodeName(offsetParent[0], "html")) parentOffset = offsetParent.offset();
                parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true);
                parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true);
            }
            return {
                top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
                left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
            };
        },
        offsetParent: function() {
            return this.map(function() {
                var offsetParent = this.offsetParent || docElem;
                while (offsetParent && !jQuery.nodeName(offsetParent, "html") && "static" === jQuery.css(offsetParent, "position")) offsetParent = offsetParent.offsetParent;
                return offsetParent || docElem;
            });
        }
    });
    jQuery.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function(method, prop) {
        var top = /Y/.test(prop);
        jQuery.fn[method] = function(val) {
            return jQuery.access(this, function(elem, method, val) {
                var win = getWindow(elem);
                if (val === undefined) return win ? prop in win ? win[prop] : win.document.documentElement[method] : elem[method];
                if (win) win.scrollTo(!top ? val : jQuery(win).scrollLeft(), top ? val : jQuery(win).scrollTop()); else elem[method] = val;
            }, method, val, arguments.length, null);
        };
    });
    function getWindow(elem) {
        return jQuery.isWindow(elem) ? elem : 9 === elem.nodeType ? elem.defaultView || elem.parentWindow : false;
    }
    jQuery.each({
        Height: "height",
        Width: "width"
    }, function(name, type) {
        jQuery.each({
            padding: "inner" + name,
            content: type,
            "": "outer" + name
        }, function(defaultExtra, funcName) {
            jQuery.fn[funcName] = function(margin, value) {
                var chainable = arguments.length && (defaultExtra || "boolean" !== typeof margin), extra = defaultExtra || (true === margin || true === value ? "margin" : "border");
                return jQuery.access(this, function(elem, type, value) {
                    var doc;
                    if (jQuery.isWindow(elem)) return elem.document.documentElement["client" + name];
                    if (9 === elem.nodeType) {
                        doc = elem.documentElement;
                        return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
                    }
                    return value === undefined ? jQuery.css(elem, type, extra) : jQuery.style(elem, type, value, extra);
                }, type, chainable ? margin : undefined, chainable, null);
            };
        });
    });
    jQuery.fn.size = function() {
        return this.length;
    };
    jQuery.fn.andSelf = jQuery.fn.addBack;
    if ("object" === typeof module && module && "object" === typeof module.exports) module.exports = jQuery; else {
        window.jQuery = window.$ = jQuery;
        if ("function" === typeof define && define.amd) define("jquery", [], function() {
            return jQuery;
        });
    }
})(window);

(function(jQuery, window, undefined) {
    var warnedAbout = {};
    jQuery.migrateWarnings = [];
    if (!jQuery.migrateMute && window.console && window.console.log) window.console.log("JQMIGRATE: Logging is active");
    if (jQuery.migrateTrace === undefined) jQuery.migrateTrace = true;
    jQuery.migrateReset = function() {
        warnedAbout = {};
        jQuery.migrateWarnings.length = 0;
    };
    function migrateWarn(msg) {
        var console = window.console;
        if (!warnedAbout[msg]) {
            warnedAbout[msg] = true;
            jQuery.migrateWarnings.push(msg);
            if (console && console.warn && !jQuery.migrateMute) {
                console.warn("JQMIGRATE: " + msg);
                if (jQuery.migrateTrace && console.trace) console.trace();
            }
        }
    }
    function migrateWarnProp(obj, prop, value, msg) {
        if (Object.defineProperty) try {
            Object.defineProperty(obj, prop, {
                configurable: true,
                enumerable: true,
                get: function() {
                    migrateWarn(msg);
                    return value;
                },
                set: function(newValue) {
                    migrateWarn(msg);
                    value = newValue;
                }
            });
            return;
        } catch (err) {}
        jQuery._definePropertyBroken = true;
        obj[prop] = value;
    }
    if ("BackCompat" === document.compatMode) migrateWarn("jQuery is not compatible with Quirks Mode");
    var attrFn = jQuery("<input/>", {
        size: 1
    }).attr("size") && jQuery.attrFn, oldAttr = jQuery.attr, valueAttrGet = jQuery.attrHooks.value && jQuery.attrHooks.value.get || function() {
        return null;
    }, valueAttrSet = jQuery.attrHooks.value && jQuery.attrHooks.value.set || function() {
        return undefined;
    }, rnoType = /^(?:input|button)$/i, rnoAttrNodeType = /^[238]$/, rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i, ruseDefault = /^(?:checked|selected)$/i;
    migrateWarnProp(jQuery, "attrFn", attrFn || {}, "jQuery.attrFn is deprecated");
    jQuery.attr = function(elem, name, value, pass) {
        var lowerName = name.toLowerCase(), nType = elem && elem.nodeType;
        if (pass) {
            if (oldAttr.length < 4) migrateWarn("jQuery.fn.attr( props, pass ) is deprecated");
            if (elem && !rnoAttrNodeType.test(nType) && (attrFn ? name in attrFn : jQuery.isFunction(jQuery.fn[name]))) return jQuery(elem)[name](value);
        }
        if ("type" === name && value !== undefined && rnoType.test(elem.nodeName) && elem.parentNode) migrateWarn("Can't change the 'type' of an input or button in IE 6/7/8");
        if (!jQuery.attrHooks[lowerName] && rboolean.test(lowerName)) {
            jQuery.attrHooks[lowerName] = {
                get: function(elem, name) {
                    var attrNode, property = jQuery.prop(elem, name);
                    return true === property || "boolean" !== typeof property && (attrNode = elem.getAttributeNode(name)) && false !== attrNode.nodeValue ? name.toLowerCase() : undefined;
                },
                set: function(elem, value, name) {
                    var propName;
                    if (false === value) jQuery.removeAttr(elem, name); else {
                        propName = jQuery.propFix[name] || name;
                        if (propName in elem) elem[propName] = true;
                        elem.setAttribute(name, name.toLowerCase());
                    }
                    return name;
                }
            };
            if (ruseDefault.test(lowerName)) migrateWarn("jQuery.fn.attr('" + lowerName + "') may use property instead of attribute");
        }
        return oldAttr.call(jQuery, elem, name, value);
    };
    jQuery.attrHooks.value = {
        get: function(elem, name) {
            var nodeName = (elem.nodeName || "").toLowerCase();
            if ("button" === nodeName) return valueAttrGet.apply(this, arguments);
            if ("input" !== nodeName && "option" !== nodeName) migrateWarn("jQuery.fn.attr('value') no longer gets properties");
            return name in elem ? elem.value : null;
        },
        set: function(elem, value) {
            var nodeName = (elem.nodeName || "").toLowerCase();
            if ("button" === nodeName) return valueAttrSet.apply(this, arguments);
            if ("input" !== nodeName && "option" !== nodeName) migrateWarn("jQuery.fn.attr('value', val) no longer sets properties");
            elem.value = value;
        }
    };
    var matched, browser, oldInit = jQuery.fn.init, oldParseJSON = jQuery.parseJSON, rquickExpr = /^([^<]*)(<[\w\W]+>)([^>]*)$/;
    jQuery.fn.init = function(selector, context, rootjQuery) {
        var match;
        if (selector && "string" === typeof selector && !jQuery.isPlainObject(context) && (match = rquickExpr.exec(jQuery.trim(selector))) && match[0]) {
            if ("<" !== selector.charAt(0)) migrateWarn("$(html) HTML strings must start with '<' character");
            if (match[3]) migrateWarn("$(html) HTML text after last tag is ignored");
            if ("#" === match[0].charAt(0)) {
                migrateWarn("HTML string cannot start with a '#' character");
                jQuery.error("JQMIGRATE: Invalid selector string (XSS)");
            }
            if (context && context.context) context = context.context;
            if (jQuery.parseHTML) return oldInit.call(this, jQuery.parseHTML(match[2], context, true), context, rootjQuery);
        }
        return oldInit.apply(this, arguments);
    };
    jQuery.fn.init.prototype = jQuery.fn;
    jQuery.parseJSON = function(json) {
        if (!json && null !== json) {
            migrateWarn("jQuery.parseJSON requires a valid JSON string");
            return null;
        }
        return oldParseJSON.apply(this, arguments);
    };
    jQuery.uaMatch = function(ua) {
        ua = ua.toLowerCase();
        var match = /(chrome)[ \/]([\w.]+)/.exec(ua) || /(webkit)[ \/]([\w.]+)/.exec(ua) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) || /(msie) ([\w.]+)/.exec(ua) || ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) || [];
        return {
            browser: match[1] || "",
            version: match[2] || "0"
        };
    };
    if (!jQuery.browser) {
        matched = jQuery.uaMatch(navigator.userAgent);
        browser = {};
        if (matched.browser) {
            browser[matched.browser] = true;
            browser.version = matched.version;
        }
        if (browser.chrome) browser.webkit = true; else if (browser.webkit) browser.safari = true;
        jQuery.browser = browser;
    }
    migrateWarnProp(jQuery, "browser", jQuery.browser, "jQuery.browser is deprecated");
    jQuery.sub = function() {
        function jQuerySub(selector, context) {
            return new jQuerySub.fn.init(selector, context);
        }
        jQuery.extend(true, jQuerySub, this);
        jQuerySub.superclass = this;
        jQuerySub.fn = jQuerySub.prototype = this();
        jQuerySub.fn.constructor = jQuerySub;
        jQuerySub.sub = this.sub;
        jQuerySub.fn.init = function init(selector, context) {
            if (context && context instanceof jQuery && !(context instanceof jQuerySub)) context = jQuerySub(context);
            return jQuery.fn.init.call(this, selector, context, rootjQuerySub);
        };
        jQuerySub.fn.init.prototype = jQuerySub.fn;
        var rootjQuerySub = jQuerySub(document);
        migrateWarn("jQuery.sub() is deprecated");
        return jQuerySub;
    };
    jQuery.ajaxSetup({
        converters: {
            "text json": jQuery.parseJSON
        }
    });
    var oldFnData = jQuery.fn.data;
    jQuery.fn.data = function(name) {
        var ret, evt, elem = this[0];
        if (elem && "events" === name && 1 === arguments.length) {
            ret = jQuery.data(elem, name);
            evt = jQuery._data(elem, name);
            if ((ret === undefined || ret === evt) && evt !== undefined) {
                migrateWarn("Use of jQuery.fn.data('events') is deprecated");
                return evt;
            }
        }
        return oldFnData.apply(this, arguments);
    };
    var rscriptType = /\/(java|ecma)script/i, oldSelf = jQuery.fn.andSelf || jQuery.fn.addBack;
    jQuery.fn.andSelf = function() {
        migrateWarn("jQuery.fn.andSelf() replaced by jQuery.fn.addBack()");
        return oldSelf.apply(this, arguments);
    };
    if (!jQuery.clean) jQuery.clean = function(elems, context, fragment, scripts) {
        context = context || document;
        context = !context.nodeType && context[0] || context;
        context = context.ownerDocument || context;
        migrateWarn("jQuery.clean() is deprecated");
        var i, elem, handleScript, jsTags, ret = [];
        jQuery.merge(ret, jQuery.buildFragment(elems, context).childNodes);
        if (fragment) {
            handleScript = function(elem) {
                if (!elem.type || rscriptType.test(elem.type)) return scripts ? scripts.push(elem.parentNode ? elem.parentNode.removeChild(elem) : elem) : fragment.appendChild(elem);
            };
            for (i = 0; null != (elem = ret[i]); i++) if (!(jQuery.nodeName(elem, "script") && handleScript(elem))) {
                fragment.appendChild(elem);
                if ("undefined" !== typeof elem.getElementsByTagName) {
                    jsTags = jQuery.grep(jQuery.merge([], elem.getElementsByTagName("script")), handleScript);
                    ret.splice.apply(ret, [ i + 1, 0 ].concat(jsTags));
                    i += jsTags.length;
                }
            }
        }
        return ret;
    };
    var eventAdd = jQuery.event.add, eventRemove = jQuery.event.remove, eventTrigger = jQuery.event.trigger, oldToggle = jQuery.fn.toggle, oldLive = jQuery.fn.live, oldDie = jQuery.fn.die, ajaxEvents = "ajaxStart|ajaxStop|ajaxSend|ajaxComplete|ajaxError|ajaxSuccess", rajaxEvent = new RegExp("\\b(?:" + ajaxEvents + ")\\b"), rhoverHack = /(?:^|\s)hover(\.\S+|)\b/, hoverHack = function(events) {
        if ("string" !== typeof events || jQuery.event.special.hover) return events;
        if (rhoverHack.test(events)) migrateWarn("'hover' pseudo-event is deprecated, use 'mouseenter mouseleave'");
        return events && events.replace(rhoverHack, "mouseenter$1 mouseleave$1");
    };
    if (jQuery.event.props && "attrChange" !== jQuery.event.props[0]) jQuery.event.props.unshift("attrChange", "attrName", "relatedNode", "srcElement");
    if (jQuery.event.dispatch) migrateWarnProp(jQuery.event, "handle", jQuery.event.dispatch, "jQuery.event.handle is undocumented and deprecated");
    jQuery.event.add = function(elem, types, handler, data, selector) {
        if (elem !== document && rajaxEvent.test(types)) migrateWarn("AJAX events should be attached to document: " + types);
        eventAdd.call(this, elem, hoverHack(types || ""), handler, data, selector);
    };
    jQuery.event.remove = function(elem, types, handler, selector, mappedTypes) {
        eventRemove.call(this, elem, hoverHack(types) || "", handler, selector, mappedTypes);
    };
    jQuery.fn.error = function() {
        var args = Array.prototype.slice.call(arguments, 0);
        migrateWarn("jQuery.fn.error() is deprecated");
        args.splice(0, 0, "error");
        if (arguments.length) return this.bind.apply(this, args);
        this.triggerHandler.apply(this, args);
        return this;
    };
    jQuery.fn.toggle = function(fn, fn2) {
        if (!jQuery.isFunction(fn) || !jQuery.isFunction(fn2)) return oldToggle.apply(this, arguments);
        migrateWarn("jQuery.fn.toggle(handler, handler...) is deprecated");
        var args = arguments, guid = fn.guid || jQuery.guid++, i = 0, toggler = function(event) {
            var lastToggle = (jQuery._data(this, "lastToggle" + fn.guid) || 0) % i;
            jQuery._data(this, "lastToggle" + fn.guid, lastToggle + 1);
            event.preventDefault();
            return args[lastToggle].apply(this, arguments) || false;
        };
        toggler.guid = guid;
        while (i < args.length) args[i++].guid = guid;
        return this.click(toggler);
    };
    jQuery.fn.live = function(types, data, fn) {
        migrateWarn("jQuery.fn.live() is deprecated");
        if (oldLive) return oldLive.apply(this, arguments);
        jQuery(this.context).on(types, this.selector, data, fn);
        return this;
    };
    jQuery.fn.die = function(types, fn) {
        migrateWarn("jQuery.fn.die() is deprecated");
        if (oldDie) return oldDie.apply(this, arguments);
        jQuery(this.context).off(types, this.selector || "**", fn);
        return this;
    };
    jQuery.event.trigger = function(event, data, elem, onlyHandlers) {
        if (!elem && !rajaxEvent.test(event)) migrateWarn("Global events are undocumented and deprecated");
        return eventTrigger.call(this, event, data, elem || document, onlyHandlers);
    };
    jQuery.each(ajaxEvents.split("|"), function(_, name) {
        jQuery.event.special[name] = {
            setup: function() {
                var elem = this;
                if (elem !== document) {
                    jQuery.event.add(document, name + "." + jQuery.guid, function() {
                        jQuery.event.trigger(name, null, elem, true);
                    });
                    jQuery._data(this, name, jQuery.guid++);
                }
                return false;
            },
            teardown: function() {
                if (this !== document) jQuery.event.remove(document, name + "." + jQuery._data(this, name));
                return false;
            }
        };
    });
})(jQuery, window);

(function($) {
    $.noConflict();
    $.fn.extend({
        _wsHide: $.fn.hide,
        _wsShow: $.fn.show,
        hide: function() {
            this._wsHide.apply(this, arguments);
            return this.addClass("hidden");
        },
        show: function() {
            this.removeClass("hidden");
            return this._wsShow.apply(this, arguments);
        }
    });
    $.extend($.expr[":"], {
        inView: function(a) {
            var st = document.documentElement.scrollTop || document.body.scrollTop, ot = $(a).offset().top, wh = window.innerHeight && window.innerHeight < $(window).height() ? window.innerHeight : $(window).height();
            return ot > st && $(a).height() + ot < st + wh;
        }
    });
    $(document).ready(function() {
        $.ui.dialog.prototype._allowInteraction = function(e) {
            return !!$(e.target).closest(".ui-dialog, .ui-datepicker, .select2-drop").length;
        };
    });
})(jQuery);

window.ws = jQuery.extend(window.ws, {
    namespace: function(ns) {
        var parts = ns.split("."), parent = ws, i;
        if ("ws" === parts[0]) parts = parts.slice(1);
        for (i = 0; i < parts.length; i += 1) {
            if ("undefined" === typeof parent[parts[i]]) parent[parts[i]] = {};
            parent = parent[parts[i]];
        }
        return parent;
    }
});

(function() {
    var root = this;
    var previousUnderscore = root._;
    var breaker = {};
    var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;
    var slice = ArrayProto.slice, unshift = ArrayProto.unshift, toString = ObjProto.toString, hasOwnProperty = ObjProto.hasOwnProperty;
    var nativeForEach = ArrayProto.forEach, nativeMap = ArrayProto.map, nativeReduce = ArrayProto.reduce, nativeReduceRight = ArrayProto.reduceRight, nativeFilter = ArrayProto.filter, nativeEvery = ArrayProto.every, nativeSome = ArrayProto.some, nativeIndexOf = ArrayProto.indexOf, nativeLastIndexOf = ArrayProto.lastIndexOf, nativeIsArray = Array.isArray, nativeKeys = Object.keys, nativeBind = FuncProto.bind;
    var _ = function(obj) {
        return new wrapper(obj);
    };
    if ("undefined" !== typeof exports) {
        if ("undefined" !== typeof module && module.exports) exports = module.exports = _;
        exports._ = _;
    } else root["_"] = _;
    _.VERSION = "1.3.1";
    var each = _.each = _.forEach = function(obj, iterator, context) {
        if (null == obj) return;
        if (nativeForEach && obj.forEach === nativeForEach) obj.forEach(iterator, context); else if (obj.length === +obj.length) {
            for (var i = 0, l = obj.length; i < l; i++) if (i in obj && iterator.call(context, obj[i], i, obj) === breaker) return;
        } else for (var key in obj) if (_.has(obj, key)) if (iterator.call(context, obj[key], key, obj) === breaker) return;
    };
    _.map = _.collect = function(obj, iterator, context) {
        var results = [];
        if (null == obj) return results;
        if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
        each(obj, function(value, index, list) {
            results[results.length] = iterator.call(context, value, index, list);
        });
        if (obj.length === +obj.length) results.length = obj.length;
        return results;
    };
    _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
        var initial = arguments.length > 2;
        if (null == obj) obj = [];
        if (nativeReduce && obj.reduce === nativeReduce) {
            if (context) iterator = _.bind(iterator, context);
            return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
        }
        each(obj, function(value, index, list) {
            if (!initial) {
                memo = value;
                initial = true;
            } else memo = iterator.call(context, memo, value, index, list);
        });
        if (!initial) throw new TypeError("Reduce of empty array with no initial value");
        return memo;
    };
    _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
        var initial = arguments.length > 2;
        if (null == obj) obj = [];
        if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
            if (context) iterator = _.bind(iterator, context);
            return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
        }
        var reversed = _.toArray(obj).reverse();
        if (context && !initial) iterator = _.bind(iterator, context);
        return initial ? _.reduce(reversed, iterator, memo, context) : _.reduce(reversed, iterator);
    };
    _.find = _.detect = function(obj, iterator, context) {
        var result;
        any(obj, function(value, index, list) {
            if (iterator.call(context, value, index, list)) {
                result = value;
                return true;
            }
        });
        return result;
    };
    _.filter = _.select = function(obj, iterator, context) {
        var results = [];
        if (null == obj) return results;
        if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);
        each(obj, function(value, index, list) {
            if (iterator.call(context, value, index, list)) results[results.length] = value;
        });
        return results;
    };
    _.reject = function(obj, iterator, context) {
        var results = [];
        if (null == obj) return results;
        each(obj, function(value, index, list) {
            if (!iterator.call(context, value, index, list)) results[results.length] = value;
        });
        return results;
    };
    _.every = _.all = function(obj, iterator, context) {
        var result = true;
        if (null == obj) return result;
        if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);
        each(obj, function(value, index, list) {
            if (!(result = result && iterator.call(context, value, index, list))) return breaker;
        });
        return result;
    };
    var any = _.some = _.any = function(obj, iterator, context) {
        iterator || (iterator = _.identity);
        var result = false;
        if (null == obj) return result;
        if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);
        each(obj, function(value, index, list) {
            if (result || (result = iterator.call(context, value, index, list))) return breaker;
        });
        return !!result;
    };
    _.include = _.contains = function(obj, target) {
        var found = false;
        if (null == obj) return found;
        if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
        found = any(obj, function(value) {
            return value === target;
        });
        return found;
    };
    _.invoke = function(obj, method) {
        var args = slice.call(arguments, 2);
        return _.map(obj, function(value) {
            return (_.isFunction(method) ? method || value : value[method]).apply(value, args);
        });
    };
    _.pluck = function(obj, key) {
        return _.map(obj, function(value) {
            return value[key];
        });
    };
    _.max = function(obj, iterator, context) {
        if (!iterator && _.isArray(obj)) return Math.max.apply(Math, obj);
        if (!iterator && _.isEmpty(obj)) return -1/0;
        var result = {
            computed: -1/0
        };
        each(obj, function(value, index, list) {
            var computed = iterator ? iterator.call(context, value, index, list) : value;
            computed >= result.computed && (result = {
                value: value,
                computed: computed
            });
        });
        return result.value;
    };
    _.min = function(obj, iterator, context) {
        if (!iterator && _.isArray(obj)) return Math.min.apply(Math, obj);
        if (!iterator && _.isEmpty(obj)) return 1/0;
        var result = {
            computed: 1/0
        };
        each(obj, function(value, index, list) {
            var computed = iterator ? iterator.call(context, value, index, list) : value;
            computed < result.computed && (result = {
                value: value,
                computed: computed
            });
        });
        return result.value;
    };
    _.shuffle = function(obj) {
        var shuffled = [], rand;
        each(obj, function(value, index, list) {
            if (0 == index) shuffled[0] = value; else {
                rand = Math.floor(Math.random() * (index + 1));
                shuffled[index] = shuffled[rand];
                shuffled[rand] = value;
            }
        });
        return shuffled;
    };
    _.sortBy = function(obj, iterator, context) {
        return _.pluck(_.map(obj, function(value, index, list) {
            return {
                value: value,
                criteria: iterator.call(context, value, index, list)
            };
        }).sort(function(left, right) {
            var a = left.criteria, b = right.criteria;
            return a < b ? -1 : a > b ? 1 : 0;
        }), "value");
    };
    _.groupBy = function(obj, val) {
        var result = {};
        var iterator = _.isFunction(val) ? val : function(obj) {
            return obj[val];
        };
        each(obj, function(value, index) {
            var key = iterator(value, index);
            (result[key] || (result[key] = [])).push(value);
        });
        return result;
    };
    _.sortedIndex = function(array, obj, iterator) {
        iterator || (iterator = _.identity);
        var low = 0, high = array.length;
        while (low < high) {
            var mid = low + high >> 1;
            iterator(array[mid]) < iterator(obj) ? low = mid + 1 : high = mid;
        }
        return low;
    };
    _.toArray = function(iterable) {
        if (!iterable) return [];
        if (iterable.toArray) return iterable.toArray();
        if (_.isArray(iterable)) return slice.call(iterable);
        if (_.isArguments(iterable)) return slice.call(iterable);
        return _.values(iterable);
    };
    _.size = function(obj) {
        return _.toArray(obj).length;
    };
    _.first = _.head = function(array, n, guard) {
        return null != n && !guard ? slice.call(array, 0, n) : array[0];
    };
    _.initial = function(array, n, guard) {
        return slice.call(array, 0, array.length - (null == n || guard ? 1 : n));
    };
    _.last = function(array, n, guard) {
        if (null != n && !guard) return slice.call(array, Math.max(array.length - n, 0)); else return array[array.length - 1];
    };
    _.rest = _.tail = function(array, index, guard) {
        return slice.call(array, null == index || guard ? 1 : index);
    };
    _.compact = function(array) {
        return _.filter(array, function(value) {
            return !!value;
        });
    };
    _.flatten = function(array, shallow) {
        return _.reduce(array, function(memo, value) {
            if (_.isArray(value)) return memo.concat(shallow ? value : _.flatten(value));
            memo[memo.length] = value;
            return memo;
        }, []);
    };
    _.without = function(array) {
        return _.difference(array, slice.call(arguments, 1));
    };
    _.uniq = _.unique = function(array, isSorted, iterator) {
        var initial = iterator ? _.map(array, iterator) : array;
        var result = [];
        _.reduce(initial, function(memo, el, i) {
            if (0 == i || (true === isSorted ? _.last(memo) != el : !_.include(memo, el))) {
                memo[memo.length] = el;
                result[result.length] = array[i];
            }
            return memo;
        }, []);
        return result;
    };
    _.union = function() {
        return _.uniq(_.flatten(arguments, true));
    };
    _.intersection = _.intersect = function(array) {
        var rest = slice.call(arguments, 1);
        return _.filter(_.uniq(array), function(item) {
            return _.every(rest, function(other) {
                return _.indexOf(other, item) >= 0;
            });
        });
    };
    _.difference = function(array) {
        var rest = _.flatten(slice.call(arguments, 1));
        return _.filter(array, function(value) {
            return !_.include(rest, value);
        });
    };
    _.zip = function() {
        var args = slice.call(arguments);
        var length = _.max(_.pluck(args, "length"));
        var results = new Array(length);
        for (var i = 0; i < length; i++) results[i] = _.pluck(args, "" + i);
        return results;
    };
    _.indexOf = function(array, item, isSorted) {
        if (null == array) return -1;
        var i, l;
        if (isSorted) {
            i = _.sortedIndex(array, item);
            return array[i] === item ? i : -1;
        }
        if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item);
        for (i = 0, l = array.length; i < l; i++) if (i in array && array[i] === item) return i;
        return -1;
    };
    _.lastIndexOf = function(array, item) {
        if (null == array) return -1;
        if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) return array.lastIndexOf(item);
        var i = array.length;
        while (i--) if (i in array && array[i] === item) return i;
        return -1;
    };
    _.range = function(start, stop, step) {
        if (arguments.length <= 1) {
            stop = start || 0;
            start = 0;
        }
        step = arguments[2] || 1;
        var len = Math.max(Math.ceil((stop - start) / step), 0);
        var idx = 0;
        var range = new Array(len);
        while (idx < len) {
            range[idx++] = start;
            start += step;
        }
        return range;
    };
    var ctor = function() {};
    _.bind = function bind(func, context) {
        var bound, args;
        if (func.bind === nativeBind && nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
        if (!_.isFunction(func)) throw new TypeError();
        args = slice.call(arguments, 2);
        return bound = function() {
            if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
            ctor.prototype = func.prototype;
            var self = new ctor();
            var result = func.apply(self, args.concat(slice.call(arguments)));
            if (Object(result) === result) return result;
            return self;
        };
    };
    _.bindAll = function(obj) {
        var funcs = slice.call(arguments, 1);
        if (0 == funcs.length) funcs = _.functions(obj);
        each(funcs, function(f) {
            obj[f] = _.bind(obj[f], obj);
        });
        return obj;
    };
    _.memoize = function(func, hasher) {
        var memo = {};
        hasher || (hasher = _.identity);
        return function() {
            var key = hasher.apply(this, arguments);
            return _.has(memo, key) ? memo[key] : memo[key] = func.apply(this, arguments);
        };
    };
    _.delay = function(func, wait) {
        var args = slice.call(arguments, 2);
        return setTimeout(function() {
            return func.apply(func, args);
        }, wait);
    };
    _.defer = function(func) {
        return _.delay.apply(_, [ func, 1 ].concat(slice.call(arguments, 1)));
    };
    _.throttle = function(func, wait) {
        var context, args, timeout, throttling, more;
        var whenDone = _.debounce(function() {
            more = throttling = false;
        }, wait);
        return function() {
            context = this;
            args = arguments;
            var later = function() {
                timeout = null;
                if (more) func.apply(context, args);
                whenDone();
            };
            if (!timeout) timeout = setTimeout(later, wait);
            if (throttling) more = true; else func.apply(context, args);
            whenDone();
            throttling = true;
        };
    };
    _.debounce = function(func, wait) {
        var timeout;
        return function() {
            var context = this, args = arguments;
            var later = function() {
                timeout = null;
                func.apply(context, args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    };
    _.once = function(func) {
        var ran = false, memo;
        return function() {
            if (ran) return memo;
            ran = true;
            return memo = func.apply(this, arguments);
        };
    };
    _.wrap = function(func, wrapper) {
        return function() {
            var args = [ func ].concat(slice.call(arguments, 0));
            return wrapper.apply(this, args);
        };
    };
    _.compose = function() {
        var funcs = arguments;
        return function() {
            var args = arguments;
            for (var i = funcs.length - 1; i >= 0; i--) args = [ funcs[i].apply(this, args) ];
            return args[0];
        };
    };
    _.after = function(times, func) {
        if (times <= 0) return func();
        return function() {
            if (--times < 1) return func.apply(this, arguments);
        };
    };
    _.keys = nativeKeys || function(obj) {
        if (obj !== Object(obj)) throw new TypeError("Invalid object");
        var keys = [];
        for (var key in obj) if (_.has(obj, key)) keys[keys.length] = key;
        return keys;
    };
    _.values = function(obj) {
        return _.map(obj, _.identity);
    };
    _.functions = _.methods = function(obj) {
        var names = [];
        for (var key in obj) if (_.isFunction(obj[key])) names.push(key);
        return names.sort();
    };
    _.extend = function(obj) {
        each(slice.call(arguments, 1), function(source) {
            for (var prop in source) obj[prop] = source[prop];
        });
        return obj;
    };
    _.defaults = function(obj) {
        each(slice.call(arguments, 1), function(source) {
            for (var prop in source) if (null == obj[prop]) obj[prop] = source[prop];
        });
        return obj;
    };
    _.clone = function(obj) {
        if (!_.isObject(obj)) return obj;
        return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
    };
    _.tap = function(obj, interceptor) {
        interceptor(obj);
        return obj;
    };
    function eq(a, b, stack) {
        if (a === b) return 0 !== a || 1 / a == 1 / b;
        if (null == a || null == b) return a === b;
        if (a._chain) a = a._wrapped;
        if (b._chain) b = b._wrapped;
        if (a.isEqual && _.isFunction(a.isEqual)) return a.isEqual(b);
        if (b.isEqual && _.isFunction(b.isEqual)) return b.isEqual(a);
        var className = toString.call(a);
        if (className != toString.call(b)) return false;
        switch (className) {
          case "[object String]":
            return a == String(b);

          case "[object Number]":
            return a != +a ? b != +b : 0 == a ? 1 / a == 1 / b : a == +b;

          case "[object Date]":
          case "[object Boolean]":
            return +a == +b;

          case "[object RegExp]":
            return a.source == b.source && a.global == b.global && a.multiline == b.multiline && a.ignoreCase == b.ignoreCase;
        }
        if ("object" != typeof a || "object" != typeof b) return false;
        var length = stack.length;
        while (length--) if (stack[length] == a) return true;
        stack.push(a);
        var size = 0, result = true;
        if ("[object Array]" == className) {
            size = a.length;
            result = size == b.length;
            if (result) while (size--) if (!(result = size in a == size in b && eq(a[size], b[size], stack))) break;
        } else {
            if ("constructor" in a != "constructor" in b || a.constructor != b.constructor) return false;
            for (var key in a) if (_.has(a, key)) {
                size++;
                if (!(result = _.has(b, key) && eq(a[key], b[key], stack))) break;
            }
            if (result) {
                for (key in b) if (_.has(b, key) && !size--) break;
                result = !size;
            }
        }
        stack.pop();
        return result;
    }
    _.isEqual = function(a, b) {
        return eq(a, b, []);
    };
    _.isEmpty = function(obj) {
        if (_.isArray(obj) || _.isString(obj)) return 0 === obj.length;
        for (var key in obj) if (_.has(obj, key)) return false;
        return true;
    };
    _.isElement = function(obj) {
        return !!(obj && 1 == obj.nodeType);
    };
    _.isArray = nativeIsArray || function(obj) {
        return "[object Array]" == toString.call(obj);
    };
    _.isObject = function(obj) {
        return obj === Object(obj);
    };
    _.isArguments = function(obj) {
        return "[object Arguments]" == toString.call(obj);
    };
    if (!_.isArguments(arguments)) _.isArguments = function(obj) {
        return !!(obj && _.has(obj, "callee"));
    };
    _.isFunction = function(obj) {
        return "[object Function]" == toString.call(obj);
    };
    _.isString = function(obj) {
        return "[object String]" == toString.call(obj);
    };
    _.isNumber = function(obj) {
        return "[object Number]" == toString.call(obj);
    };
    _.isNaN = function(obj) {
        return obj !== obj;
    };
    _.isBoolean = function(obj) {
        return true === obj || false === obj || "[object Boolean]" == toString.call(obj);
    };
    _.isDate = function(obj) {
        return "[object Date]" == toString.call(obj);
    };
    _.isRegExp = function(obj) {
        return "[object RegExp]" == toString.call(obj);
    };
    _.isNull = function(obj) {
        return null === obj;
    };
    _.isUndefined = function(obj) {
        return obj === void 0;
    };
    _.has = function(obj, key) {
        return hasOwnProperty.call(obj, key);
    };
    _.noConflict = function() {
        root._ = previousUnderscore;
        return this;
    };
    _.identity = function(value) {
        return value;
    };
    _.times = function(n, iterator, context) {
        for (var i = 0; i < n; i++) iterator.call(context, i);
    };
    _.escape = function(string) {
        return ("" + string).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#x27;").replace(/\//g, "&#x2F;");
    };
    _.mixin = function(obj) {
        each(_.functions(obj), function(name) {
            addToWrapper(name, _[name] = obj[name]);
        });
    };
    var idCounter = 0;
    _.uniqueId = function(prefix) {
        var id = idCounter++;
        return prefix ? prefix + id : id;
    };
    _.templateSettings = {
        evaluate: /<%([\s\S]+?)%>/g,
        interpolate: /<%=([\s\S]+?)%>/g,
        escape: /<%-([\s\S]+?)%>/g
    };
    var noMatch = /.^/;
    var unescape = function(code) {
        return code.replace(/\\\\/g, "\\").replace(/\\'/g, "'");
    };
    _.template = function(str, data) {
        var c = _.templateSettings;
        var tmpl = "var __p=[],print=function(){__p.push.apply(__p,arguments);};" + "with(obj||{}){__p.push('" + str.replace(/\\/g, "\\\\").replace(/'/g, "\\'").replace(c.escape || noMatch, function(match, code) {
            return "',_.escape(" + unescape(code) + "),'";
        }).replace(c.interpolate || noMatch, function(match, code) {
            return "'," + unescape(code) + ",'";
        }).replace(c.evaluate || noMatch, function(match, code) {
            return "');" + unescape(code).replace(/[\r\n\t]/g, " ") + ";__p.push('";
        }).replace(/\r/g, "\\r").replace(/\n/g, "\\n").replace(/\t/g, "\\t") + "');}return __p.join('');";
        var func = new Function("obj", "_", tmpl);
        if (data) return func(data, _);
        return function(data) {
            return func.call(this, data, _);
        };
    };
    _.chain = function(obj) {
        return _(obj).chain();
    };
    var wrapper = function(obj) {
        this._wrapped = obj;
    };
    _.prototype = wrapper.prototype;
    var result = function(obj, chain) {
        return chain ? _(obj).chain() : obj;
    };
    var addToWrapper = function(name, func) {
        wrapper.prototype[name] = function() {
            var args = slice.call(arguments);
            unshift.call(args, this._wrapped);
            return result(func.apply(_, args), this._chain);
        };
    };
    _.mixin(_);
    each([ "pop", "push", "reverse", "shift", "sort", "splice", "unshift" ], function(name) {
        var method = ArrayProto[name];
        wrapper.prototype[name] = function() {
            var wrapped = this._wrapped;
            method.apply(wrapped, arguments);
            var length = wrapped.length;
            if (("shift" == name || "splice" == name) && 0 === length) delete wrapped[0];
            return result(wrapped, this._chain);
        };
    });
    each([ "concat", "join", "slice" ], function(name) {
        var method = ArrayProto[name];
        wrapper.prototype[name] = function() {
            return result(method.apply(this._wrapped, arguments), this._chain);
        };
    });
    wrapper.prototype.chain = function() {
        this._chain = true;
        return this;
    };
    wrapper.prototype.value = function() {
        return this._wrapped;
    };
}).call(this);

(function() {
    var root = this;
    var previousBackbone = root.Backbone;
    var slice = Array.prototype.slice;
    var splice = Array.prototype.splice;
    var Backbone;
    if ("undefined" !== typeof exports) Backbone = exports; else Backbone = root.Backbone = {};
    Backbone.VERSION = "0.9.2";
    var _ = root._;
    if (!_ && "undefined" !== typeof require) _ = require("underscore");
    var $ = root.jQuery || root.Zepto || root.ender;
    Backbone.setDomLibrary = function(lib) {
        $ = lib;
    };
    Backbone.noConflict = function() {
        root.Backbone = previousBackbone;
        return this;
    };
    Backbone.emulateHTTP = false;
    Backbone.emulateJSON = false;
    var eventSplitter = /\s+/;
    var Events = Backbone.Events = {
        on: function(events, callback, context) {
            var calls, event, node, tail, list;
            if (!callback) return this;
            events = events.split(eventSplitter);
            calls = this._callbacks || (this._callbacks = {});
            while (event = events.shift()) {
                list = calls[event];
                node = list ? list.tail : {};
                node.next = tail = {};
                node.context = context;
                node.callback = callback;
                calls[event] = {
                    tail: tail,
                    next: list ? list.next : node
                };
            }
            return this;
        },
        off: function(events, callback, context) {
            var event, calls, node, tail, cb, ctx;
            if (!(calls = this._callbacks)) return;
            if (!(events || callback || context)) {
                delete this._callbacks;
                return this;
            }
            events = events ? events.split(eventSplitter) : _.keys(calls);
            while (event = events.shift()) {
                node = calls[event];
                delete calls[event];
                if (!node || !(callback || context)) continue;
                tail = node.tail;
                while ((node = node.next) !== tail) {
                    cb = node.callback;
                    ctx = node.context;
                    if (callback && cb !== callback || context && ctx !== context) this.on(event, cb, ctx);
                }
            }
            return this;
        },
        trigger: function(events) {
            var event, node, calls, tail, args, all, rest;
            if (!(calls = this._callbacks)) return this;
            all = calls.all;
            events = events.split(eventSplitter);
            rest = slice.call(arguments, 1);
            while (event = events.shift()) {
                if (node = calls[event]) {
                    tail = node.tail;
                    while ((node = node.next) !== tail) node.callback.apply(node.context || this, rest);
                }
                if (node = all) {
                    tail = node.tail;
                    args = [ event ].concat(rest);
                    while ((node = node.next) !== tail) node.callback.apply(node.context || this, args);
                }
            }
            return this;
        }
    };
    Events.bind = Events.on;
    Events.unbind = Events.off;
    var Model = Backbone.Model = function(attributes, options) {
        var defaults;
        attributes || (attributes = {});
        if (options && options.parse) attributes = this.parse(attributes);
        if (defaults = getValue(this, "defaults")) attributes = _.extend({}, defaults, attributes);
        if (options && options.collection) this.collection = options.collection;
        this.attributes = {};
        this._escapedAttributes = {};
        this.cid = _.uniqueId("c");
        this.changed = {};
        this._silent = {};
        this._pending = {};
        this.set(attributes, {
            silent: true
        });
        this.changed = {};
        this._silent = {};
        this._pending = {};
        this._previousAttributes = _.clone(this.attributes);
        this.initialize.apply(this, arguments);
    };
    _.extend(Model.prototype, Events, {
        changed: null,
        _silent: null,
        _pending: null,
        idAttribute: "id",
        initialize: function() {},
        toJSON: function(options) {
            return _.clone(this.attributes);
        },
        get: function(attr) {
            return this.attributes[attr];
        },
        escape: function(attr) {
            var html;
            if (html = this._escapedAttributes[attr]) return html;
            var val = this.get(attr);
            return this._escapedAttributes[attr] = _.escape(null == val ? "" : "" + val);
        },
        has: function(attr) {
            return null != this.get(attr);
        },
        set: function(key, value, options) {
            var attrs, attr, val;
            if (_.isObject(key) || null == key) {
                attrs = key;
                options = value;
            } else {
                attrs = {};
                attrs[key] = value;
            }
            options || (options = {});
            if (!attrs) return this;
            if (attrs instanceof Model) attrs = attrs.attributes;
            if (options.unset) for (attr in attrs) attrs[attr] = void 0;
            if (!this._validate(attrs, options)) return false;
            if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];
            var changes = options.changes = {};
            var now = this.attributes;
            var escaped = this._escapedAttributes;
            var prev = this._previousAttributes || {};
            for (attr in attrs) {
                val = attrs[attr];
                if (!_.isEqual(now[attr], val) || options.unset && _.has(now, attr)) {
                    delete escaped[attr];
                    (options.silent ? this._silent : changes)[attr] = true;
                }
                options.unset ? delete now[attr] : now[attr] = val;
                if (!_.isEqual(prev[attr], val) || _.has(now, attr) != _.has(prev, attr)) {
                    this.changed[attr] = val;
                    if (!options.silent) this._pending[attr] = true;
                } else {
                    delete this.changed[attr];
                    delete this._pending[attr];
                }
            }
            if (!options.silent) this.change(options);
            return this;
        },
        unset: function(attr, options) {
            (options || (options = {})).unset = true;
            return this.set(attr, null, options);
        },
        clear: function(options) {
            (options || (options = {})).unset = true;
            return this.set(_.clone(this.attributes), options);
        },
        fetch: function(options) {
            options = options ? _.clone(options) : {};
            var model = this;
            var success = options.success;
            options.success = function(resp, status, xhr) {
                if (!model.set(model.parse(resp, xhr), options)) return false;
                if (success) success(model, resp);
            };
            options.error = Backbone.wrapError(options.error, model, options);
            return (this.sync || Backbone.sync).call(this, "read", this, options);
        },
        save: function(key, value, options) {
            var attrs, current;
            if (_.isObject(key) || null == key) {
                attrs = key;
                options = value;
            } else {
                attrs = {};
                attrs[key] = value;
            }
            options = options ? _.clone(options) : {};
            if (options.wait) {
                if (!this._validate(attrs, options)) return false;
                current = _.clone(this.attributes);
            }
            var silentOptions = _.extend({}, options, {
                silent: true
            });
            if (attrs && !this.set(attrs, options.wait ? silentOptions : options)) return false;
            var model = this;
            var success = options.success;
            options.success = function(resp, status, xhr) {
                var serverAttrs = model.parse(resp, xhr);
                if (options.wait) {
                    delete options.wait;
                    serverAttrs = _.extend(attrs || {}, serverAttrs);
                }
                if (!model.set(serverAttrs, options)) return false;
                if (success) success(model, resp); else model.trigger("sync", model, resp, options);
            };
            options.error = Backbone.wrapError(options.error, model, options);
            var method = this.isNew() ? "create" : "update";
            var xhr = (this.sync || Backbone.sync).call(this, method, this, options);
            if (options.wait) this.set(current, silentOptions);
            return xhr;
        },
        destroy: function(options) {
            options = options ? _.clone(options) : {};
            var model = this;
            var success = options.success;
            var triggerDestroy = function() {
                model.trigger("destroy", model, model.collection, options);
            };
            if (this.isNew()) {
                triggerDestroy();
                return false;
            }
            options.success = function(resp) {
                if (options.wait) triggerDestroy();
                if (success) success(model, resp); else model.trigger("sync", model, resp, options);
            };
            options.error = Backbone.wrapError(options.error, model, options);
            var xhr = (this.sync || Backbone.sync).call(this, "delete", this, options);
            if (!options.wait) triggerDestroy();
            return xhr;
        },
        url: function() {
            var base = getValue(this, "urlRoot") || getValue(this.collection, "url") || urlError();
            if (this.isNew()) return base;
            return base + ("/" == base.charAt(base.length - 1) ? "" : "/") + encodeURIComponent(this.id);
        },
        parse: function(resp, xhr) {
            return resp;
        },
        clone: function() {
            return new this.constructor(this.attributes);
        },
        isNew: function() {
            return null == this.id;
        },
        change: function(options) {
            options || (options = {});
            var changing = this._changing;
            this._changing = true;
            for (var attr in this._silent) this._pending[attr] = true;
            var changes = _.extend({}, options.changes, this._silent);
            this._silent = {};
            for (var attr in changes) this.trigger("change:" + attr, this, this.get(attr), options);
            if (changing) return this;
            while (!_.isEmpty(this._pending)) {
                this._pending = {};
                this.trigger("change", this, options);
                for (var attr in this.changed) {
                    if (this._pending[attr] || this._silent[attr]) continue;
                    delete this.changed[attr];
                }
                this._previousAttributes = _.clone(this.attributes);
            }
            this._changing = false;
            return this;
        },
        hasChanged: function(attr) {
            if (!arguments.length) return !_.isEmpty(this.changed);
            return _.has(this.changed, attr);
        },
        changedAttributes: function(diff) {
            if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;
            var val, changed = false, old = this._previousAttributes;
            for (var attr in diff) {
                if (_.isEqual(old[attr], val = diff[attr])) continue;
                (changed || (changed = {}))[attr] = val;
            }
            return changed;
        },
        previous: function(attr) {
            if (!arguments.length || !this._previousAttributes) return null;
            return this._previousAttributes[attr];
        },
        previousAttributes: function() {
            return _.clone(this._previousAttributes);
        },
        isValid: function() {
            return !this.validate(this.attributes);
        },
        _validate: function(attrs, options) {
            if (options.silent || !this.validate) return true;
            attrs = _.extend({}, this.attributes, attrs);
            var error = this.validate(attrs, options);
            if (!error) return true;
            if (options && options.error) options.error(this, error, options); else this.trigger("error", this, error, options);
            return false;
        }
    });
    var Collection = Backbone.Collection = function(models, options) {
        options || (options = {});
        if (options.model) this.model = options.model;
        if (options.comparator) this.comparator = options.comparator;
        this._reset();
        this.initialize.apply(this, arguments);
        if (models) this.reset(models, {
            silent: true,
            parse: options.parse
        });
    };
    _.extend(Collection.prototype, Events, {
        model: Model,
        initialize: function() {},
        toJSON: function(options) {
            return this.map(function(model) {
                return model.toJSON(options);
            });
        },
        add: function(models, options) {
            var i, index, length, model, cid, id, cids = {}, ids = {}, dups = [];
            options || (options = {});
            models = _.isArray(models) ? models.slice() : [ models ];
            for (i = 0, length = models.length; i < length; i++) {
                if (!(model = models[i] = this._prepareModel(models[i], options))) throw new Error("Can't add an invalid model to a collection");
                cid = model.cid;
                id = model.id;
                if (cids[cid] || this._byCid[cid] || null != id && (ids[id] || this._byId[id])) {
                    dups.push(i);
                    continue;
                }
                cids[cid] = ids[id] = model;
            }
            i = dups.length;
            while (i--) models.splice(dups[i], 1);
            for (i = 0, length = models.length; i < length; i++) {
                (model = models[i]).on("all", this._onModelEvent, this);
                this._byCid[model.cid] = model;
                if (null != model.id) this._byId[model.id] = model;
            }
            this.length += length;
            index = null != options.at ? options.at : this.models.length;
            splice.apply(this.models, [ index, 0 ].concat(models));
            if (this.comparator) this.sort({
                silent: true
            });
            if (options.silent) return this;
            for (i = 0, length = this.models.length; i < length; i++) {
                if (!cids[(model = this.models[i]).cid]) continue;
                options.index = i;
                model.trigger("add", model, this, options);
            }
            return this;
        },
        remove: function(models, options) {
            var i, l, index, model;
            options || (options = {});
            models = _.isArray(models) ? models.slice() : [ models ];
            for (i = 0, l = models.length; i < l; i++) {
                model = this.getByCid(models[i]) || this.get(models[i]);
                if (!model) continue;
                delete this._byId[model.id];
                delete this._byCid[model.cid];
                index = this.indexOf(model);
                this.models.splice(index, 1);
                this.length--;
                if (!options.silent) {
                    options.index = index;
                    model.trigger("remove", model, this, options);
                }
                this._removeReference(model);
            }
            return this;
        },
        push: function(model, options) {
            model = this._prepareModel(model, options);
            this.add(model, options);
            return model;
        },
        pop: function(options) {
            var model = this.at(this.length - 1);
            this.remove(model, options);
            return model;
        },
        unshift: function(model, options) {
            model = this._prepareModel(model, options);
            this.add(model, _.extend({
                at: 0
            }, options));
            return model;
        },
        shift: function(options) {
            var model = this.at(0);
            this.remove(model, options);
            return model;
        },
        get: function(id) {
            if (null == id) return void 0;
            return this._byId[null != id.id ? id.id : id];
        },
        getByCid: function(cid) {
            return cid && this._byCid[cid.cid || cid];
        },
        at: function(index) {
            return this.models[index];
        },
        where: function(attrs) {
            if (_.isEmpty(attrs)) return [];
            return this.filter(function(model) {
                for (var key in attrs) if (attrs[key] !== model.get(key)) return false;
                return true;
            });
        },
        sort: function(options) {
            options || (options = {});
            if (!this.comparator) throw new Error("Cannot sort a set without a comparator");
            var boundComparator = _.bind(this.comparator, this);
            if (1 == this.comparator.length) this.models = this.sortBy(boundComparator); else this.models.sort(boundComparator);
            if (!options.silent) this.trigger("reset", this, options);
            return this;
        },
        pluck: function(attr) {
            return _.map(this.models, function(model) {
                return model.get(attr);
            });
        },
        reset: function(models, options) {
            models || (models = []);
            options || (options = {});
            for (var i = 0, l = this.models.length; i < l; i++) this._removeReference(this.models[i]);
            this._reset();
            this.add(models, _.extend({
                silent: true
            }, options));
            if (!options.silent) this.trigger("reset", this, options);
            return this;
        },
        fetch: function(options) {
            options = options ? _.clone(options) : {};
            if (void 0 === options.parse) options.parse = true;
            var collection = this;
            var success = options.success;
            options.success = function(resp, status, xhr) {
                collection[options.add ? "add" : "reset"](collection.parse(resp, xhr), options);
                if (success) success(collection, resp);
            };
            options.error = Backbone.wrapError(options.error, collection, options);
            return (this.sync || Backbone.sync).call(this, "read", this, options);
        },
        create: function(model, options) {
            var coll = this;
            options = options ? _.clone(options) : {};
            model = this._prepareModel(model, options);
            if (!model) return false;
            if (!options.wait) coll.add(model, options);
            var success = options.success;
            options.success = function(nextModel, resp, xhr) {
                if (options.wait) coll.add(nextModel, options);
                if (success) success(nextModel, resp); else nextModel.trigger("sync", model, resp, options);
            };
            model.save(null, options);
            return model;
        },
        parse: function(resp, xhr) {
            return resp;
        },
        chain: function() {
            return _(this.models).chain();
        },
        _reset: function(options) {
            this.length = 0;
            this.models = [];
            this._byId = {};
            this._byCid = {};
        },
        _prepareModel: function(model, options) {
            options || (options = {});
            if (!(model instanceof Model)) {
                var attrs = model;
                options.collection = this;
                model = new this.model(attrs, options);
                if (!model._validate(model.attributes, options)) model = false;
            } else if (!model.collection) model.collection = this;
            return model;
        },
        _removeReference: function(model) {
            if (this == model.collection) delete model.collection;
            model.off("all", this._onModelEvent, this);
        },
        _onModelEvent: function(event, model, collection, options) {
            if (("add" == event || "remove" == event) && collection != this) return;
            if ("destroy" == event) this.remove(model, options);
            if (model && event === "change:" + model.idAttribute) {
                delete this._byId[model.previous(model.idAttribute)];
                this._byId[model.id] = model;
            }
            this.trigger.apply(this, arguments);
        }
    });
    var methods = [ "forEach", "each", "map", "reduce", "reduceRight", "find", "detect", "filter", "select", "reject", "every", "all", "some", "any", "include", "contains", "invoke", "max", "min", "sortBy", "sortedIndex", "toArray", "size", "first", "initial", "rest", "last", "without", "indexOf", "shuffle", "lastIndexOf", "isEmpty", "groupBy" ];
    _.each(methods, function(method) {
        Collection.prototype[method] = function() {
            return _[method].apply(_, [ this.models ].concat(_.toArray(arguments)));
        };
    });
    var Router = Backbone.Router = function(options) {
        options || (options = {});
        if (options.routes) this.routes = options.routes;
        this._bindRoutes();
        this.initialize.apply(this, arguments);
    };
    var namedParam = /:\w+/g;
    var splatParam = /\*\w+/g;
    var escapeRegExp = /[-[\]{}()+?.,\\^$|#\s]/g;
    _.extend(Router.prototype, Events, {
        initialize: function() {},
        route: function(route, name, callback) {
            Backbone.history || (Backbone.history = new History());
            if (!_.isRegExp(route)) route = this._routeToRegExp(route);
            if (!callback) callback = this[name];
            Backbone.history.route(route, _.bind(function(fragment) {
                var args = this._extractParameters(route, fragment);
                callback && callback.apply(this, args);
                this.trigger.apply(this, [ "route:" + name ].concat(args));
                Backbone.history.trigger("route", this, name, args);
            }, this));
            return this;
        },
        navigate: function(fragment, options) {
            Backbone.history.navigate(fragment, options);
        },
        _bindRoutes: function() {
            if (!this.routes) return;
            var routes = [];
            for (var route in this.routes) routes.unshift([ route, this.routes[route] ]);
            for (var i = 0, l = routes.length; i < l; i++) this.route(routes[i][0], routes[i][1], this[routes[i][1]]);
        },
        _routeToRegExp: function(route) {
            route = route.replace(escapeRegExp, "\\$&").replace(namedParam, "([^/]+)").replace(splatParam, "(.*?)");
            return new RegExp("^" + route + "$");
        },
        _extractParameters: function(route, fragment) {
            return route.exec(fragment).slice(1);
        }
    });
    var History = Backbone.History = function() {
        this.handlers = [];
        _.bindAll(this, "checkUrl");
    };
    var routeStripper = /^[#\/]/;
    var isExplorer = /msie [\w.]+/;
    History.started = false;
    _.extend(History.prototype, Events, {
        interval: 50,
        getHash: function(windowOverride) {
            var loc = windowOverride ? windowOverride.location : window.location;
            var match = loc.href.match(/#(.*)$/);
            return match ? match[1] : "";
        },
        getFragment: function(fragment, forcePushState) {
            if (null == fragment) if (this._hasPushState || forcePushState) {
                fragment = window.location.pathname;
                var search = window.location.search;
                if (search) fragment += search;
            } else fragment = this.getHash();
            if (!fragment.indexOf(this.options.root)) fragment = fragment.substr(this.options.root.length);
            return fragment.replace(routeStripper, "");
        },
        start: function(options) {
            if (History.started) throw new Error("Backbone.history has already been started");
            History.started = true;
            this.options = _.extend({}, {
                root: "/"
            }, this.options, options);
            this._wantsHashChange = false !== this.options.hashChange;
            this._wantsPushState = !!this.options.pushState;
            this._hasPushState = !!(this.options.pushState && window.history && window.history.pushState);
            var fragment = this.getFragment();
            var docMode = document.documentMode;
            var oldIE = isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7);
            if (oldIE) {
                this.iframe = $('<iframe src="javascript:0" tabindex="-1" />').hide().appendTo("body")[0].contentWindow;
                this.navigate(fragment);
            }
            if (this._hasPushState) $(window).bind("popstate", this.checkUrl); else if (this._wantsHashChange && "onhashchange" in window && !oldIE) $(window).bind("hashchange", this.checkUrl); else if (this._wantsHashChange) this._checkUrlInterval = setInterval(this.checkUrl, this.interval);
            this.fragment = fragment;
            var loc = window.location;
            var atRoot = loc.pathname == this.options.root;
            if (this._wantsHashChange && this._wantsPushState && !this._hasPushState && !atRoot) {
                this.fragment = this.getFragment(null, true);
                window.location.replace(this.options.root + "#" + this.fragment);
                return true;
            } else if (this._wantsPushState && this._hasPushState && atRoot && loc.hash) {
                this.fragment = this.getHash().replace(routeStripper, "");
                window.history.replaceState({}, document.title, loc.protocol + "//" + loc.host + this.options.root + this.fragment);
            }
            if (!this.options.silent) return this.loadUrl();
        },
        stop: function() {
            $(window).unbind("popstate", this.checkUrl).unbind("hashchange", this.checkUrl);
            clearInterval(this._checkUrlInterval);
            History.started = false;
        },
        route: function(route, callback) {
            this.handlers.unshift({
                route: route,
                callback: callback
            });
        },
        checkUrl: function(e) {
            var current = this.getFragment();
            if (current == this.fragment && this.iframe) current = this.getFragment(this.getHash(this.iframe));
            if (current == this.fragment) return false;
            if (this.iframe) this.navigate(current);
            this.loadUrl() || this.loadUrl(this.getHash());
        },
        loadUrl: function(fragmentOverride) {
            var fragment = this.fragment = this.getFragment(fragmentOverride);
            var matched = _.any(this.handlers, function(handler) {
                if (handler.route.test(fragment)) {
                    handler.callback(fragment);
                    return true;
                }
            });
            return matched;
        },
        navigate: function(fragment, options) {
            if (!History.started) return false;
            if (!options || true === options) options = {
                trigger: options
            };
            var frag = (fragment || "").replace(routeStripper, "");
            if (this.fragment == frag) return;
            if (this._hasPushState) {
                if (0 != frag.indexOf(this.options.root)) frag = this.options.root + frag;
                this.fragment = frag;
                window.history[options.replace ? "replaceState" : "pushState"]({}, document.title, frag);
            } else if (this._wantsHashChange) {
                this.fragment = frag;
                this._updateHash(window.location, frag, options.replace);
                if (this.iframe && frag != this.getFragment(this.getHash(this.iframe))) {
                    if (!options.replace) this.iframe.document.open().close();
                    this._updateHash(this.iframe.location, frag, options.replace);
                }
            } else window.location.assign(this.options.root + fragment);
            if (options.trigger) this.loadUrl(fragment);
        },
        _updateHash: function(location, fragment, replace) {
            if (replace) location.replace(location.toString().replace(/(javascript:|#).*$/, "") + "#" + fragment); else location.hash = fragment;
        }
    });
    var View = Backbone.View = function(options) {
        this.cid = _.uniqueId("view");
        this._configure(options || {});
        this._ensureElement();
        this.initialize.apply(this, arguments);
        this.delegateEvents();
    };
    var delegateEventSplitter = /^(\S+)\s*(.*)$/;
    var viewOptions = [ "model", "collection", "el", "id", "attributes", "className", "tagName" ];
    _.extend(View.prototype, Events, {
        tagName: "div",
        $: function(selector) {
            return this.$el.find(selector);
        },
        initialize: function() {},
        render: function() {
            return this;
        },
        remove: function() {
            this.$el.remove();
            return this;
        },
        make: function(tagName, attributes, content) {
            var el = document.createElement(tagName);
            if (attributes) $(el).attr(attributes);
            if (content) $(el).html(content);
            return el;
        },
        setElement: function(element, delegate) {
            if (this.$el) this.undelegateEvents();
            this.$el = element instanceof $ ? element : $(element);
            this.el = this.$el[0];
            if (false !== delegate) this.delegateEvents();
            return this;
        },
        delegateEvents: function(events) {
            if (!(events || (events = getValue(this, "events")))) return;
            this.undelegateEvents();
            for (var key in events) {
                var method = events[key];
                if (!_.isFunction(method)) method = this[events[key]];
                if (!method) throw new Error('Method "' + events[key] + '" does not exist');
                var match = key.match(delegateEventSplitter);
                var eventName = match[1], selector = match[2];
                method = _.bind(method, this);
                eventName += ".delegateEvents" + this.cid;
                if ("" === selector) this.$el.bind(eventName, method); else this.$el.delegate(selector, eventName, method);
            }
        },
        undelegateEvents: function() {
            this.$el.unbind(".delegateEvents" + this.cid);
        },
        _configure: function(options) {
            if (this.options) options = _.extend({}, this.options, options);
            for (var i = 0, l = viewOptions.length; i < l; i++) {
                var attr = viewOptions[i];
                if (options[attr]) this[attr] = options[attr];
            }
            this.options = options;
        },
        _ensureElement: function() {
            if (!this.el) {
                var attrs = getValue(this, "attributes") || {};
                if (this.id) attrs.id = this.id;
                if (this.className) attrs["class"] = this.className;
                this.setElement(this.make(this.tagName, attrs), false);
            } else this.setElement(this.el, false);
        }
    });
    var extend = function(protoProps, classProps) {
        var child = inherits(this, protoProps, classProps);
        child.extend = this.extend;
        return child;
    };
    Model.extend = Collection.extend = Router.extend = View.extend = extend;
    var methodMap = {
        create: "POST",
        update: "PUT",
        "delete": "DELETE",
        read: "GET"
    };
    Backbone.sync = function(method, model, options) {
        var type = methodMap[method];
        options || (options = {});
        var params = {
            type: type,
            dataType: "json"
        };
        if (!options.url) params.url = getValue(model, "url") || urlError();
        if (!options.data && model && ("create" == method || "update" == method)) {
            params.contentType = "application/json";
            params.data = JSON.stringify(model.toJSON());
        }
        if (Backbone.emulateJSON) {
            params.contentType = "application/x-www-form-urlencoded";
            params.data = params.data ? {
                model: params.data
            } : {};
        }
        if (Backbone.emulateHTTP) if ("PUT" === type || "DELETE" === type) {
            if (Backbone.emulateJSON) params.data._method = type;
            params.type = "POST";
            params.beforeSend = function(xhr) {
                xhr.setRequestHeader("X-HTTP-Method-Override", type);
            };
        }
        if ("GET" !== params.type && !Backbone.emulateJSON) params.processData = false;
        return $.ajax(_.extend(params, options));
    };
    Backbone.wrapError = function(onError, originalModel, options) {
        return function(model, resp) {
            resp = model === originalModel ? resp : model;
            if (onError) onError(originalModel, resp, options); else originalModel.trigger("error", originalModel, resp, options);
        };
    };
    var ctor = function() {};
    var inherits = function(parent, protoProps, staticProps) {
        var child;
        if (protoProps && protoProps.hasOwnProperty("constructor")) child = protoProps.constructor; else child = function() {
            parent.apply(this, arguments);
        };
        _.extend(child, parent);
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        if (protoProps) _.extend(child.prototype, protoProps);
        if (staticProps) _.extend(child, staticProps);
        child.prototype.constructor = child;
        child.__super__ = parent.prototype;
        return child;
    };
    var getValue = function(object, prop) {
        if (!(object && object[prop])) return null;
        return _.isFunction(object[prop]) ? object[prop]() : object[prop];
    };
    var urlError = function() {
        throw new Error('A "url" property or function must be specified');
    };
}).call(this);

var JSON;

if (!JSON) JSON = {};

(function() {
    "use strict";
    function f(n) {
        return n < 10 ? "0" + n : n;
    }
    if ("function" !== typeof Date.prototype.toJSON) {
        Date.prototype.toJSON = function(key) {
            return isFinite(this.valueOf()) ? this.getUTCFullYear() + "-" + f(this.getUTCMonth() + 1) + "-" + f(this.getUTCDate()) + "T" + f(this.getUTCHours()) + ":" + f(this.getUTCMinutes()) + ":" + f(this.getUTCSeconds()) + "Z" : null;
        };
        String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function(key) {
            return this.valueOf();
        };
    }
    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, gap, indent, meta = {
        "\b": "\\b",
        "	": "\\t",
        "\n": "\\n",
        "\f": "\\f",
        "\r": "\\r",
        '"': '\\"',
        "\\": "\\\\"
    }, rep;
    function quote(string) {
        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function(a) {
            var c = meta[a];
            return "string" === typeof c ? c : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + string + '"';
    }
    function str(key, holder) {
        var i, k, v, length, mind = gap, partial, value = holder[key];
        if (value && "object" === typeof value && "function" === typeof value.toJSON) value = value.toJSON(key);
        if ("function" === typeof rep) value = rep.call(holder, key, value);
        switch (typeof value) {
          case "string":
            return quote(value);

          case "number":
            return isFinite(value) ? String(value) : "null";

          case "boolean":
          case "null":
            return String(value);

          case "object":
            if (!value) return "null";
            gap += indent;
            partial = [];
            if ("[object Array]" === Object.prototype.toString.apply(value)) {
                length = value.length;
                for (i = 0; i < length; i += 1) partial[i] = str(i, value) || "null";
                v = 0 === partial.length ? "[]" : gap ? "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]" : "[" + partial.join(",") + "]";
                gap = mind;
                return v;
            }
            if (rep && "object" === typeof rep) {
                length = rep.length;
                for (i = 0; i < length; i += 1) if ("string" === typeof rep[i]) {
                    k = rep[i];
                    v = str(k, value);
                    if (v) partial.push(quote(k) + (gap ? ": " : ":") + v);
                }
            } else for (k in value) if (Object.prototype.hasOwnProperty.call(value, k)) {
                v = str(k, value);
                if (v) partial.push(quote(k) + (gap ? ": " : ":") + v);
            }
            v = 0 === partial.length ? "{}" : gap ? "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}" : "{" + partial.join(",") + "}";
            gap = mind;
            return v;
        }
    }
    if ("function" !== typeof JSON.stringify) JSON.stringify = function(value, replacer, space) {
        var i;
        gap = "";
        indent = "";
        if ("number" === typeof space) for (i = 0; i < space; i += 1) indent += " "; else if ("string" === typeof space) indent = space;
        rep = replacer;
        if (replacer && "function" !== typeof replacer && ("object" !== typeof replacer || "number" !== typeof replacer.length)) throw new Error("JSON.stringify");
        return str("", {
            "": value
        });
    };
    if ("function" !== typeof JSON.parse) JSON.parse = function(text, reviver) {
        var j;
        function walk(holder, key) {
            var k, v, value = holder[key];
            if (value && "object" === typeof value) for (k in value) if (Object.prototype.hasOwnProperty.call(value, k)) {
                v = walk(value, k);
                if (void 0 !== v) value[k] = v; else delete value[k];
            }
            return reviver.call(holder, key, value);
        }
        text = String(text);
        cx.lastIndex = 0;
        if (cx.test(text)) text = text.replace(cx, function(a) {
            return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
        });
        if (/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) {
            j = eval("(" + text + ")");
            return "function" === typeof reviver ? walk({
                "": j
            }, "") : j;
        }
        throw new SyntaxError("JSON.parse");
    };
})();

!function($) {
    "use strict";
    $(function() {
        $.support.transition = function() {
            var transitionEnd = function() {
                var el = document.createElement("bootstrap"), transEndEventNames = {
                    WebkitTransition: "webkitTransitionEnd",
                    MozTransition: "transitionend",
                    OTransition: "oTransitionEnd otransitionend",
                    transition: "transitionend"
                }, name;
                for (name in transEndEventNames) if (void 0 !== el.style[name]) return transEndEventNames[name];
            }();
            return transitionEnd && {
                end: transitionEnd
            };
        }();
    });
}(window.jQuery);

!function($) {
    "use strict";
    var dismiss = '[data-dismiss="alert"]', Alert = function(el) {
        $(el).on("click", dismiss, this.close);
    };
    Alert.prototype.close = function(e) {
        var $this = $(this), selector = $this.attr("data-target"), $parent;
        if (!selector) {
            selector = $this.attr("href");
            selector = selector && selector.replace(/.*(?=#[^\s]*$)/, "");
        }
        $parent = $(selector);
        e && e.preventDefault();
        $parent.length || ($parent = $this.hasClass("alert") ? $this : $this.parent());
        $parent.trigger(e = $.Event("close"));
        if (e.isDefaultPrevented()) return;
        $parent.removeClass("in");
        function removeElement() {
            $parent.trigger("closed").remove();
        }
        $.support.transition && $parent.hasClass("fade") ? $parent.on($.support.transition.end, removeElement) : removeElement();
    };
    var old = $.fn.alert;
    $.fn.alert = function(option) {
        return this.each(function() {
            var $this = $(this), data = $this.data("alert");
            if (!data) $this.data("alert", data = new Alert(this));
            if ("string" == typeof option) data[option].call($this);
        });
    };
    $.fn.alert.Constructor = Alert;
    $.fn.alert.noConflict = function() {
        $.fn.alert = old;
        return this;
    };
    $(document).on("click.alert.data-api", dismiss, Alert.prototype.close);
}(window.jQuery);

!function($) {
    "use strict";
    var Button = function(element, options) {
        this.$element = $(element);
        this.options = $.extend({}, $.fn.button.defaults, options);
    };
    Button.prototype.setState = function(state) {
        var d = "disabled", $el = this.$element, data = $el.data(), val = $el.is("input") ? "val" : "html";
        state += "Text";
        data.resetText || $el.data("resetText", $el[val]());
        $el[val](data[state] || this.options[state]);
        setTimeout(function() {
            "loadingText" == state ? $el.addClass(d).attr(d, d) : $el.removeClass(d).removeAttr(d);
        }, 0);
    };
    Button.prototype.toggle = function() {
        var $parent = this.$element.closest('[data-toggle="buttons-radio"]');
        $parent && $parent.find(".active").removeClass("active");
        this.$element.toggleClass("active");
    };
    var old = $.fn.button;
    $.fn.button = function(option) {
        return this.each(function() {
            var $this = $(this), data = $this.data("button"), options = "object" == typeof option && option;
            if (!data) $this.data("button", data = new Button(this, options));
            if ("toggle" == option) data.toggle(); else if (option) data.setState(option);
        });
    };
    $.fn.button.defaults = {
        loadingText: "loading..."
    };
    $.fn.button.Constructor = Button;
    $.fn.button.noConflict = function() {
        $.fn.button = old;
        return this;
    };
    $(document).on("click.button.data-api", "[data-toggle^=button]", function(e) {
        var $btn = $(e.target);
        if (!$btn.hasClass("btn")) $btn = $btn.closest(".btn");
        $btn.button("toggle");
    });
}(window.jQuery);

!function($) {
    "use strict";
    var Carousel = function(element, options) {
        this.$element = $(element);
        this.$indicators = this.$element.find(".carousel-indicators");
        this.options = options;
        "hover" == this.options.pause && this.$element.on("mouseenter", $.proxy(this.pause, this)).on("mouseleave", $.proxy(this.cycle, this));
    };
    Carousel.prototype = {
        cycle: function(e) {
            if (!e) this.paused = false;
            if (this.interval) clearInterval(this.interval);
            this.options.interval && !this.paused && (this.interval = setInterval($.proxy(this.next, this), this.options.interval));
            return this;
        },
        getActiveIndex: function() {
            this.$active = this.$element.find(".item.active");
            this.$items = this.$active.parent().children();
            return this.$items.index(this.$active);
        },
        to: function(pos) {
            var activeIndex = this.getActiveIndex(), that = this;
            if (pos > this.$items.length - 1 || pos < 0) return;
            if (this.sliding) return this.$element.one("slid", function() {
                that.to(pos);
            });
            if (activeIndex == pos) return this.pause().cycle();
            return this.slide(pos > activeIndex ? "next" : "prev", $(this.$items[pos]));
        },
        pause: function(e) {
            if (!e) this.paused = true;
            if (this.$element.find(".next, .prev").length && $.support.transition.end) {
                this.$element.trigger($.support.transition.end);
                this.cycle(true);
            }
            clearInterval(this.interval);
            this.interval = null;
            return this;
        },
        next: function() {
            if (this.sliding) return;
            return this.slide("next");
        },
        prev: function() {
            if (this.sliding) return;
            return this.slide("prev");
        },
        slide: function(type, next) {
            var $active = this.$element.find(".item.active"), $next = next || $active[type](), isCycling = this.interval, direction = "next" == type ? "left" : "right", fallback = "next" == type ? "first" : "last", that = this, e;
            this.sliding = true;
            isCycling && this.pause();
            $next = $next.length ? $next : this.$element.find(".item")[fallback]();
            e = $.Event("slide", {
                relatedTarget: $next[0],
                direction: direction
            });
            if ($next.hasClass("active")) return;
            if (this.$indicators.length) {
                this.$indicators.find(".active").removeClass("active");
                this.$element.one("slid", function() {
                    var $nextIndicator = $(that.$indicators.children()[that.getActiveIndex()]);
                    $nextIndicator && $nextIndicator.addClass("active");
                });
            }
            if ($.support.transition && this.$element.hasClass("slide")) {
                this.$element.trigger(e);
                if (e.isDefaultPrevented()) return;
                $next.addClass(type);
                $next[0].offsetWidth;
                $active.addClass(direction);
                $next.addClass(direction);
                this.$element.one($.support.transition.end, function() {
                    $next.removeClass([ type, direction ].join(" ")).addClass("active");
                    $active.removeClass([ "active", direction ].join(" "));
                    that.sliding = false;
                    setTimeout(function() {
                        that.$element.trigger("slid");
                    }, 0);
                });
            } else {
                this.$element.trigger(e);
                if (e.isDefaultPrevented()) return;
                $active.removeClass("active");
                $next.addClass("active");
                this.sliding = false;
                this.$element.trigger("slid");
            }
            isCycling && this.cycle();
            return this;
        }
    };
    var old = $.fn.carousel;
    $.fn.carousel = function(option) {
        return this.each(function() {
            var $this = $(this), data = $this.data("carousel"), options = $.extend({}, $.fn.carousel.defaults, "object" == typeof option && option), action = "string" == typeof option ? option : options.slide;
            if (!data) $this.data("carousel", data = new Carousel(this, options));
            if ("number" == typeof option) data.to(option); else if (action) data[action](); else if (options.interval) data.pause().cycle();
        });
    };
    $.fn.carousel.defaults = {
        interval: 5e3,
        pause: "hover"
    };
    $.fn.carousel.Constructor = Carousel;
    $.fn.carousel.noConflict = function() {
        $.fn.carousel = old;
        return this;
    };
    $(document).on("click.carousel.data-api", "[data-slide], [data-slide-to]", function(e) {
        var $this = $(this), href, $target = $($this.attr("data-target") || (href = $this.attr("href")) && href.replace(/.*(?=#[^\s]+$)/, "")), options = $.extend({}, $target.data(), $this.data()), slideIndex;
        $target.carousel(options);
        if (slideIndex = $this.attr("data-slide-to")) $target.data("carousel").pause().to(slideIndex).cycle();
        e.preventDefault();
    });
}(window.jQuery);

!function($) {
    "use strict";
    var Collapse = function(element, options) {
        this.$element = $(element);
        this.options = $.extend({}, $.fn.collapse.defaults, options);
        if (this.options.parent) this.$parent = $(this.options.parent);
        this.options.toggle && this.toggle();
    };
    Collapse.prototype = {
        constructor: Collapse,
        dimension: function() {
            var hasWidth = this.$element.hasClass("width");
            return hasWidth ? "width" : "height";
        },
        show: function() {
            var dimension, scroll, actives, hasData;
            if (this.transitioning || this.$element.hasClass("in")) return;
            dimension = this.dimension();
            scroll = $.camelCase([ "scroll", dimension ].join("-"));
            actives = this.$parent && this.$parent.find("> .accordion-group > .in");
            if (actives && actives.length) {
                hasData = actives.data("collapse");
                if (hasData && hasData.transitioning) return;
                actives.collapse("hide");
                hasData || actives.data("collapse", null);
            }
            this.$element[dimension](0);
            this.transition("addClass", $.Event("show"), "shown");
            $.support.transition && this.$element[dimension](this.$element[0][scroll]);
        },
        hide: function() {
            var dimension;
            if (this.transitioning || !this.$element.hasClass("in")) return;
            dimension = this.dimension();
            this.reset(this.$element[dimension]());
            this.transition("removeClass", $.Event("hide"), "hidden");
            this.$element[dimension](0);
        },
        reset: function(size) {
            var dimension = this.dimension();
            this.$element.removeClass("collapse")[dimension](size || "auto")[0].offsetWidth;
            this.$element[null !== size ? "addClass" : "removeClass"]("collapse");
            return this;
        },
        transition: function(method, startEvent, completeEvent) {
            var that = this, complete = function() {
                if ("show" == startEvent.type) that.reset();
                that.transitioning = 0;
                that.$element.trigger(completeEvent);
            };
            this.$element.trigger(startEvent);
            if (startEvent.isDefaultPrevented()) return;
            this.transitioning = 1;
            this.$element[method]("in");
            $.support.transition && this.$element.hasClass("collapse") ? this.$element.one($.support.transition.end, complete) : complete();
        },
        toggle: function() {
            this[this.$element.hasClass("in") ? "hide" : "show"]();
        }
    };
    var old = $.fn.collapse;
    $.fn.collapse = function(option) {
        return this.each(function() {
            var $this = $(this), data = $this.data("collapse"), options = $.extend({}, $.fn.collapse.defaults, $this.data(), "object" == typeof option && option);
            if (!data) $this.data("collapse", data = new Collapse(this, options));
            if ("string" == typeof option) data[option]();
        });
    };
    $.fn.collapse.defaults = {
        toggle: true
    };
    $.fn.collapse.Constructor = Collapse;
    $.fn.collapse.noConflict = function() {
        $.fn.collapse = old;
        return this;
    };
    $(document).on("click.collapse.data-api", "[data-toggle=collapse]", function(e) {
        var $this = $(this), href, target = $this.attr("data-target") || e.preventDefault() || (href = $this.attr("href")) && href.replace(/.*(?=#[^\s]+$)/, ""), option = $(target).data("collapse") ? "toggle" : $this.data();
        $this[$(target).hasClass("in") ? "addClass" : "removeClass"]("collapsed");
        $(target).collapse(option);
    });
}(window.jQuery);

!function($) {
    "use strict";
    var toggle = "[data-toggle=dropdown]", Dropdown = function(element) {
        var $el = $(element).on("click.dropdown.data-api", this.toggle);
        $("html").on("click.dropdown.data-api", function() {
            $el.parent().removeClass("open");
        });
    };
    Dropdown.prototype = {
        constructor: Dropdown,
        toggle: function(e) {
            var $this = $(this), $parent, isActive;
            if ($this.is(".disabled, :disabled")) return;
            $parent = getParent($this);
            isActive = $parent.hasClass("open");
            clearMenus();
            if (!isActive) $parent.toggleClass("open");
            $this.focus();
            return false;
        },
        keydown: function(e) {
            var $this, $items, $active, $parent, isActive, index;
            if (!/(38|40|27)/.test(e.keyCode)) return;
            $this = $(this);
            e.preventDefault();
            e.stopPropagation();
            if ($this.is(".disabled, :disabled")) return;
            $parent = getParent($this);
            isActive = $parent.hasClass("open");
            if (!isActive || isActive && 27 == e.keyCode) {
                if (27 == e.which) $parent.find(toggle).focus();
                return $this.click();
            }
            $items = $("[role=menu] li:not(.divider):visible a", $parent);
            if (!$items.length) return;
            index = $items.index($items.filter(":focus"));
            if (38 == e.keyCode && index > 0) index--;
            if (40 == e.keyCode && index < $items.length - 1) index++;
            if (!~index) index = 0;
            $items.eq(index).focus();
        }
    };
    function clearMenus() {
        $(toggle).each(function() {
            getParent($(this)).removeClass("open");
        });
    }
    function getParent($this) {
        var selector = $this.attr("data-target"), $parent;
        if (!selector) {
            selector = $this.attr("href");
            selector = selector && /#/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, "");
        }
        $parent = selector && $(selector);
        if (!$parent || !$parent.length) $parent = $this.parent();
        return $parent;
    }
    var old = $.fn.dropdown;
    $.fn.dropdown = function(option) {
        return this.each(function() {
            var $this = $(this), data = $this.data("dropdown");
            if (!data) $this.data("dropdown", data = new Dropdown(this));
            if ("string" == typeof option) data[option].call($this);
        });
    };
    $.fn.dropdown.Constructor = Dropdown;
    $.fn.dropdown.noConflict = function() {
        $.fn.dropdown = old;
        return this;
    };
    $(document).on("click.dropdown.data-api", clearMenus).on("click.dropdown.data-api", ".dropdown form", function(e) {
        e.stopPropagation();
    }).on("click.dropdown.data-api", ".dropdown-menu", function(e) {
        e.stopPropagation();
    }).on("click.dropdown.data-api", toggle, Dropdown.prototype.toggle).on("keydown.dropdown.data-api", toggle + ", [role=menu]", Dropdown.prototype.keydown);
}(window.jQuery);

!function($) {
    "use strict";
    var Modal = function(element, options) {
        this.options = options;
        this.$element = $(element).delegate('[data-dismiss="modal"]', "click.dismiss.modal", $.proxy(this.hide, this));
        this.options.remote && this.$element.find(".modal-body").load(this.options.remote);
    };
    Modal.prototype = {
        constructor: Modal,
        toggle: function() {
            return this[!this.isShown ? "show" : "hide"]();
        },
        show: function() {
            var that = this, e = $.Event("show");
            this.$element.trigger(e);
            if (this.isShown || e.isDefaultPrevented()) return;
            this.isShown = true;
            this.escape();
            this.backdrop(function() {
                var transition = $.support.transition && that.$element.hasClass("fade");
                if (!that.$element.parent().length) that.$element.appendTo(document.body);
                that.$element.show();
                if (transition) that.$element[0].offsetWidth;
                that.$element.addClass("in").attr("aria-hidden", false);
                that.enforceFocus();
                transition ? that.$element.one($.support.transition.end, function() {
                    that.$element.focus().trigger("shown");
                }) : that.$element.focus().trigger("shown");
            });
        },
        hide: function(e) {
            e && e.preventDefault();
            var that = this;
            e = $.Event("hide");
            this.$element.trigger(e);
            if (!this.isShown || e.isDefaultPrevented()) return;
            this.isShown = false;
            this.escape();
            $(document).off("focusin.modal");
            this.$element.removeClass("in").attr("aria-hidden", true);
            $.support.transition && this.$element.hasClass("fade") ? this.hideWithTransition() : this.hideModal();
        },
        enforceFocus: function() {
            var that = this;
            $(document).on("focusin.modal", function(e) {
                if (that.$element[0] !== e.target && !that.$element.has(e.target).length) that.$element.focus();
            });
        },
        escape: function() {
            var that = this;
            if (this.isShown && this.options.keyboard) this.$element.on("keyup.dismiss.modal", function(e) {
                27 == e.which && that.hide();
            }); else if (!this.isShown) this.$element.off("keyup.dismiss.modal");
        },
        hideWithTransition: function() {
            var that = this, timeout = setTimeout(function() {
                that.$element.off($.support.transition.end);
                that.hideModal();
            }, 500);
            this.$element.one($.support.transition.end, function() {
                clearTimeout(timeout);
                that.hideModal();
            });
        },
        hideModal: function() {
            var that = this;
            this.$element.hide();
            this.backdrop(function() {
                that.removeBackdrop();
                that.$element.trigger("hidden");
            });
        },
        removeBackdrop: function() {
            this.$backdrop && this.$backdrop.remove();
            this.$backdrop = null;
        },
        backdrop: function(callback) {
            var that = this, animate = this.$element.hasClass("fade") ? "fade" : "";
            if (this.isShown && this.options.backdrop) {
                var doAnimate = $.support.transition && animate;
                this.$backdrop = $('<div class="modal-backdrop ' + animate + '" />').appendTo(document.body);
                this.$backdrop.click("static" == this.options.backdrop ? $.proxy(this.$element[0].focus, this.$element[0]) : $.proxy(this.hide, this));
                if (doAnimate) this.$backdrop[0].offsetWidth;
                this.$backdrop.addClass("in");
                if (!callback) return;
                doAnimate ? this.$backdrop.one($.support.transition.end, callback) : callback();
            } else if (!this.isShown && this.$backdrop) {
                this.$backdrop.removeClass("in");
                $.support.transition && this.$element.hasClass("fade") ? this.$backdrop.one($.support.transition.end, callback) : callback();
            } else if (callback) callback();
        }
    };
    var old = $.fn.modal;
    $.fn.modal = function(option) {
        return this.each(function() {
            var $this = $(this), data = $this.data("modal"), options = $.extend({}, $.fn.modal.defaults, $this.data(), "object" == typeof option && option);
            if (!data) $this.data("modal", data = new Modal(this, options));
            if ("string" == typeof option) data[option](); else if (options.show) data.show();
        });
    };
    $.fn.modal.defaults = {
        backdrop: true,
        keyboard: true,
        show: true
    };
    $.fn.modal.Constructor = Modal;
    $.fn.modal.noConflict = function() {
        $.fn.modal = old;
        return this;
    };
    $(document).on("click.modal.data-api", '[data-toggle="modal"]', function(e) {
        var $this = $(this), href = $this.attr("href"), $target = $($this.attr("data-target") || href && href.replace(/.*(?=#[^\s]+$)/, "")), option = $target.data("modal") ? "toggle" : $.extend({
            remote: !/#/.test(href) && href
        }, $target.data(), $this.data());
        e.preventDefault();
        $target.modal(option).one("hide", function() {
            $this.focus();
        });
    });
}(window.jQuery);

!function($) {
    "use strict";
    var Tooltip = function(element, options) {
        this.init("tooltip", element, options);
    };
    Tooltip.prototype = {
        constructor: Tooltip,
        init: function(type, element, options) {
            var eventIn, eventOut, triggers, trigger, i;
            this.type = type;
            this.$element = $(element);
            this.options = this.getOptions(options);
            this.enabled = true;
            triggers = this.options.trigger.split(" ");
            for (i = triggers.length; i--; ) {
                trigger = triggers[i];
                if ("click" == trigger) this.$element.on("click." + this.type, this.options.selector, $.proxy(this.toggle, this)); else if ("manual" != trigger) {
                    eventIn = "hover" == trigger ? "mouseenter" : "focus";
                    eventOut = "hover" == trigger ? "mouseleave" : "blur";
                    this.$element.on(eventIn + "." + this.type, this.options.selector, $.proxy(this.enter, this));
                    this.$element.on(eventOut + "." + this.type, this.options.selector, $.proxy(this.leave, this));
                }
            }
            this.options.selector ? this._options = $.extend({}, this.options, {
                trigger: "manual",
                selector: ""
            }) : this.fixTitle();
        },
        getOptions: function(options) {
            options = $.extend({}, $.fn[this.type].defaults, this.$element.data(), options);
            if (options.delay && "number" == typeof options.delay) options.delay = {
                show: options.delay,
                hide: options.delay
            };
            return options;
        },
        enter: function(e) {
            var defaults = $.fn[this.type].defaults, options = {}, self;
            this._options && $.each(this._options, function(key, value) {
                if (defaults[key] != value) options[key] = value;
            }, this);
            self = $(e.currentTarget)[this.type](options).data(this.type);
            if (!self.options.delay || !self.options.delay.show) return self.show();
            clearTimeout(this.timeout);
            self.hoverState = "in";
            this.timeout = setTimeout(function() {
                if ("in" == self.hoverState) self.show();
            }, self.options.delay.show);
        },
        leave: function(e) {
            var self = $(e.currentTarget)[this.type](this._options).data(this.type);
            if (this.timeout) clearTimeout(this.timeout);
            if (!self.options.delay || !self.options.delay.hide) return self.hide();
            self.hoverState = "out";
            this.timeout = setTimeout(function() {
                if ("out" == self.hoverState) self.hide();
            }, self.options.delay.hide);
        },
        show: function() {
            var $tip, pos, actualWidth, actualHeight, placement, tp, e = $.Event("show");
            if (this.hasContent() && this.enabled) {
                this.$element.trigger(e);
                if (e.isDefaultPrevented()) return;
                $tip = this.tip();
                this.setContent();
                if (this.options.animation) $tip.addClass("fade");
                placement = "function" == typeof this.options.placement ? this.options.placement.call(this, $tip[0], this.$element[0]) : this.options.placement;
                $tip.detach().css({
                    top: 0,
                    left: 0,
                    display: "block"
                });
                this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element);
                pos = this.getPosition();
                actualWidth = $tip[0].offsetWidth;
                actualHeight = $tip[0].offsetHeight;
                switch (placement) {
                  case "bottom":
                    tp = {
                        top: pos.top + pos.height,
                        left: pos.left + pos.width / 2 - actualWidth / 2
                    };
                    break;

                  case "top":
                    tp = {
                        top: pos.top - actualHeight,
                        left: pos.left + pos.width / 2 - actualWidth / 2
                    };
                    break;

                  case "left":
                    tp = {
                        top: pos.top + pos.height / 2 - actualHeight / 2,
                        left: pos.left - actualWidth
                    };
                    break;

                  case "right":
                    tp = {
                        top: pos.top + pos.height / 2 - actualHeight / 2,
                        left: pos.left + pos.width
                    };
                }
                this.applyPlacement(tp, placement);
                this.$element.trigger("shown");
            }
        },
        applyPlacement: function(offset, placement) {
            var $tip = this.tip(), width = $tip[0].offsetWidth, height = $tip[0].offsetHeight, actualWidth, actualHeight, delta, replace;
            $tip.offset(offset).addClass(placement).addClass("in");
            actualWidth = $tip[0].offsetWidth;
            actualHeight = $tip[0].offsetHeight;
            if ("top" == placement && actualHeight != height) {
                offset.top = offset.top + height - actualHeight;
                replace = true;
            }
            if ("bottom" == placement || "top" == placement) {
                delta = 0;
                if (offset.left < 0) {
                    delta = offset.left * -2;
                    offset.left = 0;
                    $tip.offset(offset);
                    actualWidth = $tip[0].offsetWidth;
                    actualHeight = $tip[0].offsetHeight;
                }
                this.replaceArrow(delta - width + actualWidth, actualWidth, "left");
            } else this.replaceArrow(actualHeight - height, actualHeight, "top");
            if (replace) $tip.offset(offset);
        },
        replaceArrow: function(delta, dimension, position) {
            this.arrow().css(position, delta ? 50 * (1 - delta / dimension) + "%" : "");
        },
        setContent: function() {
            var $tip = this.tip(), title = this.getTitle();
            $tip.find(".tooltip-inner")[this.options.html ? "html" : "text"](title);
            $tip.removeClass("fade in top bottom left right");
        },
        hide: function() {
            var that = this, $tip = this.tip(), e = $.Event("hide");
            this.$element.trigger(e);
            if (e.isDefaultPrevented()) return;
            $tip.removeClass("in");
            function removeWithAnimation() {
                var timeout = setTimeout(function() {
                    $tip.off($.support.transition.end).detach();
                }, 500);
                $tip.one($.support.transition.end, function() {
                    clearTimeout(timeout);
                    $tip.detach();
                });
            }
            $.support.transition && this.$tip.hasClass("fade") ? removeWithAnimation() : $tip.detach();
            this.$element.trigger("hidden");
            return this;
        },
        fixTitle: function() {
            var $e = this.$element;
            if ($e.attr("title") || "string" != typeof $e.attr("data-original-title")) $e.attr("data-original-title", $e.attr("title") || "").attr("title", "");
        },
        hasContent: function() {
            return this.getTitle();
        },
        getPosition: function() {
            var el = this.$element[0];
            return $.extend({}, "function" == typeof el.getBoundingClientRect ? el.getBoundingClientRect() : {
                width: el.offsetWidth,
                height: el.offsetHeight
            }, this.$element.offset());
        },
        getTitle: function() {
            var title, $e = this.$element, o = this.options;
            title = $e.attr("data-original-title") || ("function" == typeof o.title ? o.title.call($e[0]) : o.title);
            return title;
        },
        tip: function() {
            return this.$tip = this.$tip || $(this.options.template);
        },
        arrow: function() {
            return this.$arrow = this.$arrow || this.tip().find(".tooltip-arrow");
        },
        validate: function() {
            if (!this.$element[0].parentNode) {
                this.hide();
                this.$element = null;
                this.options = null;
            }
        },
        enable: function() {
            this.enabled = true;
        },
        disable: function() {
            this.enabled = false;
        },
        toggleEnabled: function() {
            this.enabled = !this.enabled;
        },
        toggle: function(e) {
            var self = e ? $(e.currentTarget)[this.type](this._options).data(this.type) : this;
            self.tip().hasClass("in") ? self.hide() : self.show();
        },
        destroy: function() {
            this.hide().$element.off("." + this.type).removeData(this.type);
        }
    };
    var old = $.fn.tooltip;
    $.fn.tooltip = function(option) {
        return this.each(function() {
            var $this = $(this), data = $this.data("tooltip"), options = "object" == typeof option && option;
            if (!data) $this.data("tooltip", data = new Tooltip(this, options));
            if ("string" == typeof option) data[option]();
        });
    };
    $.fn.tooltip.Constructor = Tooltip;
    $.fn.tooltip.defaults = {
        animation: true,
        placement: "top",
        selector: false,
        template: '<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
        trigger: "hover focus",
        title: "",
        delay: 0,
        html: false,
        container: false
    };
    $.fn.tooltip.noConflict = function() {
        $.fn.tooltip = old;
        return this;
    };
}(window.jQuery);

!function($) {
    "use strict";
    var Popover = function(element, options) {
        this.init("popover", element, options);
    };
    Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype, {
        constructor: Popover,
        setContent: function() {
            var $tip = this.tip(), title = this.getTitle(), content = this.getContent();
            $tip.find(".popover-title")[this.options.html ? "html" : "text"](title);
            $tip.find(".popover-content")[this.options.html ? "html" : "text"](content);
            $tip.removeClass("fade top bottom left right in");
        },
        hasContent: function() {
            return this.getTitle() || this.getContent();
        },
        getContent: function() {
            var content, $e = this.$element, o = this.options;
            content = ("function" == typeof o.content ? o.content.call($e[0]) : o.content) || $e.attr("data-content");
            return content;
        },
        tip: function() {
            if (!this.$tip) this.$tip = $(this.options.template);
            return this.$tip;
        },
        destroy: function() {
            this.hide().$element.off("." + this.type).removeData(this.type);
        }
    });
    var old = $.fn.popover;
    $.fn.popover = function(option) {
        return this.each(function() {
            var $this = $(this), data = $this.data("popover"), options = "object" == typeof option && option;
            if (!data) $this.data("popover", data = new Popover(this, options));
            if ("string" == typeof option) data[option]();
        });
    };
    $.fn.popover.Constructor = Popover;
    $.fn.popover.defaults = $.extend({}, $.fn.tooltip.defaults, {
        placement: "right",
        trigger: "click",
        content: "",
        template: '<div class="popover"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
    });
    $.fn.popover.noConflict = function() {
        $.fn.popover = old;
        return this;
    };
}(window.jQuery);

!function($) {
    "use strict";
    function ScrollSpy(element, options) {
        var process = $.proxy(this.process, this), $element = $(element).is("body") ? $(window) : $(element), href;
        this.options = $.extend({}, $.fn.scrollspy.defaults, options);
        this.$scrollElement = $element.on("scroll.scroll-spy.data-api", process);
        this.selector = (this.options.target || (href = $(element).attr("href")) && href.replace(/.*(?=#[^\s]+$)/, "") || "") + " .nav li > a";
        this.$body = $("body");
        this.refresh();
        this.process();
    }
    ScrollSpy.prototype = {
        constructor: ScrollSpy,
        refresh: function() {
            var self = this, $targets;
            this.offsets = $([]);
            this.targets = $([]);
            $targets = this.$body.find(this.selector).map(function() {
                var $el = $(this), href = $el.data("target") || $el.attr("href"), $href = /^#\w/.test(href) && $(href);
                return $href && $href.length && [ [ $href.position().top + (!$.isWindow(self.$scrollElement.get(0)) && self.$scrollElement.scrollTop()), href ] ] || null;
            }).sort(function(a, b) {
                return a[0] - b[0];
            }).each(function() {
                self.offsets.push(this[0]);
                self.targets.push(this[1]);
            });
        },
        process: function() {
            var scrollTop = this.$scrollElement.scrollTop() + this.options.offset, scrollHeight = this.$scrollElement[0].scrollHeight || this.$body[0].scrollHeight, maxScroll = scrollHeight - this.$scrollElement.height(), offsets = this.offsets, targets = this.targets, activeTarget = this.activeTarget, i;
            if (scrollTop >= maxScroll) return activeTarget != (i = targets.last()[0]) && this.activate(i);
            for (i = offsets.length; i--; ) activeTarget != targets[i] && scrollTop >= offsets[i] && (!offsets[i + 1] || scrollTop <= offsets[i + 1]) && this.activate(targets[i]);
        },
        activate: function(target) {
            var active, selector;
            this.activeTarget = target;
            $(this.selector).parent(".active").removeClass("active");
            selector = this.selector + '[data-target="' + target + '"],' + this.selector + '[href="' + target + '"]';
            active = $(selector).parent("li").addClass("active");
            if (active.parent(".dropdown-menu").length) active = active.closest("li.dropdown").addClass("active");
            active.trigger("activate");
        }
    };
    var old = $.fn.scrollspy;
    $.fn.scrollspy = function(option) {
        return this.each(function() {
            var $this = $(this), data = $this.data("scrollspy"), options = "object" == typeof option && option;
            if (!data) $this.data("scrollspy", data = new ScrollSpy(this, options));
            if ("string" == typeof option) data[option]();
        });
    };
    $.fn.scrollspy.Constructor = ScrollSpy;
    $.fn.scrollspy.defaults = {
        offset: 10
    };
    $.fn.scrollspy.noConflict = function() {
        $.fn.scrollspy = old;
        return this;
    };
    $(window).on("load", function() {
        $('[data-spy="scroll"]').each(function() {
            var $spy = $(this);
            $spy.scrollspy($spy.data());
        });
    });
}(window.jQuery);

!function($) {
    "use strict";
    var Tab = function(element) {
        this.element = $(element);
    };
    Tab.prototype = {
        constructor: Tab,
        show: function() {
            var $this = this.element, $ul = $this.closest("ul:not(.dropdown-menu)"), selector = $this.attr("data-target"), previous, $target, e;
            if (!selector) {
                selector = $this.attr("href");
                selector = selector && selector.replace(/.*(?=#[^\s]*$)/, "");
            }
            if ($this.parent("li").hasClass("active")) return;
            previous = $ul.find(".active:last a")[0];
            e = $.Event("show", {
                relatedTarget: previous
            });
            $this.trigger(e);
            if (e.isDefaultPrevented()) return;
            $target = $(selector);
            this.activate($this.parent("li"), $ul);
            this.activate($target, $target.parent(), function() {
                $this.trigger({
                    type: "shown",
                    relatedTarget: previous
                });
            });
        },
        activate: function(element, container, callback) {
            var $active = container.find("> .active"), transition = callback && $.support.transition && $active.hasClass("fade");
            function next() {
                $active.removeClass("active").find("> .dropdown-menu > .active").removeClass("active");
                element.addClass("active");
                if (transition) {
                    element[0].offsetWidth;
                    element.addClass("in");
                } else element.removeClass("fade");
                if (element.parent(".dropdown-menu")) element.closest("li.dropdown").addClass("active");
                callback && callback();
            }
            transition ? $active.one($.support.transition.end, next) : next();
            $active.removeClass("in");
        }
    };
    var old = $.fn.tab;
    $.fn.tab = function(option) {
        return this.each(function() {
            var $this = $(this), data = $this.data("tab");
            if (!data) $this.data("tab", data = new Tab(this));
            if ("string" == typeof option) data[option]();
        });
    };
    $.fn.tab.Constructor = Tab;
    $.fn.tab.noConflict = function() {
        $.fn.tab = old;
        return this;
    };
    $(document).on("click.tab.data-api", '[data-toggle="tab"], [data-toggle="pill"]', function(e) {
        e.preventDefault();
        $(this).tab("show");
    });
}(window.jQuery);

!function($) {
    "use strict";
    var Typeahead = function(element, options) {
        this.$element = $(element);
        this.options = $.extend({}, $.fn.typeahead.defaults, options);
        this.matcher = this.options.matcher || this.matcher;
        this.sorter = this.options.sorter || this.sorter;
        this.highlighter = this.options.highlighter || this.highlighter;
        this.updater = this.options.updater || this.updater;
        this.source = this.options.source;
        this.$menu = $(this.options.menu);
        this.shown = false;
        this.listen();
    };
    Typeahead.prototype = {
        constructor: Typeahead,
        select: function() {
            var val = this.$menu.find(".active").attr("data-value");
            this.$element.val(this.updater(val)).change();
            return this.hide();
        },
        updater: function(item) {
            return item;
        },
        show: function() {
            var pos = $.extend({}, this.$element.position(), {
                height: this.$element[0].offsetHeight
            });
            this.$menu.insertAfter(this.$element).css({
                top: pos.top + pos.height,
                left: pos.left
            }).show();
            this.shown = true;
            return this;
        },
        hide: function() {
            this.$menu.hide();
            this.shown = false;
            return this;
        },
        lookup: function(event) {
            var items;
            this.query = this.$element.val();
            if (!this.query || this.query.length < this.options.minLength) return this.shown ? this.hide() : this;
            items = $.isFunction(this.source) ? this.source(this.query, $.proxy(this.process, this)) : this.source;
            return items ? this.process(items) : this;
        },
        process: function(items) {
            var that = this;
            items = $.grep(items, function(item) {
                return that.matcher(item);
            });
            items = this.sorter(items);
            if (!items.length) return this.shown ? this.hide() : this;
            return this.render(items.slice(0, this.options.items)).show();
        },
        matcher: function(item) {
            return ~item.toLowerCase().indexOf(this.query.toLowerCase());
        },
        sorter: function(items) {
            var beginswith = [], caseSensitive = [], caseInsensitive = [], item;
            while (item = items.shift()) if (!item.toLowerCase().indexOf(this.query.toLowerCase())) beginswith.push(item); else if (~item.indexOf(this.query)) caseSensitive.push(item); else caseInsensitive.push(item);
            return beginswith.concat(caseSensitive, caseInsensitive);
        },
        highlighter: function(item) {
            var query = this.query.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
            return item.replace(new RegExp("(" + query + ")", "ig"), function($1, match) {
                return "<strong>" + match + "</strong>";
            });
        },
        render: function(items) {
            var that = this;
            items = $(items).map(function(i, item) {
                i = $(that.options.item).attr("data-value", item);
                i.find("a").html(that.highlighter(item));
                return i[0];
            });
            items.first().addClass("active");
            this.$menu.html(items);
            return this;
        },
        next: function(event) {
            var active = this.$menu.find(".active").removeClass("active"), next = active.next();
            if (!next.length) next = $(this.$menu.find("li")[0]);
            next.addClass("active");
        },
        prev: function(event) {
            var active = this.$menu.find(".active").removeClass("active"), prev = active.prev();
            if (!prev.length) prev = this.$menu.find("li").last();
            prev.addClass("active");
        },
        listen: function() {
            this.$element.on("focus", $.proxy(this.focus, this)).on("blur", $.proxy(this.blur, this)).on("keypress", $.proxy(this.keypress, this)).on("keyup", $.proxy(this.keyup, this));
            if (this.eventSupported("keydown")) this.$element.on("keydown", $.proxy(this.keydown, this));
            this.$menu.on("click", $.proxy(this.click, this)).on("mouseenter", "li", $.proxy(this.mouseenter, this)).on("mouseleave", "li", $.proxy(this.mouseleave, this));
        },
        eventSupported: function(eventName) {
            var isSupported = eventName in this.$element;
            if (!isSupported) {
                this.$element.setAttribute(eventName, "return;");
                isSupported = "function" === typeof this.$element[eventName];
            }
            return isSupported;
        },
        move: function(e) {
            if (!this.shown) return;
            switch (e.keyCode) {
              case 9:
              case 13:
              case 27:
                e.preventDefault();
                break;

              case 38:
                e.preventDefault();
                this.prev();
                break;

              case 40:
                e.preventDefault();
                this.next();
            }
            e.stopPropagation();
        },
        keydown: function(e) {
            this.suppressKeyPressRepeat = ~$.inArray(e.keyCode, [ 40, 38, 9, 13, 27 ]);
            this.move(e);
        },
        keypress: function(e) {
            if (this.suppressKeyPressRepeat) return;
            this.move(e);
        },
        keyup: function(e) {
            switch (e.keyCode) {
              case 40:
              case 38:
              case 16:
              case 17:
              case 18:
                break;

              case 9:
              case 13:
                if (!this.shown) return;
                this.select();
                break;

              case 27:
                if (!this.shown) return;
                this.hide();
                break;

              default:
                this.lookup();
            }
            e.stopPropagation();
            e.preventDefault();
        },
        focus: function(e) {
            this.focused = true;
        },
        blur: function(e) {
            this.focused = false;
            if (!this.mousedover && this.shown) this.hide();
        },
        click: function(e) {
            e.stopPropagation();
            e.preventDefault();
            this.select();
            this.$element.focus();
        },
        mouseenter: function(e) {
            this.mousedover = true;
            this.$menu.find(".active").removeClass("active");
            $(e.currentTarget).addClass("active");
        },
        mouseleave: function(e) {
            this.mousedover = false;
            if (!this.focused && this.shown) this.hide();
        }
    };
    var old = $.fn.typeahead;
    $.fn.typeahead = function(option) {
        return this.each(function() {
            var $this = $(this), data = $this.data("typeahead"), options = "object" == typeof option && option;
            if (!data) $this.data("typeahead", data = new Typeahead(this, options));
            if ("string" == typeof option) data[option]();
        });
    };
    $.fn.typeahead.defaults = {
        source: [],
        items: 8,
        menu: '<ul class="typeahead dropdown-menu"></ul>',
        item: '<li><a href="#"></a></li>',
        minLength: 1
    };
    $.fn.typeahead.Constructor = Typeahead;
    $.fn.typeahead.noConflict = function() {
        $.fn.typeahead = old;
        return this;
    };
    $(document).on("focus.typeahead.data-api", '[data-provide="typeahead"]', function(e) {
        var $this = $(this);
        if ($this.data("typeahead")) return;
        $this.typeahead($this.data());
    });
}(window.jQuery);

!function($) {
    "use strict";
    var Affix = function(element, options) {
        this.options = $.extend({}, $.fn.affix.defaults, options);
        this.$window = $(window).on("scroll.affix.data-api", $.proxy(this.checkPosition, this)).on("click.affix.data-api", $.proxy(function() {
            setTimeout($.proxy(this.checkPosition, this), 1);
        }, this));
        this.$element = $(element);
        this.checkPosition();
    };
    Affix.prototype.checkPosition = function() {
        if (!this.$element.is(":visible")) return;
        var scrollHeight = $(document).height(), scrollTop = this.$window.scrollTop(), position = this.$element.offset(), offset = this.options.offset, offsetBottom = offset.bottom, offsetTop = offset.top, reset = "affix affix-top affix-bottom", affix;
        if ("object" != typeof offset) offsetBottom = offsetTop = offset;
        if ("function" == typeof offsetTop) offsetTop = offset.top();
        if ("function" == typeof offsetBottom) offsetBottom = offset.bottom();
        affix = null != this.unpin && scrollTop + this.unpin <= position.top ? false : null != offsetBottom && position.top + this.$element.height() >= scrollHeight - offsetBottom ? "bottom" : null != offsetTop && scrollTop <= offsetTop ? "top" : false;
        if (this.affixed === affix) return;
        this.affixed = affix;
        this.unpin = "bottom" == affix ? position.top - scrollTop : null;
        this.$element.removeClass(reset).addClass("affix" + (affix ? "-" + affix : ""));
    };
    var old = $.fn.affix;
    $.fn.affix = function(option) {
        return this.each(function() {
            var $this = $(this), data = $this.data("affix"), options = "object" == typeof option && option;
            if (!data) $this.data("affix", data = new Affix(this, options));
            if ("string" == typeof option) data[option]();
        });
    };
    $.fn.affix.Constructor = Affix;
    $.fn.affix.defaults = {
        offset: 0
    };
    $.fn.affix.noConflict = function() {
        $.fn.affix = old;
        return this;
    };
    $(window).on("load", function() {
        $('[data-spy="affix"]').each(function() {
            var $spy = $(this), data = $spy.data();
            data.offset = data.offset || {};
            data.offsetBottom && (data.offset.bottom = data.offsetBottom);
            data.offsetTop && (data.offset.top = data.offsetTop);
            $spy.affix(data);
        });
    });
}(window.jQuery);

var Cookie = {
    set: function(name, value, daysToExpire, options) {
        var expire = "";
        if (void 0 !== daysToExpire) {
            var d = new Date();
            d.setTime(d.getTime() + 864e5 * parseFloat(daysToExpire));
            expire = "; expires=" + d.toGMTString();
        }
        if (void 0 === options) options = {
            path: "/"
        };
        var ret = document.cookie = escape(name) + "=" + escape(value || "") + (options.path ? ";path=" + options.path : "") + (options.domain ? ";domain=" + options.domain : "") + (options.secure ? ";secure" : "") + expire;
        return ret;
    },
    get: function(name) {
        var cookie = document.cookie.match(new RegExp("(^|;)\\s*" + escape(name) + "=([^;\\s]*)"));
        return cookie ? unescape(cookie[2]) : null;
    },
    erase: function(name) {
        var cookie = Cookie.get(name) || true;
        Cookie.set(name, "", -1);
        return cookie;
    },
    all: function() {
        return _(document.cookie.split(";")).reduce(function(obj, pair) {
            kv = pair.split("=");
            obj[kv[0]] = kv[1];
            return obj;
        }, {});
    }
};

(function(global) {
    "use strict";
    function Map() {
        this.data = {};
    }
    Map.prototype = {
        get: function(key) {
            return this.data[key + "~"];
        },
        set: function(key, value) {
            this.data[key + "~"] = value;
        },
        "delete": function(key) {
            delete this.data[key + "~"];
        }
    };
    function EventTarget() {
        this.listeners = new Map();
    }
    function throwError(e) {
        setTimeout(function() {
            throw e;
        }, 0);
    }
    EventTarget.prototype = {
        dispatchEvent: function(event) {
            var type = String(event.type);
            var listeners = this.listeners;
            var typeListeners = listeners.get(type);
            if (!typeListeners) return;
            var length = typeListeners.length;
            var i = -1;
            while (++i < length) {
                var listener = typeListeners[i];
                try {
                    listener.call(this, event);
                } catch (e) {
                    throwError(e);
                }
            }
        },
        addEventListener: function(type, callback) {
            type = String(type);
            var listeners = this.listeners;
            var typeListeners = listeners.get(type);
            if (!typeListeners) listeners.set(type, typeListeners = []);
            var i = typeListeners.length;
            while (--i >= 0) if (typeListeners[i] === callback) return;
            typeListeners.push(callback);
        },
        removeEventListener: function(type, callback) {
            type = String(type);
            var listeners = this.listeners;
            var typeListeners = listeners.get(type);
            if (!typeListeners) return;
            var length = typeListeners.length;
            var filtered = [];
            var i = -1;
            while (++i < length) if (typeListeners[i] !== callback) filtered.push(typeListeners[i]);
            if (0 === filtered.length) listeners["delete"](type); else listeners.set(type, filtered);
        }
    };
    function Event(type) {
        this.type = type;
    }
    function MessageEvent(type, options) {
        Event.call(this, type);
        this.data = options.data;
        this.lastEventId = options.lastEventId;
    }
    MessageEvent.prototype = Event.prototype;
    var XHR = global.XMLHttpRequest;
    var XDR = global.XDomainRequest;
    var xhr2 = Boolean(XHR && void 0 !== new XHR().withCredentials);
    var isXHR = xhr2;
    var Transport = xhr2 ? XHR : XDR;
    var WAITING = -1;
    var CONNECTING = 0;
    var OPEN = 1;
    var CLOSED = 2;
    var contentTypeRegExp = /^text\/event\-stream;?(\s*charset\=utf\-8)?$/i;
    var webkitBefore535 = /AppleWebKit\/5([0-2][0-9]|3[0-4])[^\d]/.test(navigator.userAgent);
    var endOfLine = /[\r\n]/;
    function getDuration(value, def) {
        var n = Number(value);
        return (n < 1 ? 1 : n > 18e6 ? 18e6 : n) || def;
    }
    function abort(xhr) {
        xhr.onload = xhr.onerror = xhr.onprogress = xhr.onreadystatechange = null;
        xhr.abort();
    }
    function fire(that, property, event) {
        try {
            if ("function" === typeof that[property]) that[property](event);
        } catch (e) {
            throwError(e);
        }
    }
    function EventSource(url, options) {
        url = String(url);
        var withCredentials = Boolean(xhr2 && options && options.withCredentials);
        var initialRetry = getDuration(options ? options.retry : 0/0, 1e3);
        var retryLimit = getDuration(options ? options.retryLimit : 0/0, 3e5);
        var heartbeatTimeout = getDuration(options ? options.heartbeatTimeout : 0/0, 45e3);
        var lastEventId = options && options.lastEventId && String(options.lastEventId) || "";
        var that = this;
        var retry = initialRetry;
        var wasActivity = false;
        var xhr = new Transport();
        var timeout = 0;
        var charOffset = 0;
        var currentState = WAITING;
        var dataBuffer = [];
        var lastEventIdBuffer = "";
        var eventTypeBuffer = "";
        var responseBuffer = [];
        var wasCR = false;
        options = null;
        function close() {
            if (null !== xhr) {
                abort(xhr);
                xhr = null;
            }
            if (0 !== timeout) {
                clearTimeout(timeout);
                timeout = 0;
            }
            currentState = CLOSED;
            that.readyState = CLOSED;
        }
        function onProgress(isLoadEnd) {
            var responseText = xhr.responseText || "";
            var event = null;
            if (currentState === CONNECTING) {
                var contentType = isXHR ? "" !== responseText ? xhr.getResponseHeader("Content-Type") : "" : xhr.contentType;
                if (contentType && contentTypeRegExp.test(contentType)) {
                    currentState = OPEN;
                    wasActivity = true;
                    retry = initialRetry;
                    that.readyState = OPEN;
                    event = new Event("open");
                    that.dispatchEvent(event);
                    fire(that, "onopen", event);
                    if (currentState === CLOSED) return;
                }
            }
            if (currentState === OPEN) {
                var part = responseText.slice(charOffset);
                if (part.length > 0) wasActivity = true;
                var i = 0;
                while ((i = part.search(endOfLine)) !== -1) {
                    var c = part.slice(i, i + 1);
                    if (wasCR && 0 === i && "\n" === c) {
                        wasCR = false;
                        part = part.slice(i + 1);
                        continue;
                    }
                    wasCR = "\r" === c;
                    responseBuffer.push(part.slice(0, i));
                    var field = responseBuffer.join("");
                    responseBuffer.length = 0;
                    part = part.slice(i + 1);
                    if ("" !== field) {
                        var value = "";
                        var j = field.indexOf(":");
                        if (j !== -1) {
                            value = field.slice(j + (" " === field.slice(j + 1, j + 2) ? 2 : 1));
                            field = field.slice(0, j);
                        }
                        if ("data" === field) dataBuffer.push(value); else if ("id" === field) lastEventIdBuffer = value; else if ("event" === field) eventTypeBuffer = value; else if ("retry" === field) {
                            initialRetry = getDuration(value, initialRetry);
                            retry = initialRetry;
                            if (retryLimit < initialRetry) retryLimit = initialRetry;
                        } else if ("retryLimit" === field) retryLimit = getDuration(value, retryLimit); else if ("heartbeatTimeout" === field) {
                            heartbeatTimeout = getDuration(value, heartbeatTimeout);
                            if (0 !== timeout) {
                                clearTimeout(timeout);
                                timeout = setTimeout(onTimeout, heartbeatTimeout);
                            }
                        }
                    } else {
                        if (0 !== dataBuffer.length) {
                            lastEventId = lastEventIdBuffer;
                            var type = eventTypeBuffer || "message";
                            event = new MessageEvent(type, {
                                data: dataBuffer.join("\n"),
                                lastEventId: lastEventIdBuffer
                            });
                            that.dispatchEvent(event);
                            if ("message" === type) fire(that, "onmessage", event);
                            if (currentState === CLOSED) return;
                        }
                        dataBuffer.length = 0;
                        eventTypeBuffer = "";
                    }
                }
                if ("" !== part) responseBuffer.push(part);
                charOffset = responseText.length;
            }
            if (isLoadEnd || charOffset > 1024 * 1024 || 0 === timeout && !wasActivity) {
                abort(xhr);
                if (0 !== timeout) {
                    clearTimeout(timeout);
                    timeout = 0;
                }
                if (retry > retryLimit) retry = retryLimit;
                currentState = WAITING;
                timeout = setTimeout(onTimeout, retry);
                retry = 2 * retry + 1;
                that.readyState = CONNECTING;
                event = new Event("error");
                that.dispatchEvent(event);
                fire(that, "onerror", event);
            } else if (0 === timeout) {
                wasActivity = false;
                timeout = setTimeout(onTimeout, heartbeatTimeout);
            }
        }
        function p() {
            if (currentState === OPEN) onProgress(false);
        }
        function onProgress2() {
            onProgress(false);
            setTimeout(p, 64);
        }
        function onLoad() {
            onProgress(true);
        }
        function onTimeout() {
            timeout = 0;
            if (currentState !== WAITING) {
                onProgress(false);
                return;
            }
            if (false === navigator.onLine) {
                timeout = setTimeout(onTimeout, 500);
                return;
            }
            if (webkitBefore535 && global.document && ("loading" === global.document.readyState || "interactive" === global.document.readyState)) {
                timeout = setTimeout(onTimeout, 100);
                return;
            }
            xhr.onload = xhr.onerror = onLoad;
            if (void 0 === xhr.mozAnon) xhr.onprogress = onProgress2;
            xhr.onreadystatechange = onProgress2;
            wasActivity = false;
            timeout = setTimeout(onTimeout, heartbeatTimeout);
            charOffset = 0;
            currentState = CONNECTING;
            dataBuffer.length = 0;
            eventTypeBuffer = "";
            lastEventIdBuffer = lastEventId;
            responseBuffer.length = 0;
            wasCR = false;
            xhr.open("GET", url + ((url.indexOf("?") === -1 ? "?" : "&") + "lastEventId=" + encodeURIComponent(lastEventId) + "&r=" + String(Math.random()).slice(2)), true);
            xhr.withCredentials = withCredentials;
            xhr.responseType = "text";
            if (isXHR) {
                xhr.setRequestHeader("Cache-Control", "no-cache");
                xhr.setRequestHeader("Accept", "text/event-stream");
                xhr.setRequestHeader("Last-Event-ID", lastEventId);
            }
            xhr.send(null);
        }
        EventTarget.call(this);
        this.close = close;
        this.url = url;
        this.readyState = CONNECTING;
        this.withCredentials = withCredentials;
        onTimeout();
    }
    function F() {
        this.CONNECTING = CONNECTING;
        this.OPEN = OPEN;
        this.CLOSED = CLOSED;
    }
    F.prototype = EventTarget.prototype;
    EventSource.prototype = new F();
    F.call(EventSource);
    if (Transport) global.EventSource = EventSource;
})(this);

(function($) {
    if ("undefined" == typeof $.fn.each2) $.fn.extend({
        each2: function(c) {
            var j = $([ 0 ]), i = -1, l = this.length;
            while (++i < l && (j.context = j[0] = this[i]) && false !== c.call(j[0], i, j)) ;
            return this;
        }
    });
})(jQuery);

(function($, undefined) {
    "use strict";
    if (window.Select2 !== undefined) return;
    var KEY, AbstractSelect2, SingleSelect2, MultiSelect2, nextUid, sizer, lastMousePosition, $document, scrollBarDimensions, KEY = {
        TAB: 9,
        ENTER: 13,
        ESC: 27,
        SPACE: 32,
        LEFT: 37,
        UP: 38,
        RIGHT: 39,
        DOWN: 40,
        SHIFT: 16,
        CTRL: 17,
        ALT: 18,
        PAGE_UP: 33,
        PAGE_DOWN: 34,
        HOME: 36,
        END: 35,
        BACKSPACE: 8,
        DELETE: 46,
        isArrow: function(k) {
            k = k.which ? k.which : k;
            switch (k) {
              case KEY.LEFT:
              case KEY.RIGHT:
              case KEY.UP:
              case KEY.DOWN:
                return true;
            }
            return false;
        },
        isControl: function(e) {
            var k = e.which;
            switch (k) {
              case KEY.SHIFT:
              case KEY.CTRL:
              case KEY.ALT:
                return true;
            }
            if (e.metaKey) return true;
            return false;
        },
        isFunctionKey: function(k) {
            k = k.which ? k.which : k;
            return k >= 112 && k <= 123;
        }
    }, MEASURE_SCROLLBAR_TEMPLATE = "<div class='select2-measure-scrollbar'></div>";
    $document = $(document);
    nextUid = function() {
        var counter = 1;
        return function() {
            return counter++;
        };
    }();
    function indexOf(value, array) {
        var i = 0, l = array.length;
        for (;i < l; i += 1) if (equal(value, array[i])) return i;
        return -1;
    }
    function measureScrollbar() {
        var $template = $(MEASURE_SCROLLBAR_TEMPLATE);
        $template.appendTo("body");
        var dim = {
            width: $template.width() - $template[0].clientWidth,
            height: $template.height() - $template[0].clientHeight
        };
        $template.remove();
        return dim;
    }
    function equal(a, b) {
        if (a === b) return true;
        if (a === undefined || b === undefined) return false;
        if (null === a || null === b) return false;
        if (a.constructor === String) return a + "" === b + "";
        if (b.constructor === String) return b + "" === a + "";
        return false;
    }
    function splitVal(string, separator) {
        var val, i, l;
        if (null === string || string.length < 1) return [];
        val = string.split(separator);
        for (i = 0, l = val.length; i < l; i += 1) val[i] = $.trim(val[i]);
        return val;
    }
    function getSideBorderPadding(element) {
        return element.outerWidth(false) - element.width();
    }
    function installKeyUpChangeEvent(element) {
        var key = "keyup-change-value";
        element.on("keydown", function() {
            if ($.data(element, key) === undefined) $.data(element, key, element.val());
        });
        element.on("keyup", function() {
            var val = $.data(element, key);
            if (val !== undefined && element.val() !== val) {
                $.removeData(element, key);
                element.trigger("keyup-change");
            }
        });
    }
    $document.on("mousemove", function(e) {
        lastMousePosition = {
            x: e.pageX,
            y: e.pageY
        };
    });
    function installFilteredMouseMove(element) {
        element.on("mousemove", function(e) {
            var lastpos = lastMousePosition;
            if (lastpos === undefined || lastpos.x !== e.pageX || lastpos.y !== e.pageY) $(e.target).trigger("mousemove-filtered", e);
        });
    }
    function debounce(quietMillis, fn, ctx) {
        ctx = ctx || undefined;
        var timeout;
        return function() {
            var args = arguments;
            window.clearTimeout(timeout);
            timeout = window.setTimeout(function() {
                fn.apply(ctx, args);
            }, quietMillis);
        };
    }
    function thunk(formula) {
        var evaluated = false, value;
        return function() {
            if (false === evaluated) {
                value = formula();
                evaluated = true;
            }
            return value;
        };
    }
    function installDebouncedScroll(threshold, element) {
        var notify = debounce(threshold, function(e) {
            element.trigger("scroll-debounced", e);
        });
        element.on("scroll", function(e) {
            if (indexOf(e.target, element.get()) >= 0) notify(e);
        });
    }
    function focus($el) {
        if ($el[0] === document.activeElement) return;
        window.setTimeout(function() {
            var el = $el[0], pos = $el.val().length, range;
            $el.focus();
            if ($el.is(":visible") && el === document.activeElement) if (el.setSelectionRange) el.setSelectionRange(pos, pos); else if (el.createTextRange) {
                range = el.createTextRange();
                range.collapse(false);
                range.select();
            }
        }, 0);
    }
    function getCursorInfo(el) {
        el = $(el)[0];
        var offset = 0;
        var length = 0;
        if ("selectionStart" in el) {
            offset = el.selectionStart;
            length = el.selectionEnd - offset;
        } else if ("selection" in document) {
            el.focus();
            var sel = document.selection.createRange();
            length = document.selection.createRange().text.length;
            sel.moveStart("character", -el.value.length);
            offset = sel.text.length - length;
        }
        return {
            offset: offset,
            length: length
        };
    }
    function killEvent(event) {
        event.preventDefault();
        event.stopPropagation();
    }
    function killEventImmediately(event) {
        event.preventDefault();
        event.stopImmediatePropagation();
    }
    function measureTextWidth(e) {
        if (!sizer) {
            var style = e[0].currentStyle || window.getComputedStyle(e[0], null);
            sizer = $(document.createElement("div")).css({
                position: "absolute",
                left: "-10000px",
                top: "-10000px",
                display: "none",
                fontSize: style.fontSize,
                fontFamily: style.fontFamily,
                fontStyle: style.fontStyle,
                fontWeight: style.fontWeight,
                letterSpacing: style.letterSpacing,
                textTransform: style.textTransform,
                whiteSpace: "nowrap"
            });
            sizer.attr("class", "select2-sizer");
            $("body").append(sizer);
        }
        sizer.text(e.val());
        return sizer.width();
    }
    function syncCssClasses(dest, src, adapter) {
        var classes, replacements = [], adapted;
        classes = dest.attr("class");
        if (classes) {
            classes = "" + classes;
            $(classes.split(" ")).each2(function() {
                if (0 === this.indexOf("select2-")) replacements.push(this);
            });
        }
        classes = src.attr("class");
        if (classes) {
            classes = "" + classes;
            $(classes.split(" ")).each2(function() {
                if (0 !== this.indexOf("select2-")) {
                    adapted = adapter(this);
                    if (adapted) replacements.push(this);
                }
            });
        }
        dest.attr("class", replacements.join(" "));
    }
    function markMatch(text, term, markup, escapeMarkup) {
        var match = text.toUpperCase().indexOf(term.toUpperCase()), tl = term.length;
        if (match < 0) {
            markup.push(escapeMarkup(text));
            return;
        }
        markup.push(escapeMarkup(text.substring(0, match)));
        markup.push("<span class='select2-match'>");
        markup.push(escapeMarkup(text.substring(match, match + tl)));
        markup.push("</span>");
        markup.push(escapeMarkup(text.substring(match + tl, text.length)));
    }
    function ajax(options) {
        var timeout, handler = null, quietMillis = options.quietMillis || 100, ajaxUrl = options.url, self = this;
        return function(query) {
            window.clearTimeout(timeout);
            timeout = window.setTimeout(function() {
                var data = options.data, url = ajaxUrl, transport = options.transport || $.fn.select2.ajaxDefaults.transport, deprecated = {
                    type: options.type || "GET",
                    cache: options.cache || false,
                    jsonpCallback: options.jsonpCallback || undefined,
                    dataType: options.dataType || "json"
                }, params = $.extend({}, $.fn.select2.ajaxDefaults.params, deprecated);
                data = data ? data.call(self, query.term, query.page, query.context) : null;
                url = "function" === typeof url ? url.call(self, query.term, query.page, query.context) : url;
                if (null !== handler) handler.abort();
                if (options.params) if ($.isFunction(options.params)) $.extend(params, options.params.call(self)); else $.extend(params, options.params);
                $.extend(params, {
                    url: url,
                    dataType: options.dataType,
                    data: data,
                    success: function(data) {
                        var results = options.results(data, query.page);
                        query.callback(results);
                    }
                });
                handler = transport.call(self, params);
            }, quietMillis);
        };
    }
    function local(options) {
        var data = options, dataText, tmp, text = function(item) {
            return "" + item.text;
        };
        if ($.isArray(data)) {
            tmp = data;
            data = {
                results: tmp
            };
        }
        if (false === $.isFunction(data)) {
            tmp = data;
            data = function() {
                return tmp;
            };
        }
        var dataItem = data();
        if (dataItem.text) {
            text = dataItem.text;
            if (!$.isFunction(text)) {
                dataText = dataItem.text;
                text = function(item) {
                    return item[dataText];
                };
            }
        }
        return function(query) {
            var t = query.term, filtered = {
                results: []
            }, process;
            if ("" === t) {
                query.callback(data());
                return;
            }
            process = function(datum, collection) {
                var group, attr;
                datum = datum[0];
                if (datum.children) {
                    group = {};
                    for (attr in datum) if (datum.hasOwnProperty(attr)) group[attr] = datum[attr];
                    group.children = [];
                    $(datum.children).each2(function(i, childDatum) {
                        process(childDatum, group.children);
                    });
                    if (group.children.length || query.matcher(t, text(group), datum)) collection.push(group);
                } else if (query.matcher(t, text(datum), datum)) collection.push(datum);
            };
            $(data().results).each2(function(i, datum) {
                process(datum, filtered.results);
            });
            query.callback(filtered);
        };
    }
    function tags(data) {
        var isFunc = $.isFunction(data);
        return function(query) {
            var t = query.term, filtered = {
                results: []
            };
            $(isFunc ? data() : data).each(function() {
                var isObject = this.text !== undefined, text = isObject ? this.text : this;
                if ("" === t || query.matcher(t, text)) filtered.results.push(isObject ? this : {
                    id: this,
                    text: this
                });
            });
            query.callback(filtered);
        };
    }
    function checkFormatter(formatter, formatterName) {
        if ($.isFunction(formatter)) return true;
        if (!formatter) return false;
        throw new Error("formatterName must be a function or a falsy value");
    }
    function evaluate(val) {
        return $.isFunction(val) ? val() : val;
    }
    function countResults(results) {
        var count = 0;
        $.each(results, function(i, item) {
            if (item.children) count += countResults(item.children); else count++;
        });
        return count;
    }
    function defaultTokenizer(input, selection, selectCallback, opts) {
        var original = input, dupe = false, token, index, i, l, separator;
        if (!opts.createSearchChoice || !opts.tokenSeparators || opts.tokenSeparators.length < 1) return undefined;
        while (true) {
            index = -1;
            for (i = 0, l = opts.tokenSeparators.length; i < l; i++) {
                separator = opts.tokenSeparators[i];
                index = input.indexOf(separator);
                if (index >= 0) break;
            }
            if (index < 0) break;
            token = input.substring(0, index);
            input = input.substring(index + separator.length);
            if (token.length > 0) {
                token = opts.createSearchChoice.call(this, token, selection);
                if (token !== undefined && null !== token && opts.id(token) !== undefined && null !== opts.id(token)) {
                    dupe = false;
                    for (i = 0, l = selection.length; i < l; i++) if (equal(opts.id(token), opts.id(selection[i]))) {
                        dupe = true;
                        break;
                    }
                    if (!dupe) selectCallback(token);
                }
            }
        }
        if (original !== input) return input;
    }
    function clazz(SuperClass, methods) {
        var constructor = function() {};
        constructor.prototype = new SuperClass();
        constructor.prototype.constructor = constructor;
        constructor.prototype.parent = SuperClass.prototype;
        constructor.prototype = $.extend(constructor.prototype, methods);
        return constructor;
    }
    AbstractSelect2 = clazz(Object, {
        bind: function(func) {
            var self = this;
            return function() {
                func.apply(self, arguments);
            };
        },
        init: function(opts) {
            var results, search, resultsSelector = ".select2-results", disabled, readonly;
            this.opts = opts = this.prepareOpts(opts);
            this.id = opts.id;
            if (opts.element.data("select2") !== undefined && null !== opts.element.data("select2")) this.destroy();
            this.container = this.createContainer();
            this.containerId = "s2id_" + (opts.element.attr("id") || "autogen" + nextUid());
            this.containerSelector = "#" + this.containerId.replace(/([;&,\.\+\*\~':"\!\^#$%@\[\]\(\)=>\|])/g, "\\$1");
            this.container.attr("id", this.containerId);
            this.body = thunk(function() {
                return opts.element.closest("body");
            });
            syncCssClasses(this.container, this.opts.element, this.opts.adaptContainerCssClass);
            this.container.css(evaluate(opts.containerCss));
            this.container.addClass(evaluate(opts.containerCssClass));
            this.elementTabIndex = this.opts.element.attr("tabindex");
            this.opts.element.data("select2", this).attr("tabindex", "-1").before(this.container);
            this.container.data("select2", this);
            this.dropdown = this.container.find(".select2-drop");
            this.dropdown.addClass(evaluate(opts.dropdownCssClass));
            this.dropdown.data("select2", this);
            this.results = results = this.container.find(resultsSelector);
            this.search = search = this.container.find("input.select2-input");
            this.queryCount = 0;
            this.resultsPage = 0;
            this.context = null;
            this.initContainer();
            installFilteredMouseMove(this.results);
            this.dropdown.on("mousemove-filtered touchstart touchmove touchend", resultsSelector, this.bind(this.highlightUnderEvent));
            installDebouncedScroll(80, this.results);
            this.dropdown.on("scroll-debounced", resultsSelector, this.bind(this.loadMoreIfNeeded));
            $(this.container).on("change", ".select2-input", function(e) {
                e.stopPropagation();
            });
            $(this.dropdown).on("change", ".select2-input", function(e) {
                e.stopPropagation();
            });
            if ($.fn.mousewheel) results.mousewheel(function(e, delta, deltaX, deltaY) {
                var top = results.scrollTop(), height;
                if (deltaY > 0 && top - deltaY <= 0) {
                    results.scrollTop(0);
                    killEvent(e);
                } else if (deltaY < 0 && results.get(0).scrollHeight - results.scrollTop() + deltaY <= results.height()) {
                    results.scrollTop(results.get(0).scrollHeight - results.height());
                    killEvent(e);
                }
            });
            installKeyUpChangeEvent(search);
            search.on("keyup-change input paste", this.bind(this.updateResults));
            search.on("focus", function() {
                search.addClass("select2-focused");
            });
            search.on("blur", function() {
                search.removeClass("select2-focused");
            });
            this.dropdown.on("mouseup", resultsSelector, this.bind(function(e) {
                if ($(e.target).closest(".select2-result-selectable").length > 0) {
                    this.highlightUnderEvent(e);
                    this.selectHighlighted(e);
                }
            }));
            this.dropdown.on("click mouseup mousedown", function(e) {
                e.stopPropagation();
            });
            if ($.isFunction(this.opts.initSelection)) {
                this.initSelection();
                this.monitorSource();
            }
            if (null !== opts.maximumInputLength) this.search.attr("maxlength", opts.maximumInputLength);
            var disabled = opts.element.prop("disabled");
            if (disabled === undefined) disabled = false;
            this.enable(!disabled);
            var readonly = opts.element.prop("readonly");
            if (readonly === undefined) readonly = false;
            this.readonly(readonly);
            scrollBarDimensions = scrollBarDimensions || measureScrollbar();
            this.autofocus = opts.element.prop("autofocus");
            opts.element.prop("autofocus", false);
            if (this.autofocus) this.focus();
        },
        destroy: function() {
            var select2 = this.opts.element.data("select2");
            if (this.propertyObserver) {
                delete this.propertyObserver;
                this.propertyObserver = null;
            }
            if (select2 !== undefined) {
                select2.container.remove();
                select2.dropdown.remove();
                select2.opts.element.removeClass("select2-offscreen").removeData("select2").off(".select2").attr({
                    tabindex: this.elementTabIndex
                }).prop("autofocus", this.autofocus || false).show();
            }
        },
        optionToData: function(element) {
            if (element.is("option")) return {
                id: element.prop("value"),
                text: element.text(),
                element: element.get(),
                css: element.attr("class"),
                disabled: element.prop("disabled"),
                locked: equal(element.attr("locked"), "locked")
            }; else if (element.is("optgroup")) return {
                text: element.attr("label"),
                children: [],
                element: element.get(),
                css: element.attr("class")
            };
        },
        prepareOpts: function(opts) {
            var element, select, idKey, ajaxUrl, self = this;
            element = opts.element;
            if ("select" === element.get(0).tagName.toLowerCase()) this.select = select = opts.element;
            if (select) $.each([ "id", "multiple", "ajax", "query", "createSearchChoice", "initSelection", "data", "tags" ], function() {
                if (this in opts) throw new Error("Option '" + this + "' is not allowed for Select2 when attached to a <select> element.");
            });
            opts = $.extend({}, {
                populateResults: function(container, results, query) {
                    var populate, data, result, children, id = this.opts.id;
                    populate = function(results, container, depth) {
                        var i, l, result, selectable, disabled, compound, node, label, innerContainer, formatted;
                        results = opts.sortResults(results, container, query);
                        for (i = 0, l = results.length; i < l; i += 1) {
                            result = results[i];
                            disabled = true === result.disabled;
                            selectable = !disabled && id(result) !== undefined;
                            compound = result.children && result.children.length > 0;
                            node = $("<li></li>");
                            node.addClass("select2-results-dept-" + depth);
                            node.addClass("select2-result");
                            node.addClass(selectable ? "select2-result-selectable" : "select2-result-unselectable");
                            if (disabled) node.addClass("select2-disabled");
                            if (compound) node.addClass("select2-result-with-children");
                            node.addClass(self.opts.formatResultCssClass(result));
                            label = $(document.createElement("div"));
                            label.addClass("select2-result-label");
                            formatted = opts.formatResult(result, label, query, self.opts.escapeMarkup);
                            if (formatted !== undefined) label.html(formatted);
                            node.append(label);
                            if (compound) {
                                innerContainer = $("<ul></ul>");
                                innerContainer.addClass("select2-result-sub");
                                populate(result.children, innerContainer, depth + 1);
                                node.append(innerContainer);
                            }
                            node.data("select2-data", result);
                            container.append(node);
                        }
                    };
                    populate(results, container, 0);
                }
            }, $.fn.select2.defaults, opts);
            if ("function" !== typeof opts.id) {
                idKey = opts.id;
                opts.id = function(e) {
                    return e[idKey];
                };
            }
            if ($.isArray(opts.element.data("select2Tags"))) {
                if ("tags" in opts) throw "tags specified as both an attribute 'data-select2-tags' and in options of Select2 " + opts.element.attr("id");
                opts.tags = opts.element.data("select2Tags");
            }
            if (select) {
                opts.query = this.bind(function(query) {
                    var data = {
                        results: [],
                        more: false
                    }, term = query.term, children, firstChild, process;
                    process = function(element, collection) {
                        var group;
                        if (element.is("option")) {
                            if (query.matcher(term, element.text(), element)) collection.push(self.optionToData(element));
                        } else if (element.is("optgroup")) {
                            group = self.optionToData(element);
                            element.children().each2(function(i, elm) {
                                process(elm, group.children);
                            });
                            if (group.children.length > 0) collection.push(group);
                        }
                    };
                    children = element.children();
                    if (this.getPlaceholder() !== undefined && children.length > 0) {
                        firstChild = children[0];
                        if ("" === $(firstChild).text()) children = children.not(firstChild);
                    }
                    children.each2(function(i, elm) {
                        process(elm, data.results);
                    });
                    query.callback(data);
                });
                opts.id = function(e) {
                    return e.id;
                };
                opts.formatResultCssClass = function(data) {
                    return data.css;
                };
            } else if (!("query" in opts)) if ("ajax" in opts) {
                ajaxUrl = opts.element.data("ajax-url");
                if (ajaxUrl && ajaxUrl.length > 0) opts.ajax.url = ajaxUrl;
                opts.query = ajax.call(opts.element, opts.ajax);
            } else if ("data" in opts) opts.query = local(opts.data); else if ("tags" in opts) {
                opts.query = tags(opts.tags);
                if (opts.createSearchChoice === undefined) opts.createSearchChoice = function(term) {
                    return {
                        id: term,
                        text: term
                    };
                };
                if (opts.initSelection === undefined) opts.initSelection = function(element, callback) {
                    var data = [];
                    $(splitVal(element.val(), opts.separator)).each(function() {
                        var id = this, text = this, tags = opts.tags;
                        if ($.isFunction(tags)) tags = tags();
                        $(tags).each(function() {
                            if (equal(this.id, id)) {
                                text = this.text;
                                return false;
                            }
                        });
                        data.push({
                            id: id,
                            text: text
                        });
                    });
                    callback(data);
                };
            }
            if ("function" !== typeof opts.query) throw "query function not defined for Select2 " + opts.element.attr("id");
            return opts;
        },
        monitorSource: function() {
            var el = this.opts.element, sync;
            el.on("change.select2", this.bind(function(e) {
                if (true !== this.opts.element.data("select2-change-triggered")) this.initSelection();
            }));
            sync = this.bind(function() {
                var enabled, readonly, self = this;
                var disabled = el.prop("disabled");
                if (disabled === undefined) disabled = false;
                this.enable(!disabled);
                var readonly = el.prop("readonly");
                if (readonly === undefined) readonly = false;
                this.readonly(readonly);
                syncCssClasses(this.container, this.opts.element, this.opts.adaptContainerCssClass);
                this.container.addClass(evaluate(this.opts.containerCssClass));
                syncCssClasses(this.dropdown, this.opts.element, this.opts.adaptDropdownCssClass);
                this.dropdown.addClass(evaluate(this.opts.dropdownCssClass));
            });
            el.on("propertychange.select2 DOMAttrModified.select2", sync);
            if (this.mutationCallback === undefined) this.mutationCallback = function(mutations) {
                mutations.forEach(sync);
            };
            if ("undefined" !== typeof WebKitMutationObserver) {
                if (this.propertyObserver) {
                    delete this.propertyObserver;
                    this.propertyObserver = null;
                }
                this.propertyObserver = new WebKitMutationObserver(this.mutationCallback);
                this.propertyObserver.observe(el.get(0), {
                    attributes: true,
                    subtree: false
                });
            }
        },
        triggerSelect: function(data) {
            var evt = $.Event("select2-selecting", {
                val: this.id(data),
                object: data
            });
            this.opts.element.trigger(evt);
            return !evt.isDefaultPrevented();
        },
        triggerChange: function(details) {
            details = details || {};
            details = $.extend({}, details, {
                type: "change",
                val: this.val()
            });
            this.opts.element.data("select2-change-triggered", true);
            this.opts.element.trigger(details);
            this.opts.element.data("select2-change-triggered", false);
            this.opts.element.click();
            if (this.opts.blurOnChange) this.opts.element.blur();
        },
        isInterfaceEnabled: function() {
            return true === this.enabledInterface;
        },
        enableInterface: function() {
            var enabled = this._enabled && !this._readonly, disabled = !enabled;
            if (enabled === this.enabledInterface) return false;
            this.container.toggleClass("select2-container-disabled", disabled);
            this.close();
            this.enabledInterface = enabled;
            return true;
        },
        enable: function(enabled) {
            if (enabled === undefined) enabled = true;
            if (this._enabled === enabled) return false;
            this._enabled = enabled;
            this.opts.element.prop("disabled", !enabled);
            this.enableInterface();
            return true;
        },
        readonly: function(enabled) {
            if (enabled === undefined) enabled = false;
            if (this._readonly === enabled) return false;
            this._readonly = enabled;
            this.opts.element.prop("readonly", enabled);
            this.enableInterface();
            return true;
        },
        opened: function() {
            return this.container.hasClass("select2-dropdown-open");
        },
        positionDropdown: function() {
            var $dropdown = this.dropdown, offset = this.container.offset(), height = this.container.outerHeight(false), width = this.container.outerWidth(false), dropHeight = $dropdown.outerHeight(false), viewPortRight = $(window).scrollLeft() + $(window).width(), viewportBottom = $(window).scrollTop() + $(window).height(), dropTop = offset.top + height, dropLeft = offset.left, enoughRoomBelow = dropTop + dropHeight <= viewportBottom, enoughRoomAbove = offset.top - dropHeight >= this.body().scrollTop(), dropWidth = $dropdown.outerWidth(false), enoughRoomOnRight = dropLeft + dropWidth <= viewPortRight, aboveNow = $dropdown.hasClass("select2-drop-above"), bodyOffset, above, css, resultsListNode;
            if (this.opts.dropdownAutoWidth) {
                resultsListNode = $(".select2-results", $dropdown)[0];
                $dropdown.addClass("select2-drop-auto-width");
                $dropdown.css("width", "");
                dropWidth = $dropdown.outerWidth(false) + (resultsListNode.scrollHeight === resultsListNode.clientHeight ? 0 : scrollBarDimensions.width);
                dropWidth > width ? width = dropWidth : dropWidth = width;
                enoughRoomOnRight = dropLeft + dropWidth <= viewPortRight;
            } else this.container.removeClass("select2-drop-auto-width");
            if ("static" !== this.body().css("position")) {
                bodyOffset = this.body().offset();
                dropTop -= bodyOffset.top;
                dropLeft -= bodyOffset.left;
            }
            if (aboveNow) {
                above = true;
                if (!enoughRoomAbove && enoughRoomBelow) above = false;
            } else {
                above = false;
                if (!enoughRoomBelow && enoughRoomAbove) above = true;
            }
            if (!enoughRoomOnRight) dropLeft = offset.left + width - dropWidth;
            if (above) {
                dropTop = offset.top - dropHeight;
                this.container.addClass("select2-drop-above");
                $dropdown.addClass("select2-drop-above");
            } else {
                this.container.removeClass("select2-drop-above");
                $dropdown.removeClass("select2-drop-above");
            }
            css = $.extend({
                top: dropTop,
                left: dropLeft,
                width: width
            }, evaluate(this.opts.dropdownCss));
            $dropdown.css(css);
        },
        shouldOpen: function() {
            var event;
            if (this.opened()) return false;
            if (false === this._enabled || true === this._readonly) return false;
            event = $.Event("select2-opening");
            this.opts.element.trigger(event);
            return !event.isDefaultPrevented();
        },
        clearDropdownAlignmentPreference: function() {
            this.container.removeClass("select2-drop-above");
            this.dropdown.removeClass("select2-drop-above");
        },
        open: function() {
            if (!this.shouldOpen()) return false;
            this.opening();
            return true;
        },
        opening: function() {
            var cid = this.containerId, scroll = "scroll." + cid, resize = "resize." + cid, orient = "orientationchange." + cid, mask;
            this.container.addClass("select2-dropdown-open").addClass("select2-container-active");
            this.clearDropdownAlignmentPreference();
            if (this.dropdown[0] !== this.body().children().last()[0]) this.dropdown.detach().appendTo(this.body());
            mask = $("#select2-drop-mask");
            if (0 == mask.length) {
                mask = $(document.createElement("div"));
                mask.attr("id", "select2-drop-mask").attr("class", "select2-drop-mask");
                mask.hide();
                mask.appendTo(this.body());
                mask.on("mousedown touchstart", function(e) {
                    var dropdown = $("#select2-drop"), self;
                    if (dropdown.length > 0) {
                        self = dropdown.data("select2");
                        if (self.opts.selectOnBlur) self.selectHighlighted({
                            noFocus: true
                        });
                        self.close();
                        e.preventDefault();
                        e.stopPropagation();
                    }
                });
            }
            if (this.dropdown.prev()[0] !== mask[0]) this.dropdown.before(mask);
            $("#select2-drop").removeAttr("id");
            this.dropdown.attr("id", "select2-drop");
            mask.css(_makeMaskCss());
            mask.show();
            this.dropdown.show();
            this.positionDropdown();
            this.dropdown.addClass("select2-drop-active");
            this.ensureHighlightVisible();
            var that = this;
            this.container.parents().add(window).each(function() {
                $(this).on(resize + " " + scroll + " " + orient, function(e) {
                    $("#select2-drop-mask").css(_makeMaskCss());
                    that.positionDropdown();
                });
            });
            function _makeMaskCss() {
                return {
                    width: Math.max(document.documentElement.scrollWidth, $(window).width()),
                    height: Math.max(document.documentElement.scrollHeight, $(window).height())
                };
            }
        },
        close: function() {
            if (!this.opened()) return;
            var cid = this.containerId, scroll = "scroll." + cid, resize = "resize." + cid, orient = "orientationchange." + cid;
            this.container.parents().add(window).each(function() {
                $(this).off(scroll).off(resize).off(orient);
            });
            this.clearDropdownAlignmentPreference();
            $("#select2-drop-mask").hide();
            this.dropdown.removeAttr("id");
            this.dropdown.hide();
            this.container.removeClass("select2-dropdown-open");
            this.results.empty();
            this.clearSearch();
            this.search.removeClass("select2-active");
            this.opts.element.trigger($.Event("select2-close"));
        },
        clearSearch: function() {},
        getMaximumSelectionSize: function() {
            return evaluate(this.opts.maximumSelectionSize);
        },
        ensureHighlightVisible: function() {
            var results = this.results, children, index, child, hb, rb, y, more;
            index = this.highlight();
            if (index < 0) return;
            if (0 == index) {
                results.scrollTop(0);
                return;
            }
            children = this.findHighlightableChoices().find(".select2-result-label");
            child = $(children[index]);
            hb = child.offset().top + child.outerHeight(true);
            if (index === children.length - 1) {
                more = results.find("li.select2-more-results");
                if (more.length > 0) hb = more.offset().top + more.outerHeight(true);
            }
            rb = results.offset().top + results.outerHeight(true);
            if (hb > rb) results.scrollTop(results.scrollTop() + (hb - rb));
            y = child.offset().top - results.offset().top;
            if (y < 0 && "none" != child.css("display")) results.scrollTop(results.scrollTop() + y);
        },
        findHighlightableChoices: function() {
            return this.results.find(".select2-result-selectable:not(.select2-selected):not(.select2-disabled)");
        },
        moveHighlight: function(delta) {
            var choices = this.findHighlightableChoices(), index = this.highlight();
            while (index > -1 && index < choices.length) {
                index += delta;
                var choice = $(choices[index]);
                if (choice.hasClass("select2-result-selectable") && !choice.hasClass("select2-disabled") && !choice.hasClass("select2-selected")) {
                    this.highlight(index);
                    break;
                }
            }
        },
        highlight: function(index) {
            var choices = this.findHighlightableChoices(), choice, data;
            if (0 === arguments.length) return indexOf(choices.filter(".select2-highlighted")[0], choices.get());
            if (index >= choices.length) index = choices.length - 1;
            if (index < 0) index = 0;
            this.removeHighlight();
            choice = $(choices[index]);
            choice.addClass("select2-highlighted");
            this.ensureHighlightVisible();
            data = choice.data("select2-data");
            if (data) this.opts.element.trigger({
                type: "select2-highlight",
                val: this.id(data),
                choice: data
            });
        },
        removeHighlight: function() {
            this.results.find(".select2-highlighted").removeClass("select2-highlighted");
        },
        countSelectableResults: function() {
            return this.findHighlightableChoices().length;
        },
        highlightUnderEvent: function(event) {
            var el = $(event.target).closest(".select2-result-selectable");
            if (el.length > 0 && !el.is(".select2-highlighted")) {
                var choices = this.findHighlightableChoices();
                this.highlight(choices.index(el));
            } else if (0 == el.length) this.removeHighlight();
        },
        loadMoreIfNeeded: function() {
            var results = this.results, more = results.find("li.select2-more-results"), below, offset = -1, page = this.resultsPage + 1, self = this, term = this.search.val(), context = this.context;
            if (0 === more.length) return;
            below = more.offset().top - results.offset().top - results.height();
            if (below <= this.opts.loadMorePadding) {
                more.addClass("select2-active");
                this.opts.query({
                    element: this.opts.element,
                    term: term,
                    page: page,
                    context: context,
                    matcher: this.opts.matcher,
                    callback: this.bind(function(data) {
                        if (!self.opened()) return;
                        self.opts.populateResults.call(this, results, data.results, {
                            term: term,
                            page: page,
                            context: context
                        });
                        self.postprocessResults(data, false, false);
                        if (true === data.more) {
                            more.detach().appendTo(results).text(self.opts.formatLoadMore(page + 1));
                            window.setTimeout(function() {
                                self.loadMoreIfNeeded();
                            }, 10);
                        } else more.remove();
                        self.positionDropdown();
                        self.resultsPage = page;
                        self.context = data.context;
                    })
                });
            }
        },
        tokenize: function() {},
        updateResults: function(initial) {
            var search = this.search, results = this.results, opts = this.opts, data, self = this, input, term = search.val(), lastTerm = $.data(this.container, "select2-last-term"), queryNumber;
            if (true !== initial && lastTerm && equal(term, lastTerm)) return;
            $.data(this.container, "select2-last-term", term);
            if (true !== initial && (false === this.showSearchInput || !this.opened())) return;
            function postRender() {
                results.scrollTop(0);
                search.removeClass("select2-active");
                self.positionDropdown();
            }
            function render(html) {
                results.html(html);
                postRender();
            }
            queryNumber = ++this.queryCount;
            var maxSelSize = this.getMaximumSelectionSize();
            if (maxSelSize >= 1) {
                data = this.data();
                if ($.isArray(data) && data.length >= maxSelSize && checkFormatter(opts.formatSelectionTooBig, "formatSelectionTooBig")) {
                    render("<li class='select2-selection-limit'>" + opts.formatSelectionTooBig(maxSelSize) + "</li>");
                    return;
                }
            }
            if (search.val().length < opts.minimumInputLength) {
                if (checkFormatter(opts.formatInputTooShort, "formatInputTooShort")) render("<li class='select2-no-results'>" + opts.formatInputTooShort(search.val(), opts.minimumInputLength) + "</li>"); else render("");
                if (initial) this.showSearch(true);
                return;
            }
            if (opts.maximumInputLength && search.val().length > opts.maximumInputLength) {
                if (checkFormatter(opts.formatInputTooLong, "formatInputTooLong")) render("<li class='select2-no-results'>" + opts.formatInputTooLong(search.val(), opts.maximumInputLength) + "</li>"); else render("");
                return;
            }
            if (opts.formatSearching && 0 === this.findHighlightableChoices().length) render("<li class='select2-searching'>" + opts.formatSearching() + "</li>");
            search.addClass("select2-active");
            this.removeHighlight();
            input = this.tokenize();
            if (input != undefined && null != input) search.val(input);
            this.resultsPage = 1;
            opts.query({
                element: opts.element,
                term: search.val(),
                page: this.resultsPage,
                context: null,
                matcher: opts.matcher,
                callback: this.bind(function(data) {
                    var def;
                    if (queryNumber != this.queryCount) return;
                    if (!this.opened()) {
                        this.search.removeClass("select2-active");
                        return;
                    }
                    this.context = data.context === undefined ? null : data.context;
                    if (this.opts.createSearchChoice && "" !== search.val()) {
                        def = this.opts.createSearchChoice.call(self, search.val(), data.results);
                        if (def !== undefined && null !== def && self.id(def) !== undefined && null !== self.id(def)) if (0 === $(data.results).filter(function() {
                            return equal(self.id(this), self.id(def));
                        }).length) data.results.unshift(def);
                    }
                    if (0 === data.results.length && checkFormatter(opts.formatNoMatches, "formatNoMatches")) {
                        render("<li class='select2-no-results'>" + opts.formatNoMatches(search.val()) + "</li>");
                        return;
                    }
                    results.empty();
                    self.opts.populateResults.call(this, results, data.results, {
                        term: search.val(),
                        page: this.resultsPage,
                        context: null
                    });
                    if (true === data.more && checkFormatter(opts.formatLoadMore, "formatLoadMore")) {
                        results.append("<li class='select2-more-results'>" + self.opts.escapeMarkup(opts.formatLoadMore(this.resultsPage)) + "</li>");
                        window.setTimeout(function() {
                            self.loadMoreIfNeeded();
                        }, 10);
                    }
                    this.postprocessResults(data, initial);
                    postRender();
                    this.opts.element.trigger({
                        type: "select2-loaded",
                        data: data
                    });
                })
            });
        },
        cancel: function() {
            this.close();
        },
        blur: function() {
            if (this.opts.selectOnBlur) this.selectHighlighted({
                noFocus: true
            });
            this.close();
            this.container.removeClass("select2-container-active");
            if (this.search[0] === document.activeElement) this.search.blur();
            this.clearSearch();
            this.selection.find(".select2-search-choice-focus").removeClass("select2-search-choice-focus");
        },
        focusSearch: function() {
            focus(this.search);
        },
        selectHighlighted: function(options) {
            var index = this.highlight(), highlighted = this.results.find(".select2-highlighted"), data = highlighted.closest(".select2-result").data("select2-data");
            if (data) {
                this.highlight(index);
                this.onSelect(data, options);
                return true;
            }
            return false;
        },
        getPlaceholder: function() {
            return this.opts.element.attr("placeholder") || this.opts.element.attr("data-placeholder") || this.opts.element.data("placeholder") || this.opts.placeholder;
        },
        initContainerWidth: function() {
            function resolveContainerWidth() {
                var style, attrs, matches, i, l;
                if ("off" === this.opts.width) return null; else if ("element" === this.opts.width) return 0 === this.opts.element.outerWidth(false) ? "auto" : this.opts.element.outerWidth(false) + "px"; else if ("copy" === this.opts.width || "resolve" === this.opts.width) {
                    style = this.opts.element.attr("style");
                    if (style !== undefined) {
                        attrs = style.split(";");
                        for (i = 0, l = attrs.length; i < l; i += 1) {
                            matches = attrs[i].replace(/\s/g, "").match(/width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i);
                            if (null !== matches && matches.length >= 1) return matches[1];
                        }
                    }
                    style = this.opts.element.css("width");
                    if (style && style.length > 0) return style;
                    if ("resolve" === this.opts.width) return 0 === this.opts.element.outerWidth(false) ? "auto" : this.opts.element.outerWidth(false) + "px";
                    return null;
                } else if ($.isFunction(this.opts.width)) return this.opts.width(); else return this.opts.width;
            }
            var width = resolveContainerWidth.call(this);
            if (null !== width) this.container.css("width", width);
        }
    });
    SingleSelect2 = clazz(AbstractSelect2, {
        createContainer: function() {
            var container = $(document.createElement("div")).attr({
                "class": "select2-container"
            }).html([ "<a href='javascript:void(0)' onclick='return false;' class='select2-choice' tabindex='-1'>", "   <span>&nbsp;</span><abbr class='select2-search-choice-close'></abbr>", "   <div><b></b></div>", "</a>", "<input class='select2-focusser select2-offscreen' type='text'/>", "<div class='select2-drop select2-display-none'>", "   <div class='select2-search'>", "       <input type='text' autocomplete='off' autocorrect='off' autocapitilize='off' spellcheck='false' class='select2-input'/>", "   </div>", "   <ul class='select2-results'>", "   </ul>", "</div>" ].join(""));
            return container;
        },
        enableInterface: function() {
            if (this.parent.enableInterface.apply(this, arguments)) this.focusser.prop("disabled", !this.isInterfaceEnabled());
        },
        opening: function() {
            var el, range;
            this.parent.opening.apply(this, arguments);
            if (false !== this.showSearchInput) this.search.val(this.focusser.val());
            this.search.focus();
            el = this.search.get(0);
            if (el.createTextRange) {
                range = el.createTextRange();
                range.collapse(false);
                range.select();
            }
            this.focusser.prop("disabled", true).val("");
            this.updateResults(true);
            this.opts.element.trigger($.Event("select2-open"));
        },
        close: function() {
            if (!this.opened()) return;
            this.parent.close.apply(this, arguments);
            this.focusser.removeAttr("disabled");
            this.focusser.focus();
        },
        focus: function() {
            if (this.opened()) this.close(); else {
                this.focusser.removeAttr("disabled");
                this.focusser.focus();
            }
        },
        isFocused: function() {
            return this.container.hasClass("select2-container-active");
        },
        cancel: function() {
            this.parent.cancel.apply(this, arguments);
            this.focusser.removeAttr("disabled");
            this.focusser.focus();
        },
        initContainer: function() {
            var selection, container = this.container, dropdown = this.dropdown;
            this.showSearch(false);
            this.selection = selection = container.find(".select2-choice");
            this.focusser = container.find(".select2-focusser");
            this.focusser.attr("id", "s2id_autogen" + nextUid());
            $("label[for='" + this.opts.element.attr("id") + "']").attr("for", this.focusser.attr("id"));
            this.focusser.attr("tabindex", this.elementTabIndex);
            this.search.on("keydown", this.bind(function(e) {
                if (!this.isInterfaceEnabled()) return;
                if (e.which === KEY.PAGE_UP || e.which === KEY.PAGE_DOWN) {
                    killEvent(e);
                    return;
                }
                switch (e.which) {
                  case KEY.UP:
                  case KEY.DOWN:
                    this.moveHighlight(e.which === KEY.UP ? -1 : 1);
                    killEvent(e);
                    return;

                  case KEY.ENTER:
                    this.selectHighlighted();
                    killEvent(e);
                    return;

                  case KEY.TAB:
                    this.selectHighlighted({
                        noFocus: true
                    });
                    return;

                  case KEY.ESC:
                    this.cancel(e);
                    killEvent(e);
                    return;
                }
            }));
            this.search.on("blur", this.bind(function(e) {
                if (document.activeElement === this.body().get(0)) window.setTimeout(this.bind(function() {
                    this.search.focus();
                }), 0);
            }));
            this.focusser.on("keydown", this.bind(function(e) {
                if (!this.isInterfaceEnabled()) return;
                if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC) return;
                if (false === this.opts.openOnEnter && e.which === KEY.ENTER) {
                    killEvent(e);
                    return;
                }
                if (e.which == KEY.DOWN || e.which == KEY.UP || e.which == KEY.ENTER && this.opts.openOnEnter) {
                    this.open();
                    killEvent(e);
                    return;
                }
                if (e.which == KEY.DELETE || e.which == KEY.BACKSPACE) {
                    if (this.opts.allowClear) this.clear();
                    killEvent(e);
                    return;
                }
            }));
            installKeyUpChangeEvent(this.focusser);
            this.focusser.on("keyup-change input", this.bind(function(e) {
                e.stopPropagation();
                if (this.opened()) return;
                this.open();
            }));
            selection.on("mousedown", "abbr", this.bind(function(e) {
                if (!this.isInterfaceEnabled()) return;
                this.clear();
                killEventImmediately(e);
                this.close();
                this.selection.focus();
            }));
            selection.on("mousedown", this.bind(function(e) {
                if (!this.container.hasClass("select2-container-active")) this.opts.element.trigger($.Event("select2-focus"));
                if (this.opened()) this.close(); else if (this.isInterfaceEnabled()) this.open();
                killEvent(e);
            }));
            dropdown.on("mousedown", this.bind(function() {
                this.search.focus();
            }));
            selection.on("focus", this.bind(function(e) {
                killEvent(e);
            }));
            this.focusser.on("focus", this.bind(function() {
                if (!this.container.hasClass("select2-container-active")) this.opts.element.trigger($.Event("select2-focus"));
                this.container.addClass("select2-container-active");
            })).on("blur", this.bind(function() {
                if (!this.opened()) {
                    this.container.removeClass("select2-container-active");
                    this.opts.element.trigger($.Event("select2-blur"));
                }
            }));
            this.search.on("focus", this.bind(function() {
                if (!this.container.hasClass("select2-container-active")) this.opts.element.trigger($.Event("select2-focus"));
                this.container.addClass("select2-container-active");
            }));
            this.initContainerWidth();
            this.opts.element.addClass("select2-offscreen");
            this.setPlaceholder();
        },
        clear: function(triggerChange) {
            var data = this.selection.data("select2-data");
            if (data) {
                this.opts.element.val("");
                this.selection.find("span").empty();
                this.selection.removeData("select2-data");
                this.setPlaceholder();
                if (false !== triggerChange) {
                    this.opts.element.trigger({
                        type: "select2-removed",
                        val: this.id(data),
                        choice: data
                    });
                    this.triggerChange({
                        removed: data
                    });
                }
            }
        },
        initSelection: function() {
            var selected;
            if ("" === this.opts.element.val() && "" === this.opts.element.text()) {
                this.updateSelection([]);
                this.close();
                this.setPlaceholder();
            } else {
                var self = this;
                this.opts.initSelection.call(null, this.opts.element, function(selected) {
                    if (selected !== undefined && null !== selected) {
                        self.updateSelection(selected);
                        self.close();
                        self.setPlaceholder();
                    }
                });
            }
        },
        prepareOpts: function() {
            var opts = this.parent.prepareOpts.apply(this, arguments), self = this;
            if ("select" === opts.element.get(0).tagName.toLowerCase()) opts.initSelection = function(element, callback) {
                var selected = element.find(":selected");
                callback(self.optionToData(selected));
            }; else if ("data" in opts) opts.initSelection = opts.initSelection || function(element, callback) {
                var id = element.val();
                var match = null;
                opts.query({
                    matcher: function(term, text, el) {
                        var is_match = equal(id, opts.id(el));
                        if (is_match) match = el;
                        return is_match;
                    },
                    callback: !$.isFunction(callback) ? $.noop : function() {
                        callback(match);
                    }
                });
            };
            return opts;
        },
        getPlaceholder: function() {
            if (this.select) if ("" !== this.select.find("option").first().text()) return undefined;
            return this.parent.getPlaceholder.apply(this, arguments);
        },
        setPlaceholder: function() {
            var placeholder = this.getPlaceholder();
            if ("" === this.opts.element.val() && placeholder !== undefined) {
                if (this.select && "" !== this.select.find("option:first").text()) return;
                this.selection.find("span").html(this.opts.escapeMarkup(placeholder));
                this.selection.addClass("select2-default");
                this.container.removeClass("select2-allowclear");
            }
        },
        postprocessResults: function(data, initial, noHighlightUpdate) {
            var selected = 0, self = this, showSearchInput = true;
            this.findHighlightableChoices().each2(function(i, elm) {
                if (equal(self.id(elm.data("select2-data")), self.opts.element.val())) {
                    selected = i;
                    return false;
                }
            });
            if (false !== noHighlightUpdate) this.highlight(selected);
            if (true === initial && false === this.showSearchInput) {
                var min = this.opts.minimumResultsForSearch;
                if (min >= 0) this.showSearch(countResults(data.results) >= min);
            }
        },
        showSearch: function(showSearchInput) {
            this.showSearchInput = showSearchInput;
            this.dropdown.find(".select2-search").toggleClass("select2-search-hidden", !showSearchInput);
            this.dropdown.find(".select2-search").toggleClass("select2-offscreen", !showSearchInput);
            $(this.dropdown, this.container).toggleClass("select2-with-searchbox", showSearchInput);
        },
        onSelect: function(data, options) {
            if (!this.triggerSelect(data)) return;
            var old = this.opts.element.val(), oldData = this.data();
            this.opts.element.val(this.id(data));
            this.updateSelection(data);
            this.opts.element.trigger({
                type: "select2-selected",
                val: this.id(data),
                choice: data
            });
            this.close();
            if (!options || !options.noFocus) this.selection.focus();
            if (!equal(old, this.id(data))) this.triggerChange({
                added: data,
                removed: oldData
            });
        },
        updateSelection: function(data) {
            var container = this.selection.find("span"), formatted;
            this.selection.data("select2-data", data);
            container.empty();
            formatted = this.opts.formatSelection(data, container);
            if (formatted !== undefined) container.append(this.opts.escapeMarkup(formatted));
            this.selection.removeClass("select2-default");
            if (this.opts.allowClear && this.getPlaceholder() !== undefined) this.container.addClass("select2-allowclear");
        },
        val: function() {
            var val, triggerChange = false, data = null, self = this, oldData = this.data();
            if (0 === arguments.length) return this.opts.element.val();
            val = arguments[0];
            if (arguments.length > 1) triggerChange = arguments[1];
            if (this.select) {
                this.select.val(val).find(":selected").each2(function(i, elm) {
                    data = self.optionToData(elm);
                    return false;
                });
                this.updateSelection(data);
                this.setPlaceholder();
                if (triggerChange) this.triggerChange({
                    added: data,
                    removed: oldData
                });
            } else {
                if (this.opts.initSelection === undefined) throw new Error("cannot call val() if initSelection() is not defined");
                if (!val && 0 !== val) {
                    this.clear(triggerChange);
                    return;
                }
                this.opts.element.val(val);
                this.opts.initSelection(this.opts.element, function(data) {
                    self.opts.element.val(!data ? "" : self.id(data));
                    self.updateSelection(data);
                    self.setPlaceholder();
                    if (triggerChange) self.triggerChange({
                        added: data,
                        removed: oldData
                    });
                });
            }
        },
        clearSearch: function() {
            this.search.val("");
            this.focusser.val("");
        },
        data: function(value, triggerChange) {
            var data;
            if (0 === arguments.length) {
                data = this.selection.data("select2-data");
                if (data == undefined) data = null;
                return data;
            } else if (!value || "" === value) this.clear(triggerChange); else {
                data = this.data();
                this.opts.element.val(!value ? "" : this.id(value));
                this.updateSelection(value);
                if (triggerChange) this.triggerChange({
                    added: value,
                    removed: data
                });
            }
        }
    });
    MultiSelect2 = clazz(AbstractSelect2, {
        createContainer: function() {
            var container = $(document.createElement("div")).attr({
                "class": "select2-container select2-container-multi"
            }).html([ "    <ul class='select2-choices'>", "  <li class='select2-search-field'>", "    <input type='text' autocomplete='off' autocorrect='off' autocapitilize='off' spellcheck='false' class='select2-input'>", "  </li>", "</ul>", "<div class='select2-drop select2-drop-multi select2-display-none'>", "   <ul class='select2-results'>", "   </ul>", "</div>" ].join(""));
            return container;
        },
        prepareOpts: function() {
            var opts = this.parent.prepareOpts.apply(this, arguments), self = this;
            if ("select" === opts.element.get(0).tagName.toLowerCase()) opts.initSelection = function(element, callback) {
                var data = [];
                element.find(":selected").each2(function(i, elm) {
                    data.push(self.optionToData(elm));
                });
                callback(data);
            }; else if ("data" in opts) opts.initSelection = opts.initSelection || function(element, callback) {
                var ids = splitVal(element.val(), opts.separator);
                var matches = [];
                opts.query({
                    matcher: function(term, text, el) {
                        var is_match = $.grep(ids, function(id) {
                            return equal(id, opts.id(el));
                        }).length;
                        if (is_match) matches.push(el);
                        return is_match;
                    },
                    callback: !$.isFunction(callback) ? $.noop : function() {
                        var ordered = [];
                        for (var i = 0; i < ids.length; i++) {
                            var id = ids[i];
                            for (var j = 0; j < matches.length; j++) {
                                var match = matches[j];
                                if (equal(id, opts.id(match))) {
                                    ordered.push(match);
                                    matches.splice(j, 1);
                                    break;
                                }
                            }
                        }
                        callback(ordered);
                    }
                });
            };
            return opts;
        },
        selectChoice: function(choice) {
            var selected = this.container.find(".select2-search-choice-focus");
            if (selected.length && choice && choice[0] == selected[0]) ; else {
                if (selected.length) this.opts.element.trigger("choice-deselected", selected);
                selected.removeClass("select2-search-choice-focus");
                if (choice && choice.length) {
                    this.close();
                    choice.addClass("select2-search-choice-focus");
                    this.opts.element.trigger("choice-selected", choice);
                }
            }
        },
        initContainer: function() {
            var selector = ".select2-choices", selection;
            this.searchContainer = this.container.find(".select2-search-field");
            this.selection = selection = this.container.find(selector);
            var _this = this;
            this.selection.on("mousedown", ".select2-search-choice", function(e) {
                _this.search[0].focus();
                _this.selectChoice($(this));
            });
            this.search.attr("id", "s2id_autogen" + nextUid());
            $("label[for='" + this.opts.element.attr("id") + "']").attr("for", this.search.attr("id"));
            this.search.on("input paste", this.bind(function() {
                if (!this.isInterfaceEnabled()) return;
                if (!this.opened()) this.open();
            }));
            this.search.attr("tabindex", this.elementTabIndex);
            this.keydowns = 0;
            this.search.on("keydown", this.bind(function(e) {
                if (!this.isInterfaceEnabled()) return;
                ++this.keydowns;
                var selected = selection.find(".select2-search-choice-focus");
                var prev = selected.prev(".select2-search-choice:not(.select2-locked)");
                var next = selected.next(".select2-search-choice:not(.select2-locked)");
                var pos = getCursorInfo(this.search);
                if (selected.length && (e.which == KEY.LEFT || e.which == KEY.RIGHT || e.which == KEY.BACKSPACE || e.which == KEY.DELETE || e.which == KEY.ENTER)) {
                    var selectedChoice = selected;
                    if (e.which == KEY.LEFT && prev.length) selectedChoice = prev; else if (e.which == KEY.RIGHT) selectedChoice = next.length ? next : null; else if (e.which === KEY.BACKSPACE) {
                        this.unselect(selected.first());
                        this.search.width(10);
                        selectedChoice = prev.length ? prev : next;
                    } else if (e.which == KEY.DELETE) {
                        this.unselect(selected.first());
                        this.search.width(10);
                        selectedChoice = next.length ? next : null;
                    } else if (e.which == KEY.ENTER) selectedChoice = null;
                    this.selectChoice(selectedChoice);
                    killEvent(e);
                    if (!selectedChoice || !selectedChoice.length) this.open();
                    return;
                } else if ((e.which === KEY.BACKSPACE && 1 == this.keydowns || e.which == KEY.LEFT) && 0 == pos.offset && !pos.length) {
                    this.selectChoice(selection.find(".select2-search-choice:not(.select2-locked)").last());
                    killEvent(e);
                    return;
                } else this.selectChoice(null);
                if (this.opened()) switch (e.which) {
                  case KEY.UP:
                  case KEY.DOWN:
                    this.moveHighlight(e.which === KEY.UP ? -1 : 1);
                    killEvent(e);
                    return;

                  case KEY.ENTER:
                    if (!this.selectHighlighted()) this.tokenize("\n");
                    killEvent(e);
                    return;

                  case KEY.TAB:
                    if (!this.selectHighlighted({
                        noFocus: true
                    })) this.tokenize("	");
                    return;

                  case KEY.ESC:
                    this.cancel(e);
                    killEvent(e);
                    return;
                }
                if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.BACKSPACE || e.which === KEY.ESC) return;
                if (e.which === KEY.ENTER) if (false === this.opts.openOnEnter) return; else if (e.altKey || e.ctrlKey || e.shiftKey || e.metaKey) return;
                this.open();
                if (e.which === KEY.PAGE_UP || e.which === KEY.PAGE_DOWN) killEvent(e);
                if (e.which === KEY.ENTER) killEvent(e);
            }));
            this.search.on("keyup", this.bind(function(e) {
                this.keydowns = 0;
                this.resizeSearch();
            }));
            this.search.on("blur", this.bind(function(e) {
                this.container.removeClass("select2-container-active");
                this.search.removeClass("select2-focused");
                this.selectChoice(null);
                if (!this.opened()) this.clearSearch();
                e.stopImmediatePropagation();
                this.opts.element.trigger($.Event("select2-blur"));
            }));
            this.container.on("mousedown", selector, this.bind(function(e) {
                if (!this.isInterfaceEnabled()) return;
                if ($(e.target).closest(".select2-search-choice").length > 0) return;
                this.selectChoice(null);
                this.clearPlaceholder();
                if (!this.container.hasClass("select2-container-active")) this.opts.element.trigger($.Event("select2-focus"));
                this.open();
                this.focusSearch();
                e.preventDefault();
            }));
            this.container.on("focus", selector, this.bind(function() {
                if (!this.isInterfaceEnabled()) return;
                if (!this.container.hasClass("select2-container-active")) this.opts.element.trigger($.Event("select2-focus"));
                this.container.addClass("select2-container-active");
                this.dropdown.addClass("select2-drop-active");
                this.clearPlaceholder();
            }));
            this.initContainerWidth();
            this.opts.element.addClass("select2-offscreen");
            this.clearSearch();
        },
        enableInterface: function() {
            if (this.parent.enableInterface.apply(this, arguments)) this.search.prop("disabled", !this.isInterfaceEnabled());
        },
        initSelection: function() {
            var data;
            if ("" === this.opts.element.val() && "" === this.opts.element.text()) {
                this.updateSelection([]);
                this.close();
                this.clearSearch();
            }
            if (this.select || "" !== this.opts.element.val()) {
                var self = this;
                this.opts.initSelection.call(null, this.opts.element, function(data) {
                    if (data !== undefined && null !== data) {
                        self.updateSelection(data);
                        self.close();
                        self.clearSearch();
                    }
                });
            }
        },
        clearSearch: function() {
            var placeholder = this.getPlaceholder(), maxWidth = this.getMaxSearchWidth();
            if (placeholder !== undefined && 0 === this.getVal().length && false === this.search.hasClass("select2-focused")) {
                this.search.val(placeholder).addClass("select2-default");
                this.search.width(maxWidth > 0 ? maxWidth : this.container.css("width"));
            } else this.search.val("").width(10);
        },
        clearPlaceholder: function() {
            if (this.search.hasClass("select2-default")) this.search.val("").removeClass("select2-default");
        },
        opening: function() {
            this.clearPlaceholder();
            this.resizeSearch();
            this.parent.opening.apply(this, arguments);
            this.focusSearch();
            this.updateResults(true);
            this.search.focus();
            this.opts.element.trigger($.Event("select2-open"));
        },
        close: function() {
            if (!this.opened()) return;
            this.parent.close.apply(this, arguments);
        },
        focus: function() {
            this.close();
            this.search.focus();
        },
        isFocused: function() {
            return this.search.hasClass("select2-focused");
        },
        updateSelection: function(data) {
            var ids = [], filtered = [], self = this;
            $(data).each(function() {
                if (indexOf(self.id(this), ids) < 0) {
                    ids.push(self.id(this));
                    filtered.push(this);
                }
            });
            data = filtered;
            this.selection.find(".select2-search-choice").remove();
            $(data).each(function() {
                self.addSelectedChoice(this);
            });
            self.postprocessResults();
        },
        tokenize: function(suffix) {
            var input = this.search.val() + (suffix || "");
            var leftover = this.opts.tokenizer.call(this, input, this.data(), this.bind(this.onSelect), this.opts);
            if (null != leftover && leftover != undefined && leftover != input) {
                this.search.val(leftover);
                if (leftover.length > 0) this.open();
            }
        },
        onSelect: function(data, options) {
            if (!this.triggerSelect(data)) return;
            this.addSelectedChoice(data);
            this.opts.element.trigger({
                type: "selected",
                val: this.id(data),
                choice: data
            });
            if (this.select || !this.opts.closeOnSelect) this.postprocessResults();
            if (this.opts.closeOnSelect) {
                this.close();
                this.search.width(10);
            } else if (this.countSelectableResults() > 0) {
                this.search.width(10);
                this.resizeSearch();
                if (this.getMaximumSelectionSize() > 0 && this.val().length >= this.getMaximumSelectionSize()) this.updateResults(true);
                this.positionDropdown();
            } else {
                this.close();
                this.search.width(10);
            }
            this.triggerChange({
                added: data
            });
            if (!options || !options.noFocus) this.focusSearch();
        },
        cancel: function() {
            this.close();
            this.focusSearch();
        },
        addSelectedChoice: function(data) {
            var enableChoice = !data.locked, enabledItem = $("<li class='select2-search-choice'>" + "    <div></div>" + "    <a href='#' onclick='return false;' class='select2-search-choice-close' tabindex='-1'></a>" + "</li>"), disabledItem = $("<li class='select2-search-choice select2-locked'>" + "<div></div>" + "</li>");
            var choice = enableChoice ? enabledItem : disabledItem, id = this.id(data), val = this.getVal(), formatted;
            formatted = this.opts.formatSelection(data, choice.find("div"));
            if (formatted != undefined) choice.find("div").replaceWith("<div title='" + this.opts.escapeMarkup(formatted) + "'>" + this.opts.escapeMarkup(formatted) + "</div>");
            if (enableChoice) choice.find(".select2-search-choice-close").on("mousedown", killEvent).on("click dblclick", this.bind(function(e) {
                if (!this.isInterfaceEnabled()) return;
                $(e.target).closest(".select2-search-choice").fadeOut("fast", this.bind(function() {
                    this.unselect($(e.target));
                    this.selection.find(".select2-search-choice-focus").removeClass("select2-search-choice-focus");
                    this.close();
                    this.focusSearch();
                })).dequeue();
                killEvent(e);
            })).on("focus", this.bind(function() {
                if (!this.isInterfaceEnabled()) return;
                this.container.addClass("select2-container-active");
                this.dropdown.addClass("select2-drop-active");
            }));
            choice.data("select2-data", data);
            choice.insertBefore(this.searchContainer);
            val.push(id);
            this.setVal(val);
        },
        unselect: function(selected) {
            var val = this.getVal(), data, index;
            selected = selected.closest(".select2-search-choice");
            if (0 === selected.length) throw "Invalid argument: " + selected + ". Must be .select2-search-choice";
            data = selected.data("select2-data");
            if (!data) return;
            index = indexOf(this.id(data), val);
            if (index >= 0) {
                val.splice(index, 1);
                this.setVal(val);
                if (this.select) this.postprocessResults();
            }
            selected.remove();
            this.opts.element.trigger({
                type: "removed",
                val: this.id(data),
                choice: data
            });
            this.triggerChange({
                removed: data
            });
        },
        postprocessResults: function(data, initial, noHighlightUpdate) {
            var val = this.getVal(), choices = this.results.find(".select2-result"), compound = this.results.find(".select2-result-with-children"), self = this;
            choices.each2(function(i, choice) {
                var id = self.id(choice.data("select2-data"));
                if (indexOf(id, val) >= 0) {
                    choice.addClass("select2-selected");
                    choice.find(".select2-result-selectable").addClass("select2-selected");
                }
            });
            compound.each2(function(i, choice) {
                if (!choice.is(".select2-result-selectable") && 0 === choice.find(".select2-result-selectable:not(.select2-selected)").length) choice.addClass("select2-selected");
            });
            if (this.highlight() == -1 && false !== noHighlightUpdate) self.highlight(0);
            if (!this.opts.createSearchChoice && !choices.filter(".select2-result:not(.select2-selected)").length > 0) this.results.append("<li class='select2-no-results'>" + self.opts.formatNoMatches(self.search.val()) + "</li>");
        },
        getMaxSearchWidth: function() {
            return this.selection.width() - getSideBorderPadding(this.search);
        },
        resizeSearch: function() {
            var minimumWidth, left, maxWidth, containerLeft, searchWidth, sideBorderPadding = getSideBorderPadding(this.search);
            minimumWidth = measureTextWidth(this.search) + 10;
            left = this.search.offset().left;
            maxWidth = this.selection.width();
            containerLeft = this.selection.offset().left;
            searchWidth = maxWidth - (left - containerLeft) - sideBorderPadding;
            if (searchWidth < minimumWidth) searchWidth = maxWidth - sideBorderPadding;
            if (searchWidth < 40) searchWidth = maxWidth - sideBorderPadding;
            if (searchWidth <= 0) searchWidth = minimumWidth;
            this.search.width(searchWidth);
        },
        getVal: function() {
            var val;
            if (this.select) {
                val = this.select.val();
                return null === val ? [] : val;
            } else {
                val = this.opts.element.val();
                return splitVal(val, this.opts.separator);
            }
        },
        setVal: function(val) {
            var unique;
            if (this.select) this.select.val(val); else {
                unique = [];
                $(val).each(function() {
                    if (indexOf(this, unique) < 0) unique.push(this);
                });
                this.opts.element.val(0 === unique.length ? "" : unique.join(this.opts.separator));
            }
        },
        buildChangeDetails: function(old, current) {
            var current = current.slice(0), old = old.slice(0);
            for (var i = 0; i < current.length; i++) for (var j = 0; j < old.length; j++) if (equal(this.opts.id(current[i]), this.opts.id(old[j]))) {
                current.splice(i, 1);
                i--;
                old.splice(j, 1);
                j--;
            }
            return {
                added: current,
                removed: old
            };
        },
        val: function(val, triggerChange) {
            var oldData, self = this, changeDetails;
            if (0 === arguments.length) return this.getVal();
            oldData = this.data();
            if (!oldData.length) oldData = [];
            if (!val && 0 !== val) {
                this.opts.element.val("");
                this.updateSelection([]);
                this.clearSearch();
                if (triggerChange) this.triggerChange({
                    added: this.data(),
                    removed: oldData
                });
                return;
            }
            this.setVal(val);
            if (this.select) {
                this.opts.initSelection(this.select, this.bind(this.updateSelection));
                if (triggerChange) this.triggerChange(this.buildChangeDetails(oldData, this.data()));
            } else {
                if (this.opts.initSelection === undefined) throw new Error("val() cannot be called if initSelection() is not defined");
                this.opts.initSelection(this.opts.element, function(data) {
                    var ids = $(data).map(self.id);
                    self.setVal(ids);
                    self.updateSelection(data);
                    self.clearSearch();
                    if (triggerChange) self.triggerChange(this.buildChangeDetails(oldData, this.data()));
                });
            }
            this.clearSearch();
        },
        onSortStart: function() {
            if (this.select) throw new Error("Sorting of elements is not supported when attached to <select>. Attach to <input type='hidden'/> instead.");
            this.search.width(0);
            this.searchContainer.hide();
        },
        onSortEnd: function() {
            var val = [], self = this;
            this.searchContainer.show();
            this.searchContainer.appendTo(this.searchContainer.parent());
            this.resizeSearch();
            this.selection.find(".select2-search-choice").each(function() {
                val.push(self.opts.id($(this).data("select2-data")));
            });
            this.setVal(val);
            this.triggerChange();
        },
        data: function(values, triggerChange) {
            var self = this, ids, old;
            if (0 === arguments.length) return this.selection.find(".select2-search-choice").map(function() {
                return $(this).data("select2-data");
            }).get(); else {
                old = this.data();
                if (!values) values = [];
                ids = $.map(values, function(e) {
                    return self.opts.id(e);
                });
                this.setVal(ids);
                this.updateSelection(values);
                this.clearSearch();
                if (triggerChange) this.triggerChange(this.buildChangeDetails(old, this.data()));
            }
        }
    });
    $.fn.select2 = function() {
        var args = Array.prototype.slice.call(arguments, 0), opts, select2, value, multiple, allowedMethods = [ "val", "destroy", "opened", "open", "close", "focus", "isFocused", "container", "onSortStart", "onSortEnd", "enable", "readonly", "positionDropdown", "data" ], valueMethods = [ "val", "opened", "isFocused", "container", "data" ];
        this.each(function() {
            if (0 === args.length || "object" === typeof args[0]) {
                opts = 0 === args.length ? {} : $.extend({}, args[0]);
                opts.element = $(this);
                if ("select" === opts.element.get(0).tagName.toLowerCase()) multiple = opts.element.prop("multiple"); else {
                    multiple = opts.multiple || false;
                    if ("tags" in opts) opts.multiple = multiple = true;
                }
                select2 = multiple ? new MultiSelect2() : new SingleSelect2();
                select2.init(opts);
            } else if ("string" === typeof args[0]) {
                if (indexOf(args[0], allowedMethods) < 0) throw "Unknown method: " + args[0];
                value = undefined;
                select2 = $(this).data("select2");
                if (select2 === undefined) return;
                if ("container" === args[0]) value = select2.container; else value = select2[args[0]].apply(select2, args.slice(1));
                if (indexOf(args[0], valueMethods) >= 0) return false;
            } else throw "Invalid arguments to select2 plugin: " + args;
        });
        return value === undefined ? this : value;
    };
    $.fn.select2.defaults = {
        width: "copy",
        loadMorePadding: 0,
        closeOnSelect: true,
        openOnEnter: true,
        containerCss: {},
        dropdownCss: {},
        containerCssClass: "",
        dropdownCssClass: "",
        formatResult: function(result, container, query, escapeMarkup) {
            var markup = [];
            markMatch(result.text, query.term, markup, escapeMarkup);
            return markup.join("");
        },
        formatSelection: function(data, container) {
            return data ? data.text : undefined;
        },
        sortResults: function(results, container, query) {
            return results;
        },
        formatResultCssClass: function(data) {
            return undefined;
        },
        formatNoMatches: function() {
            return "No matches found";
        },
        formatInputTooShort: function(input, min) {
            var n = min - input.length;
            return "Please enter " + n + " more character" + (1 == n ? "" : "s");
        },
        formatInputTooLong: function(input, max) {
            var n = input.length - max;
            return "Please delete " + n + " character" + (1 == n ? "" : "s");
        },
        formatSelectionTooBig: function(limit) {
            return "You can only select " + limit + " item" + (1 == limit ? "" : "s");
        },
        formatLoadMore: function(pageNumber) {
            return "Loading more results...";
        },
        formatSearching: function() {
            return "Searching...";
        },
        minimumResultsForSearch: 0,
        minimumInputLength: 0,
        maximumInputLength: null,
        maximumSelectionSize: 0,
        id: function(e) {
            return e.id;
        },
        matcher: function(term, text) {
            return ("" + text).toUpperCase().indexOf(("" + term).toUpperCase()) >= 0;
        },
        separator: ",",
        tokenSeparators: [],
        tokenizer: defaultTokenizer,
        escapeMarkup: function(markup) {
            var replace_map = {
                "\\": "&#92;",
                "&": "&amp;",
                "<": "&lt;",
                ">": "&gt;",
                '"': "&quot;",
                "'": "&#39;",
                "/": "&#47;"
            };
            return String(markup).replace(/[&<>"'\/\\]/g, function(match) {
                return replace_map[match];
            });
        },
        blurOnChange: false,
        selectOnBlur: false,
        adaptContainerCssClass: function(c) {
            return c;
        },
        adaptDropdownCssClass: function(c) {
            return null;
        }
    };
    $.fn.select2.ajaxDefaults = {
        transport: $.ajax,
        params: {
            type: "GET",
            cache: false,
            dataType: "json"
        }
    };
    window.Select2 = {
        query: {
            ajax: ajax,
            local: local,
            tags: tags
        },
        util: {
            debounce: debounce,
            markMatch: markMatch
        },
        "class": {
            "abstract": AbstractSelect2,
            single: SingleSelect2,
            multi: MultiSelect2
        }
    };
})(jQuery);

(function($, undefined) {
    var dataSpace = "ui-effects-";
    $.effects = {
        effect: {}
    };
    (function(jQuery, undefined) {
        var stepHooks = "backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor", rplusequals = /^([\-+])=\s*(\d+\.?\d*)/, stringParsers = [ {
            re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
            parse: function(execResult) {
                return [ execResult[1], execResult[2], execResult[3], execResult[4] ];
            }
        }, {
            re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
            parse: function(execResult) {
                return [ 2.55 * execResult[1], 2.55 * execResult[2], 2.55 * execResult[3], execResult[4] ];
            }
        }, {
            re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,
            parse: function(execResult) {
                return [ parseInt(execResult[1], 16), parseInt(execResult[2], 16), parseInt(execResult[3], 16) ];
            }
        }, {
            re: /#([a-f0-9])([a-f0-9])([a-f0-9])/,
            parse: function(execResult) {
                return [ parseInt(execResult[1] + execResult[1], 16), parseInt(execResult[2] + execResult[2], 16), parseInt(execResult[3] + execResult[3], 16) ];
            }
        }, {
            re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
            space: "hsla",
            parse: function(execResult) {
                return [ execResult[1], execResult[2] / 100, execResult[3] / 100, execResult[4] ];
            }
        } ], color = jQuery.Color = function(color, green, blue, alpha) {
            return new jQuery.Color.fn.parse(color, green, blue, alpha);
        }, spaces = {
            rgba: {
                props: {
                    red: {
                        idx: 0,
                        type: "byte"
                    },
                    green: {
                        idx: 1,
                        type: "byte"
                    },
                    blue: {
                        idx: 2,
                        type: "byte"
                    }
                }
            },
            hsla: {
                props: {
                    hue: {
                        idx: 0,
                        type: "degrees"
                    },
                    saturation: {
                        idx: 1,
                        type: "percent"
                    },
                    lightness: {
                        idx: 2,
                        type: "percent"
                    }
                }
            }
        }, propTypes = {
            "byte": {
                floor: true,
                max: 255
            },
            percent: {
                max: 1
            },
            degrees: {
                mod: 360,
                floor: true
            }
        }, support = color.support = {}, supportElem = jQuery("<p>")[0], colors, each = jQuery.each;
        supportElem.style.cssText = "background-color:rgba(1,1,1,.5)";
        support.rgba = supportElem.style.backgroundColor.indexOf("rgba") > -1;
        each(spaces, function(spaceName, space) {
            space.cache = "_" + spaceName;
            space.props.alpha = {
                idx: 3,
                type: "percent",
                def: 1
            };
        });
        function clamp(value, prop, allowEmpty) {
            var type = propTypes[prop.type] || {};
            if (null == value) return allowEmpty || !prop.def ? null : prop.def;
            value = type.floor ? ~~value : parseFloat(value);
            if (isNaN(value)) return prop.def;
            if (type.mod) return (value + type.mod) % type.mod;
            return 0 > value ? 0 : type.max < value ? type.max : value;
        }
        function stringParse(string) {
            var inst = color(), rgba = inst._rgba = [];
            string = string.toLowerCase();
            each(stringParsers, function(i, parser) {
                var parsed, match = parser.re.exec(string), values = match && parser.parse(match), spaceName = parser.space || "rgba";
                if (values) {
                    parsed = inst[spaceName](values);
                    inst[spaces[spaceName].cache] = parsed[spaces[spaceName].cache];
                    rgba = inst._rgba = parsed._rgba;
                    return false;
                }
            });
            if (rgba.length) {
                if ("0,0,0,0" === rgba.join()) jQuery.extend(rgba, colors.transparent);
                return inst;
            }
            return colors[string];
        }
        color.fn = jQuery.extend(color.prototype, {
            parse: function(red, green, blue, alpha) {
                if (red === undefined) {
                    this._rgba = [ null, null, null, null ];
                    return this;
                }
                if (red.jquery || red.nodeType) {
                    red = jQuery(red).css(green);
                    green = undefined;
                }
                var inst = this, type = jQuery.type(red), rgba = this._rgba = [];
                if (green !== undefined) {
                    red = [ red, green, blue, alpha ];
                    type = "array";
                }
                if ("string" === type) return this.parse(stringParse(red) || colors._default);
                if ("array" === type) {
                    each(spaces.rgba.props, function(key, prop) {
                        rgba[prop.idx] = clamp(red[prop.idx], prop);
                    });
                    return this;
                }
                if ("object" === type) {
                    if (red instanceof color) each(spaces, function(spaceName, space) {
                        if (red[space.cache]) inst[space.cache] = red[space.cache].slice();
                    }); else each(spaces, function(spaceName, space) {
                        var cache = space.cache;
                        each(space.props, function(key, prop) {
                            if (!inst[cache] && space.to) {
                                if ("alpha" === key || null == red[key]) return;
                                inst[cache] = space.to(inst._rgba);
                            }
                            inst[cache][prop.idx] = clamp(red[key], prop, true);
                        });
                        if (inst[cache] && jQuery.inArray(null, inst[cache].slice(0, 3)) < 0) {
                            inst[cache][3] = 1;
                            if (space.from) inst._rgba = space.from(inst[cache]);
                        }
                    });
                    return this;
                }
            },
            is: function(compare) {
                var is = color(compare), same = true, inst = this;
                each(spaces, function(_, space) {
                    var localCache, isCache = is[space.cache];
                    if (isCache) {
                        localCache = inst[space.cache] || space.to && space.to(inst._rgba) || [];
                        each(space.props, function(_, prop) {
                            if (null != isCache[prop.idx]) {
                                same = isCache[prop.idx] === localCache[prop.idx];
                                return same;
                            }
                        });
                    }
                    return same;
                });
                return same;
            },
            _space: function() {
                var used = [], inst = this;
                each(spaces, function(spaceName, space) {
                    if (inst[space.cache]) used.push(spaceName);
                });
                return used.pop();
            },
            transition: function(other, distance) {
                var end = color(other), spaceName = end._space(), space = spaces[spaceName], startColor = 0 === this.alpha() ? color("transparent") : this, start = startColor[space.cache] || space.to(startColor._rgba), result = start.slice();
                end = end[space.cache];
                each(space.props, function(key, prop) {
                    var index = prop.idx, startValue = start[index], endValue = end[index], type = propTypes[prop.type] || {};
                    if (null === endValue) return;
                    if (null === startValue) result[index] = endValue; else {
                        if (type.mod) if (endValue - startValue > type.mod / 2) startValue += type.mod; else if (startValue - endValue > type.mod / 2) startValue -= type.mod;
                        result[index] = clamp((endValue - startValue) * distance + startValue, prop);
                    }
                });
                return this[spaceName](result);
            },
            blend: function(opaque) {
                if (1 === this._rgba[3]) return this;
                var rgb = this._rgba.slice(), a = rgb.pop(), blend = color(opaque)._rgba;
                return color(jQuery.map(rgb, function(v, i) {
                    return (1 - a) * blend[i] + a * v;
                }));
            },
            toRgbaString: function() {
                var prefix = "rgba(", rgba = jQuery.map(this._rgba, function(v, i) {
                    return null == v ? i > 2 ? 1 : 0 : v;
                });
                if (1 === rgba[3]) {
                    rgba.pop();
                    prefix = "rgb(";
                }
                return prefix + rgba.join() + ")";
            },
            toHslaString: function() {
                var prefix = "hsla(", hsla = jQuery.map(this.hsla(), function(v, i) {
                    if (null == v) v = i > 2 ? 1 : 0;
                    if (i && i < 3) v = Math.round(100 * v) + "%";
                    return v;
                });
                if (1 === hsla[3]) {
                    hsla.pop();
                    prefix = "hsl(";
                }
                return prefix + hsla.join() + ")";
            },
            toHexString: function(includeAlpha) {
                var rgba = this._rgba.slice(), alpha = rgba.pop();
                if (includeAlpha) rgba.push(~~(255 * alpha));
                return "#" + jQuery.map(rgba, function(v) {
                    v = (v || 0).toString(16);
                    return 1 === v.length ? "0" + v : v;
                }).join("");
            },
            toString: function() {
                return 0 === this._rgba[3] ? "transparent" : this.toRgbaString();
            }
        });
        color.fn.parse.prototype = color.fn;
        function hue2rgb(p, q, h) {
            h = (h + 1) % 1;
            if (6 * h < 1) return p + 6 * (q - p) * h;
            if (2 * h < 1) return q;
            if (3 * h < 2) return p + 6 * (q - p) * (2 / 3 - h);
            return p;
        }
        spaces.hsla.to = function(rgba) {
            if (null == rgba[0] || null == rgba[1] || null == rgba[2]) return [ null, null, null, rgba[3] ];
            var r = rgba[0] / 255, g = rgba[1] / 255, b = rgba[2] / 255, a = rgba[3], max = Math.max(r, g, b), min = Math.min(r, g, b), diff = max - min, add = max + min, l = .5 * add, h, s;
            if (min === max) h = 0; else if (r === max) h = 60 * (g - b) / diff + 360; else if (g === max) h = 60 * (b - r) / diff + 120; else h = 60 * (r - g) / diff + 240;
            if (0 === diff) s = 0; else if (l <= .5) s = diff / add; else s = diff / (2 - add);
            return [ Math.round(h) % 360, s, l, null == a ? 1 : a ];
        };
        spaces.hsla.from = function(hsla) {
            if (null == hsla[0] || null == hsla[1] || null == hsla[2]) return [ null, null, null, hsla[3] ];
            var h = hsla[0] / 360, s = hsla[1], l = hsla[2], a = hsla[3], q = l <= .5 ? l * (1 + s) : l + s - l * s, p = 2 * l - q;
            return [ Math.round(255 * hue2rgb(p, q, h + 1 / 3)), Math.round(255 * hue2rgb(p, q, h)), Math.round(255 * hue2rgb(p, q, h - 1 / 3)), a ];
        };
        each(spaces, function(spaceName, space) {
            var props = space.props, cache = space.cache, to = space.to, from = space.from;
            color.fn[spaceName] = function(value) {
                if (to && !this[cache]) this[cache] = to(this._rgba);
                if (value === undefined) return this[cache].slice();
                var ret, type = jQuery.type(value), arr = "array" === type || "object" === type ? value : arguments, local = this[cache].slice();
                each(props, function(key, prop) {
                    var val = arr["object" === type ? key : prop.idx];
                    if (null == val) val = local[prop.idx];
                    local[prop.idx] = clamp(val, prop);
                });
                if (from) {
                    ret = color(from(local));
                    ret[cache] = local;
                    return ret;
                } else return color(local);
            };
            each(props, function(key, prop) {
                if (color.fn[key]) return;
                color.fn[key] = function(value) {
                    var vtype = jQuery.type(value), fn = "alpha" === key ? this._hsla ? "hsla" : "rgba" : spaceName, local = this[fn](), cur = local[prop.idx], match;
                    if ("undefined" === vtype) return cur;
                    if ("function" === vtype) {
                        value = value.call(this, cur);
                        vtype = jQuery.type(value);
                    }
                    if (null == value && prop.empty) return this;
                    if ("string" === vtype) {
                        match = rplusequals.exec(value);
                        if (match) value = cur + parseFloat(match[2]) * ("+" === match[1] ? 1 : -1);
                    }
                    local[prop.idx] = value;
                    return this[fn](local);
                };
            });
        });
        color.hook = function(hook) {
            var hooks = hook.split(" ");
            each(hooks, function(i, hook) {
                jQuery.cssHooks[hook] = {
                    set: function(elem, value) {
                        var parsed, curElem, backgroundColor = "";
                        if ("transparent" !== value && ("string" !== jQuery.type(value) || (parsed = stringParse(value)))) {
                            value = color(parsed || value);
                            if (!support.rgba && 1 !== value._rgba[3]) {
                                curElem = "backgroundColor" === hook ? elem.parentNode : elem;
                                while (("" === backgroundColor || "transparent" === backgroundColor) && curElem && curElem.style) try {
                                    backgroundColor = jQuery.css(curElem, "backgroundColor");
                                    curElem = curElem.parentNode;
                                } catch (e) {}
                                value = value.blend(backgroundColor && "transparent" !== backgroundColor ? backgroundColor : "_default");
                            }
                            value = value.toRgbaString();
                        }
                        try {
                            elem.style[hook] = value;
                        } catch (e) {}
                    }
                };
                jQuery.fx.step[hook] = function(fx) {
                    if (!fx.colorInit) {
                        fx.start = color(fx.elem, hook);
                        fx.end = color(fx.end);
                        fx.colorInit = true;
                    }
                    jQuery.cssHooks[hook].set(fx.elem, fx.start.transition(fx.end, fx.pos));
                };
            });
        };
        color.hook(stepHooks);
        jQuery.cssHooks.borderColor = {
            expand: function(value) {
                var expanded = {};
                each([ "Top", "Right", "Bottom", "Left" ], function(i, part) {
                    expanded["border" + part + "Color"] = value;
                });
                return expanded;
            }
        };
        colors = jQuery.Color.names = {
            aqua: "#00ffff",
            black: "#000000",
            blue: "#0000ff",
            fuchsia: "#ff00ff",
            gray: "#808080",
            green: "#008000",
            lime: "#00ff00",
            maroon: "#800000",
            navy: "#000080",
            olive: "#808000",
            purple: "#800080",
            red: "#ff0000",
            silver: "#c0c0c0",
            teal: "#008080",
            white: "#ffffff",
            yellow: "#ffff00",
            transparent: [ null, null, null, 0 ],
            _default: "#ffffff"
        };
    })(jQuery);
    (function() {
        var classAnimationActions = [ "add", "remove", "toggle" ], shorthandStyles = {
            border: 1,
            borderBottom: 1,
            borderColor: 1,
            borderLeft: 1,
            borderRight: 1,
            borderTop: 1,
            borderWidth: 1,
            margin: 1,
            padding: 1
        };
        $.each([ "borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle" ], function(_, prop) {
            $.fx.step[prop] = function(fx) {
                if ("none" !== fx.end && !fx.setAttr || 1 === fx.pos && !fx.setAttr) {
                    jQuery.style(fx.elem, prop, fx.end);
                    fx.setAttr = true;
                }
            };
        });
        function getElementStyles(elem) {
            var key, len, style = elem.ownerDocument.defaultView ? elem.ownerDocument.defaultView.getComputedStyle(elem, null) : elem.currentStyle, styles = {};
            if (style && style.length && style[0] && style[style[0]]) {
                len = style.length;
                while (len--) {
                    key = style[len];
                    if ("string" === typeof style[key]) styles[$.camelCase(key)] = style[key];
                }
            } else for (key in style) if ("string" === typeof style[key]) styles[key] = style[key];
            return styles;
        }
        function styleDifference(oldStyle, newStyle) {
            var diff = {}, name, value;
            for (name in newStyle) {
                value = newStyle[name];
                if (oldStyle[name] !== value) if (!shorthandStyles[name]) if ($.fx.step[name] || !isNaN(parseFloat(value))) diff[name] = value;
            }
            return diff;
        }
        if (!$.fn.addBack) $.fn.addBack = function(selector) {
            return this.add(null == selector ? this.prevObject : this.prevObject.filter(selector));
        };
        $.effects.animateClass = function(value, duration, easing, callback) {
            var o = $.speed(duration, easing, callback);
            return this.queue(function() {
                var animated = $(this), baseClass = animated.attr("class") || "", applyClassChange, allAnimations = o.children ? animated.find("*").addBack() : animated;
                allAnimations = allAnimations.map(function() {
                    var el = $(this);
                    return {
                        el: el,
                        start: getElementStyles(this)
                    };
                });
                applyClassChange = function() {
                    $.each(classAnimationActions, function(i, action) {
                        if (value[action]) animated[action + "Class"](value[action]);
                    });
                };
                applyClassChange();
                allAnimations = allAnimations.map(function() {
                    this.end = getElementStyles(this.el[0]);
                    this.diff = styleDifference(this.start, this.end);
                    return this;
                });
                animated.attr("class", baseClass);
                allAnimations = allAnimations.map(function() {
                    var styleInfo = this, dfd = $.Deferred(), opts = $.extend({}, o, {
                        queue: false,
                        complete: function() {
                            dfd.resolve(styleInfo);
                        }
                    });
                    this.el.animate(this.diff, opts);
                    return dfd.promise();
                });
                $.when.apply($, allAnimations.get()).done(function() {
                    applyClassChange();
                    $.each(arguments, function() {
                        var el = this.el;
                        $.each(this.diff, function(key) {
                            el.css(key, "");
                        });
                    });
                    o.complete.call(animated[0]);
                });
            });
        };
        $.fn.extend({
            addClass: function(orig) {
                return function(classNames, speed, easing, callback) {
                    return speed ? $.effects.animateClass.call(this, {
                        add: classNames
                    }, speed, easing, callback) : orig.apply(this, arguments);
                };
            }($.fn.addClass),
            removeClass: function(orig) {
                return function(classNames, speed, easing, callback) {
                    return arguments.length > 1 ? $.effects.animateClass.call(this, {
                        remove: classNames
                    }, speed, easing, callback) : orig.apply(this, arguments);
                };
            }($.fn.removeClass),
            toggleClass: function(orig) {
                return function(classNames, force, speed, easing, callback) {
                    if ("boolean" === typeof force || force === undefined) if (!speed) return orig.apply(this, arguments); else return $.effects.animateClass.call(this, force ? {
                        add: classNames
                    } : {
                        remove: classNames
                    }, speed, easing, callback); else return $.effects.animateClass.call(this, {
                        toggle: classNames
                    }, force, speed, easing);
                };
            }($.fn.toggleClass),
            switchClass: function(remove, add, speed, easing, callback) {
                return $.effects.animateClass.call(this, {
                    add: add,
                    remove: remove
                }, speed, easing, callback);
            }
        });
    })();
    (function() {
        $.extend($.effects, {
            version: "@VERSION",
            save: function(element, set) {
                for (var i = 0; i < set.length; i++) if (null !== set[i]) element.data(dataSpace + set[i], element[0].style[set[i]]);
            },
            restore: function(element, set) {
                var val, i;
                for (i = 0; i < set.length; i++) if (null !== set[i]) {
                    val = element.data(dataSpace + set[i]);
                    if (val === undefined) val = "";
                    element.css(set[i], val);
                }
            },
            setMode: function(el, mode) {
                if ("toggle" === mode) mode = el.is(":hidden") ? "show" : "hide";
                return mode;
            },
            getBaseline: function(origin, original) {
                var y, x;
                switch (origin[0]) {
                  case "top":
                    y = 0;
                    break;

                  case "middle":
                    y = .5;
                    break;

                  case "bottom":
                    y = 1;
                    break;

                  default:
                    y = origin[0] / original.height;
                }
                switch (origin[1]) {
                  case "left":
                    x = 0;
                    break;

                  case "center":
                    x = .5;
                    break;

                  case "right":
                    x = 1;
                    break;

                  default:
                    x = origin[1] / original.width;
                }
                return {
                    x: x,
                    y: y
                };
            },
            createWrapper: function(element) {
                if (element.parent().is(".ui-effects-wrapper")) return element.parent();
                var props = {
                    width: element.outerWidth(true),
                    height: element.outerHeight(true),
                    "float": element.css("float")
                }, wrapper = $("<div></div>").addClass("ui-effects-wrapper").css({
                    fontSize: "100%",
                    background: "transparent",
                    border: "none",
                    margin: 0,
                    padding: 0
                }), size = {
                    width: element.width(),
                    height: element.height()
                }, active = document.activeElement;
                try {
                    active.id;
                } catch (e) {
                    active = document.body;
                }
                element.wrap(wrapper);
                if (element[0] === active || $.contains(element[0], active)) $(active).focus();
                wrapper = element.parent();
                if ("static" === element.css("position")) {
                    wrapper.css({
                        position: "relative"
                    });
                    element.css({
                        position: "relative"
                    });
                } else {
                    $.extend(props, {
                        position: element.css("position"),
                        zIndex: element.css("z-index")
                    });
                    $.each([ "top", "left", "bottom", "right" ], function(i, pos) {
                        props[pos] = element.css(pos);
                        if (isNaN(parseInt(props[pos], 10))) props[pos] = "auto";
                    });
                    element.css({
                        position: "relative",
                        top: 0,
                        left: 0,
                        right: "auto",
                        bottom: "auto"
                    });
                }
                element.css(size);
                return wrapper.css(props).show();
            },
            removeWrapper: function(element) {
                var active = document.activeElement;
                if (element.parent().is(".ui-effects-wrapper")) {
                    element.parent().replaceWith(element);
                    if (element[0] === active || $.contains(element[0], active)) $(active).focus();
                }
                return element;
            },
            setTransition: function(element, list, factor, value) {
                value = value || {};
                $.each(list, function(i, x) {
                    var unit = element.cssUnit(x);
                    if (unit[0] > 0) value[x] = unit[0] * factor + unit[1];
                });
                return value;
            }
        });
        function _normalizeArguments(effect, options, speed, callback) {
            if ($.isPlainObject(effect)) {
                options = effect;
                effect = effect.effect;
            }
            effect = {
                effect: effect
            };
            if (null == options) options = {};
            if ($.isFunction(options)) {
                callback = options;
                speed = null;
                options = {};
            }
            if ("number" === typeof options || $.fx.speeds[options]) {
                callback = speed;
                speed = options;
                options = {};
            }
            if ($.isFunction(speed)) {
                callback = speed;
                speed = null;
            }
            if (options) $.extend(effect, options);
            speed = speed || options.duration;
            effect.duration = $.fx.off ? 0 : "number" === typeof speed ? speed : speed in $.fx.speeds ? $.fx.speeds[speed] : $.fx.speeds._default;
            effect.complete = callback || options.complete;
            return effect;
        }
        function standardAnimationOption(option) {
            if (!option || "number" === typeof option || $.fx.speeds[option]) return true;
            if ("string" === typeof option && !$.effects.effect[option]) return true;
            if ($.isFunction(option)) return true;
            if ("object" === typeof option && !option.effect) return true;
            return false;
        }
        $.fn.extend({
            effect: function() {
                var args = _normalizeArguments.apply(this, arguments), mode = args.mode, queue = args.queue, effectMethod = $.effects.effect[args.effect];
                if ($.fx.off || !effectMethod) if (mode) return this[mode](args.duration, args.complete); else return this.each(function() {
                    if (args.complete) args.complete.call(this);
                });
                function run(next) {
                    var elem = $(this), complete = args.complete, mode = args.mode;
                    function done() {
                        if ($.isFunction(complete)) complete.call(elem[0]);
                        if ($.isFunction(next)) next();
                    }
                    if (elem.is(":hidden") ? "hide" === mode : "show" === mode) {
                        elem[mode]();
                        done();
                    } else effectMethod.call(elem[0], args, done);
                }
                return false === queue ? this.each(run) : this.queue(queue || "fx", run);
            },
            show: function(orig) {
                return function(option) {
                    if (standardAnimationOption(option)) return orig.apply(this, arguments); else {
                        var args = _normalizeArguments.apply(this, arguments);
                        args.mode = "show";
                        return this.effect.call(this, args);
                    }
                };
            }($.fn.show),
            hide: function(orig) {
                return function(option) {
                    if (standardAnimationOption(option)) return orig.apply(this, arguments); else {
                        var args = _normalizeArguments.apply(this, arguments);
                        args.mode = "hide";
                        return this.effect.call(this, args);
                    }
                };
            }($.fn.hide),
            toggle: function(orig) {
                return function(option) {
                    if (standardAnimationOption(option) || "boolean" === typeof option) return orig.apply(this, arguments); else {
                        var args = _normalizeArguments.apply(this, arguments);
                        args.mode = "toggle";
                        return this.effect.call(this, args);
                    }
                };
            }($.fn.toggle),
            cssUnit: function(key) {
                var style = this.css(key), val = [];
                $.each([ "em", "px", "%", "pt" ], function(i, unit) {
                    if (style.indexOf(unit) > 0) val = [ parseFloat(style), unit ];
                });
                return val;
            }
        });
    })();
    (function() {
        var baseEasings = {};
        $.each([ "Quad", "Cubic", "Quart", "Quint", "Expo" ], function(i, name) {
            baseEasings[name] = function(p) {
                return Math.pow(p, i + 2);
            };
        });
        $.extend(baseEasings, {
            Sine: function(p) {
                return 1 - Math.cos(p * Math.PI / 2);
            },
            Circ: function(p) {
                return 1 - Math.sqrt(1 - p * p);
            },
            Elastic: function(p) {
                return 0 === p || 1 === p ? p : -Math.pow(2, 8 * (p - 1)) * Math.sin((80 * (p - 1) - 7.5) * Math.PI / 15);
            },
            Back: function(p) {
                return p * p * (3 * p - 2);
            },
            Bounce: function(p) {
                var pow2, bounce = 4;
                while (p < ((pow2 = Math.pow(2, --bounce)) - 1) / 11) ;
                return 1 / Math.pow(4, 3 - bounce) - 7.5625 * Math.pow((3 * pow2 - 2) / 22 - p, 2);
            }
        });
        $.each(baseEasings, function(name, easeIn) {
            $.easing["easeIn" + name] = easeIn;
            $.easing["easeOut" + name] = function(p) {
                return 1 - easeIn(1 - p);
            };
            $.easing["easeInOut" + name] = function(p) {
                return p < .5 ? easeIn(2 * p) / 2 : 1 - easeIn(p * -2 + 2) / 2;
            };
        });
    })();
})(jQuery);

(function($, undefined) {
    var uuid = 0, runiqueId = /^ui-id-\d+$/;
    $.ui = $.ui || {};
    $.extend($.ui, {
        version: "@VERSION",
        keyCode: {
            BACKSPACE: 8,
            COMMA: 188,
            DELETE: 46,
            DOWN: 40,
            END: 35,
            ENTER: 13,
            ESCAPE: 27,
            HOME: 36,
            LEFT: 37,
            NUMPAD_ADD: 107,
            NUMPAD_DECIMAL: 110,
            NUMPAD_DIVIDE: 111,
            NUMPAD_ENTER: 108,
            NUMPAD_MULTIPLY: 106,
            NUMPAD_SUBTRACT: 109,
            PAGE_DOWN: 34,
            PAGE_UP: 33,
            PERIOD: 190,
            RIGHT: 39,
            SPACE: 32,
            TAB: 9,
            UP: 38
        }
    });
    $.fn.extend({
        focus: function(orig) {
            return function(delay, fn) {
                return "number" === typeof delay ? this.each(function() {
                    var elem = this;
                    setTimeout(function() {
                        $(elem).focus();
                        if (fn) fn.call(elem);
                    }, delay);
                }) : orig.apply(this, arguments);
            };
        }($.fn.focus),
        scrollParent: function() {
            var scrollParent;
            if ($.ui.ie && /(static|relative)/.test(this.css("position")) || /absolute/.test(this.css("position"))) scrollParent = this.parents().filter(function() {
                return /(relative|absolute|fixed)/.test($.css(this, "position")) && /(auto|scroll)/.test($.css(this, "overflow") + $.css(this, "overflow-y") + $.css(this, "overflow-x"));
            }).eq(0); else scrollParent = this.parents().filter(function() {
                return /(auto|scroll)/.test($.css(this, "overflow") + $.css(this, "overflow-y") + $.css(this, "overflow-x"));
            }).eq(0);
            return /fixed/.test(this.css("position")) || !scrollParent.length ? $(document) : scrollParent;
        },
        zIndex: function(zIndex) {
            if (zIndex !== undefined) return this.css("zIndex", zIndex);
            if (this.length) {
                var elem = $(this[0]), position, value;
                while (elem.length && elem[0] !== document) {
                    position = elem.css("position");
                    if ("absolute" === position || "relative" === position || "fixed" === position) {
                        value = parseInt(elem.css("zIndex"), 10);
                        if (!isNaN(value) && 0 !== value) return value;
                    }
                    elem = elem.parent();
                }
            }
            return 0;
        },
        uniqueId: function() {
            return this.each(function() {
                if (!this.id) this.id = "ui-id-" + ++uuid;
            });
        },
        removeUniqueId: function() {
            return this.each(function() {
                if (runiqueId.test(this.id)) $(this).removeAttr("id");
            });
        }
    });
    function focusable(element, isTabIndexNotNaN) {
        var map, mapName, img, nodeName = element.nodeName.toLowerCase();
        if ("area" === nodeName) {
            map = element.parentNode;
            mapName = map.name;
            if (!element.href || !mapName || "map" !== map.nodeName.toLowerCase()) return false;
            img = $("img[usemap=#" + mapName + "]")[0];
            return !!img && visible(img);
        }
        return (/input|select|textarea|button|object/.test(nodeName) ? !element.disabled : "a" === nodeName ? element.href || isTabIndexNotNaN : isTabIndexNotNaN) && visible(element);
    }
    function visible(element) {
        return $.expr.filters.visible(element) && !$(element).parents().addBack().filter(function() {
            return "hidden" === $.css(this, "visibility");
        }).length;
    }
    $.extend($.expr[":"], {
        data: $.expr.createPseudo ? $.expr.createPseudo(function(dataName) {
            return function(elem) {
                return !!$.data(elem, dataName);
            };
        }) : function(elem, i, match) {
            return !!$.data(elem, match[3]);
        },
        focusable: function(element) {
            return focusable(element, !isNaN($.attr(element, "tabindex")));
        },
        tabbable: function(element) {
            var tabIndex = $.attr(element, "tabindex"), isTabIndexNaN = isNaN(tabIndex);
            return (isTabIndexNaN || tabIndex >= 0) && focusable(element, !isTabIndexNaN);
        }
    });
    if (!$("<a>").outerWidth(1).jquery) $.each([ "Width", "Height" ], function(i, name) {
        var side = "Width" === name ? [ "Left", "Right" ] : [ "Top", "Bottom" ], type = name.toLowerCase(), orig = {
            innerWidth: $.fn.innerWidth,
            innerHeight: $.fn.innerHeight,
            outerWidth: $.fn.outerWidth,
            outerHeight: $.fn.outerHeight
        };
        function reduce(elem, size, border, margin) {
            $.each(side, function() {
                size -= parseFloat($.css(elem, "padding" + this)) || 0;
                if (border) size -= parseFloat($.css(elem, "border" + this + "Width")) || 0;
                if (margin) size -= parseFloat($.css(elem, "margin" + this)) || 0;
            });
            return size;
        }
        $.fn["inner" + name] = function(size) {
            if (size === undefined) return orig["inner" + name].call(this);
            return this.each(function() {
                $(this).css(type, reduce(this, size) + "px");
            });
        };
        $.fn["outer" + name] = function(size, margin) {
            if ("number" !== typeof size) return orig["outer" + name].call(this, size);
            return this.each(function() {
                $(this).css(type, reduce(this, size, true, margin) + "px");
            });
        };
    });
    if (!$.fn.addBack) $.fn.addBack = function(selector) {
        return this.add(null == selector ? this.prevObject : this.prevObject.filter(selector));
    };
    if ($("<a>").data("a-b", "a").removeData("a-b").data("a-b")) $.fn.removeData = function(removeData) {
        return function(key) {
            if (arguments.length) return removeData.call(this, $.camelCase(key)); else return removeData.call(this);
        };
    }($.fn.removeData);
    $.ui.ie = !!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase());
    $.support.selectstart = "onselectstart" in document.createElement("div");
    $.fn.extend({
        disableSelection: function() {
            return this.bind(($.support.selectstart ? "selectstart" : "mousedown") + ".ui-disableSelection", function(event) {
                event.preventDefault();
            });
        },
        enableSelection: function() {
            return this.unbind(".ui-disableSelection");
        }
    });
    $.extend($.ui, {
        plugin: {
            add: function(module, option, set) {
                var i, proto = $.ui[module].prototype;
                for (i in set) {
                    proto.plugins[i] = proto.plugins[i] || [];
                    proto.plugins[i].push([ option, set[i] ]);
                }
            },
            call: function(instance, name, args) {
                var i, set = instance.plugins[name];
                if (!set || !instance.element[0].parentNode || 11 === instance.element[0].parentNode.nodeType) return;
                for (i = 0; i < set.length; i++) if (instance.options[set[i][0]]) set[i][1].apply(instance.element, args);
            }
        },
        hasScroll: function(el, a) {
            if ("hidden" === $(el).css("overflow")) return false;
            var scroll = a && "left" === a ? "scrollLeft" : "scrollTop", has = false;
            if (el[scroll] > 0) return true;
            el[scroll] = 1;
            has = el[scroll] > 0;
            el[scroll] = 0;
            return has;
        }
    });
})(jQuery);

(function($, undefined) {
    var uuid = 0, slice = Array.prototype.slice, _cleanData = $.cleanData;
    $.cleanData = function(elems) {
        for (var i = 0, elem; null != (elem = elems[i]); i++) try {
            $(elem).triggerHandler("remove");
        } catch (e) {}
        _cleanData(elems);
    };
    $.widget = function(name, base, prototype) {
        var fullName, existingConstructor, constructor, basePrototype, proxiedPrototype = {}, namespace = name.split(".")[0];
        name = name.split(".")[1];
        fullName = namespace + "-" + name;
        if (!prototype) {
            prototype = base;
            base = $.Widget;
        }
        $.expr[":"][fullName.toLowerCase()] = function(elem) {
            return !!$.data(elem, fullName);
        };
        $[namespace] = $[namespace] || {};
        existingConstructor = $[namespace][name];
        constructor = $[namespace][name] = function(options, element) {
            if (!this._createWidget) return new constructor(options, element);
            if (arguments.length) this._createWidget(options, element);
        };
        $.extend(constructor, existingConstructor, {
            version: prototype.version,
            _proto: $.extend({}, prototype),
            _childConstructors: []
        });
        basePrototype = new base();
        basePrototype.options = $.widget.extend({}, basePrototype.options);
        $.each(prototype, function(prop, value) {
            if (!$.isFunction(value)) {
                proxiedPrototype[prop] = value;
                return;
            }
            proxiedPrototype[prop] = function() {
                var _super = function() {
                    return base.prototype[prop].apply(this, arguments);
                }, _superApply = function(args) {
                    return base.prototype[prop].apply(this, args);
                };
                return function() {
                    var __super = this._super, __superApply = this._superApply, returnValue;
                    this._super = _super;
                    this._superApply = _superApply;
                    returnValue = value.apply(this, arguments);
                    this._super = __super;
                    this._superApply = __superApply;
                    return returnValue;
                };
            }();
        });
        constructor.prototype = $.widget.extend(basePrototype, {
            widgetEventPrefix: existingConstructor ? basePrototype.widgetEventPrefix : name
        }, proxiedPrototype, {
            constructor: constructor,
            namespace: namespace,
            widgetName: name,
            widgetFullName: fullName
        });
        if (existingConstructor) {
            $.each(existingConstructor._childConstructors, function(i, child) {
                var childPrototype = child.prototype;
                $.widget(childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto);
            });
            delete existingConstructor._childConstructors;
        } else base._childConstructors.push(constructor);
        $.widget.bridge(name, constructor);
    };
    $.widget.extend = function(target) {
        var input = slice.call(arguments, 1), inputIndex = 0, inputLength = input.length, key, value;
        for (;inputIndex < inputLength; inputIndex++) for (key in input[inputIndex]) {
            value = input[inputIndex][key];
            if (input[inputIndex].hasOwnProperty(key) && value !== undefined) if ($.isPlainObject(value)) target[key] = $.isPlainObject(target[key]) ? $.widget.extend({}, target[key], value) : $.widget.extend({}, value); else target[key] = value;
        }
        return target;
    };
    $.widget.bridge = function(name, object) {
        var fullName = object.prototype.widgetFullName || name;
        $.fn[name] = function(options) {
            var isMethodCall = "string" === typeof options, args = slice.call(arguments, 1), returnValue = this;
            options = !isMethodCall && args.length ? $.widget.extend.apply(null, [ options ].concat(args)) : options;
            if (isMethodCall) this.each(function() {
                var methodValue, instance = $.data(this, fullName);
                if (!instance) return $.error("cannot call methods on " + name + " prior to initialization; " + "attempted to call method '" + options + "'");
                if (!$.isFunction(instance[options]) || "_" === options.charAt(0)) return $.error("no such method '" + options + "' for " + name + " widget instance");
                methodValue = instance[options].apply(instance, args);
                if (methodValue !== instance && methodValue !== undefined) {
                    returnValue = methodValue && methodValue.jquery ? returnValue.pushStack(methodValue.get()) : methodValue;
                    return false;
                }
            }); else this.each(function() {
                var instance = $.data(this, fullName);
                if (instance) instance.option(options || {})._init(); else $.data(this, fullName, new object(options, this));
            });
            return returnValue;
        };
    };
    $.Widget = function() {};
    $.Widget._childConstructors = [];
    $.Widget.prototype = {
        widgetName: "widget",
        widgetEventPrefix: "",
        defaultElement: "<div>",
        options: {
            disabled: false,
            create: null
        },
        _createWidget: function(options, element) {
            element = $(element || this.defaultElement || this)[0];
            this.element = $(element);
            this.uuid = uuid++;
            this.eventNamespace = "." + this.widgetName + this.uuid;
            this.options = $.widget.extend({}, this.options, this._getCreateOptions(), options);
            this.bindings = $();
            this.hoverable = $();
            this.focusable = $();
            if (element !== this) {
                $.data(element, this.widgetFullName, this);
                this._on(true, this.element, {
                    remove: function(event) {
                        if (event.target === element) this.destroy();
                    }
                });
                this.document = $(element.style ? element.ownerDocument : element.document || element);
                this.window = $(this.document[0].defaultView || this.document[0].parentWindow);
            }
            this._create();
            this._trigger("create", null, this._getCreateEventData());
            this._init();
        },
        _getCreateOptions: $.noop,
        _getCreateEventData: $.noop,
        _create: $.noop,
        _init: $.noop,
        destroy: function() {
            this._destroy();
            this.element.unbind(this.eventNamespace).removeData(this.widgetName).removeData(this.widgetFullName).removeData($.camelCase(this.widgetFullName));
            this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName + "-disabled " + "ui-state-disabled");
            this.bindings.unbind(this.eventNamespace);
            this.hoverable.removeClass("ui-state-hover");
            this.focusable.removeClass("ui-state-focus");
        },
        _destroy: $.noop,
        widget: function() {
            return this.element;
        },
        option: function(key, value) {
            var options = key, parts, curOption, i;
            if (0 === arguments.length) return $.widget.extend({}, this.options);
            if ("string" === typeof key) {
                options = {};
                parts = key.split(".");
                key = parts.shift();
                if (parts.length) {
                    curOption = options[key] = $.widget.extend({}, this.options[key]);
                    for (i = 0; i < parts.length - 1; i++) {
                        curOption[parts[i]] = curOption[parts[i]] || {};
                        curOption = curOption[parts[i]];
                    }
                    key = parts.pop();
                    if (value === undefined) return curOption[key] === undefined ? null : curOption[key];
                    curOption[key] = value;
                } else {
                    if (value === undefined) return this.options[key] === undefined ? null : this.options[key];
                    options[key] = value;
                }
            }
            this._setOptions(options);
            return this;
        },
        _setOptions: function(options) {
            var key;
            for (key in options) this._setOption(key, options[key]);
            return this;
        },
        _setOption: function(key, value) {
            this.options[key] = value;
            if ("disabled" === key) {
                this.widget().toggleClass(this.widgetFullName + "-disabled ui-state-disabled", !!value).attr("aria-disabled", value);
                this.hoverable.removeClass("ui-state-hover");
                this.focusable.removeClass("ui-state-focus");
            }
            return this;
        },
        enable: function() {
            return this._setOption("disabled", false);
        },
        disable: function() {
            return this._setOption("disabled", true);
        },
        _on: function(suppressDisabledCheck, element, handlers) {
            var delegateElement, instance = this;
            if ("boolean" !== typeof suppressDisabledCheck) {
                handlers = element;
                element = suppressDisabledCheck;
                suppressDisabledCheck = false;
            }
            if (!handlers) {
                handlers = element;
                element = this.element;
                delegateElement = this.widget();
            } else {
                element = delegateElement = $(element);
                this.bindings = this.bindings.add(element);
            }
            $.each(handlers, function(event, handler) {
                function handlerProxy() {
                    if (!suppressDisabledCheck && (true === instance.options.disabled || $(this).hasClass("ui-state-disabled"))) return;
                    return ("string" === typeof handler ? instance[handler] : handler).apply(instance, arguments);
                }
                if ("string" !== typeof handler) handlerProxy.guid = handler.guid = handler.guid || handlerProxy.guid || $.guid++;
                var match = event.match(/^(\w+)\s*(.*)$/), eventName = match[1] + instance.eventNamespace, selector = match[2];
                if (selector) delegateElement.delegate(selector, eventName, handlerProxy); else element.bind(eventName, handlerProxy);
            });
        },
        _off: function(element, eventName) {
            eventName = (eventName || "").split(" ").join(this.eventNamespace + " ") + this.eventNamespace;
            element.unbind(eventName).undelegate(eventName);
        },
        _delay: function(handler, delay) {
            function handlerProxy() {
                return ("string" === typeof handler ? instance[handler] : handler).apply(instance, arguments);
            }
            var instance = this;
            return setTimeout(handlerProxy, delay || 0);
        },
        _hoverable: function(element) {
            this.hoverable = this.hoverable.add(element);
            this._on(element, {
                mouseenter: function(event) {
                    $(event.currentTarget).addClass("ui-state-hover");
                },
                mouseleave: function(event) {
                    $(event.currentTarget).removeClass("ui-state-hover");
                }
            });
        },
        _focusable: function(element) {
            this.focusable = this.focusable.add(element);
            this._on(element, {
                focusin: function(event) {
                    $(event.currentTarget).addClass("ui-state-focus");
                },
                focusout: function(event) {
                    $(event.currentTarget).removeClass("ui-state-focus");
                }
            });
        },
        _trigger: function(type, event, data) {
            var prop, orig, callback = this.options[type];
            data = data || {};
            event = $.Event(event);
            event.type = (type === this.widgetEventPrefix ? type : this.widgetEventPrefix + type).toLowerCase();
            event.target = this.element[0];
            orig = event.originalEvent;
            if (orig) for (prop in orig) if (!(prop in event)) event[prop] = orig[prop];
            this.element.trigger(event, data);
            return !($.isFunction(callback) && false === callback.apply(this.element[0], [ event ].concat(data)) || event.isDefaultPrevented());
        }
    };
    $.each({
        show: "fadeIn",
        hide: "fadeOut"
    }, function(method, defaultEffect) {
        $.Widget.prototype["_" + method] = function(element, options, callback) {
            if ("string" === typeof options) options = {
                effect: options
            };
            var hasOptions, effectName = !options ? method : true === options || "number" === typeof options ? defaultEffect : options.effect || defaultEffect;
            options = options || {};
            if ("number" === typeof options) options = {
                duration: options
            };
            hasOptions = !$.isEmptyObject(options);
            options.complete = callback;
            if (options.delay) element.delay(options.delay);
            if (hasOptions && $.effects && $.effects.effect[effectName]) element[method](options); else if (effectName !== method && element[effectName]) element[effectName](options.duration, options.easing, callback); else element.queue(function(next) {
                $(this)[method]();
                if (callback) callback.call(element[0]);
                next();
            });
        };
    });
})(jQuery);

(function($, undefined) {
    $.effects.effect.highlight = function(o, done) {
        var elem = $(this), props = [ "backgroundImage", "backgroundColor", "opacity" ], mode = $.effects.setMode(elem, o.mode || "show"), animation = {
            backgroundColor: elem.css("backgroundColor")
        };
        if ("hide" === mode) animation.opacity = 0;
        $.effects.save(elem, props);
        elem.show().css({
            backgroundImage: "none",
            backgroundColor: o.color || "#ffff99"
        }).animate(animation, {
            queue: false,
            duration: o.duration,
            easing: o.easing,
            complete: function() {
                if ("hide" === mode) elem.hide();
                $.effects.restore(elem, props);
                done();
            }
        });
    };
})(jQuery);

(function($, undefined) {
    var mouseHandled = false;
    $(document).mouseup(function() {
        mouseHandled = false;
    });
    $.widget("ui.mouse", {
        version: "@VERSION",
        options: {
            cancel: "input,textarea,button,select,option",
            distance: 1,
            delay: 0
        },
        _mouseInit: function() {
            var that = this;
            this.element.bind("mousedown." + this.widgetName, function(event) {
                return that._mouseDown(event);
            }).bind("click." + this.widgetName, function(event) {
                if (true === $.data(event.target, that.widgetName + ".preventClickEvent")) {
                    $.removeData(event.target, that.widgetName + ".preventClickEvent");
                    event.stopImmediatePropagation();
                    return false;
                }
            });
            this.started = false;
        },
        _mouseDestroy: function() {
            this.element.unbind("." + this.widgetName);
            if (this._mouseMoveDelegate) $(document).unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate);
        },
        _mouseDown: function(event) {
            if (mouseHandled) return;
            this._mouseStarted && this._mouseUp(event);
            this._mouseDownEvent = event;
            var that = this, btnIsLeft = 1 === event.which, elIsCancel = "string" === typeof this.options.cancel && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false;
            if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) return true;
            this.mouseDelayMet = !this.options.delay;
            if (!this.mouseDelayMet) this._mouseDelayTimer = setTimeout(function() {
                that.mouseDelayMet = true;
            }, this.options.delay);
            if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
                this._mouseStarted = false !== this._mouseStart(event);
                if (!this._mouseStarted) {
                    event.preventDefault();
                    return true;
                }
            }
            if (true === $.data(event.target, this.widgetName + ".preventClickEvent")) $.removeData(event.target, this.widgetName + ".preventClickEvent");
            this._mouseMoveDelegate = function(event) {
                return that._mouseMove(event);
            };
            this._mouseUpDelegate = function(event) {
                return that._mouseUp(event);
            };
            $(document).bind("mousemove." + this.widgetName, this._mouseMoveDelegate).bind("mouseup." + this.widgetName, this._mouseUpDelegate);
            event.preventDefault();
            mouseHandled = true;
            return true;
        },
        _mouseMove: function(event) {
            if ($.ui.ie && (!document.documentMode || document.documentMode < 9) && !event.button) return this._mouseUp(event);
            if (this._mouseStarted) {
                this._mouseDrag(event);
                return event.preventDefault();
            }
            if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
                this._mouseStarted = false !== this._mouseStart(this._mouseDownEvent, event);
                this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event);
            }
            return !this._mouseStarted;
        },
        _mouseUp: function(event) {
            $(document).unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate);
            if (this._mouseStarted) {
                this._mouseStarted = false;
                if (event.target === this._mouseDownEvent.target) $.data(event.target, this.widgetName + ".preventClickEvent", true);
                this._mouseStop(event);
            }
            return false;
        },
        _mouseDistanceMet: function(event) {
            return Math.max(Math.abs(this._mouseDownEvent.pageX - event.pageX), Math.abs(this._mouseDownEvent.pageY - event.pageY)) >= this.options.distance;
        },
        _mouseDelayMet: function() {
            return this.mouseDelayMet;
        },
        _mouseStart: function() {},
        _mouseDrag: function() {},
        _mouseStop: function() {},
        _mouseCapture: function() {
            return true;
        }
    });
})(jQuery);

(function($, undefined) {
    $.effects.effect.transfer = function(o, done) {
        var elem = $(this), target = $(o.to), targetFixed = "fixed" === target.css("position"), body = $("body"), fixTop = targetFixed ? body.scrollTop() : 0, fixLeft = targetFixed ? body.scrollLeft() : 0, endPosition = target.offset(), animation = {
            top: endPosition.top - fixTop,
            left: endPosition.left - fixLeft,
            height: target.innerHeight(),
            width: target.innerWidth()
        }, startPosition = elem.offset(), transfer = $("<div class='ui-effects-transfer'></div>").appendTo(document.body).addClass(o.className).css({
            top: startPosition.top - fixTop,
            left: startPosition.left - fixLeft,
            height: elem.innerHeight(),
            width: elem.innerWidth(),
            position: targetFixed ? "fixed" : "absolute"
        }).animate(animation, o.duration, o.easing, function() {
            transfer.remove();
            done();
        });
    };
})(jQuery);

(function($, undefined) {
    var lastActive, startXPos, startYPos, clickDragged, baseClasses = "ui-button ui-widget ui-state-default ui-corner-all", stateClasses = "ui-state-hover ui-state-active ", typeClasses = "ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only", formResetHandler = function() {
        var form = $(this);
        setTimeout(function() {
            form.find(":ui-button").button("refresh");
        }, 1);
    }, radioGroup = function(radio) {
        var name = radio.name, form = radio.form, radios = $([]);
        if (name) {
            name = name.replace(/'/g, "\\'");
            if (form) radios = $(form).find("[name='" + name + "']"); else radios = $("[name='" + name + "']", radio.ownerDocument).filter(function() {
                return !this.form;
            });
        }
        return radios;
    };
    $.widget("ui.button", {
        version: "@VERSION",
        defaultElement: "<button>",
        options: {
            disabled: null,
            text: true,
            label: null,
            icons: {
                primary: null,
                secondary: null
            }
        },
        _create: function() {
            this.element.closest("form").unbind("reset" + this.eventNamespace).bind("reset" + this.eventNamespace, formResetHandler);
            if ("boolean" !== typeof this.options.disabled) this.options.disabled = !!this.element.prop("disabled"); else this.element.prop("disabled", this.options.disabled);
            this._determineButtonType();
            this.hasTitle = !!this.buttonElement.attr("title");
            var that = this, options = this.options, toggleButton = "checkbox" === this.type || "radio" === this.type, activeClass = !toggleButton ? "ui-state-active" : "", focusClass = "ui-state-focus";
            if (null === options.label) options.label = "input" === this.type ? this.buttonElement.val() : this.buttonElement.html();
            this._hoverable(this.buttonElement);
            this.buttonElement.addClass(baseClasses).attr("role", "button").bind("mouseenter" + this.eventNamespace, function() {
                if (options.disabled) return;
                if (this === lastActive) $(this).addClass("ui-state-active");
            }).bind("mouseleave" + this.eventNamespace, function() {
                if (options.disabled) return;
                $(this).removeClass(activeClass);
            }).bind("click" + this.eventNamespace, function(event) {
                if (options.disabled) {
                    event.preventDefault();
                    event.stopImmediatePropagation();
                }
            });
            this.element.bind("focus" + this.eventNamespace, function() {
                that.buttonElement.addClass(focusClass);
            }).bind("blur" + this.eventNamespace, function() {
                that.buttonElement.removeClass(focusClass);
            });
            if (toggleButton) {
                this.element.bind("change" + this.eventNamespace, function() {
                    if (clickDragged) return;
                    that.refresh();
                });
                this.buttonElement.bind("mousedown" + this.eventNamespace, function(event) {
                    if (options.disabled) return;
                    clickDragged = false;
                    startXPos = event.pageX;
                    startYPos = event.pageY;
                }).bind("mouseup" + this.eventNamespace, function(event) {
                    if (options.disabled) return;
                    if (startXPos !== event.pageX || startYPos !== event.pageY) clickDragged = true;
                });
            }
            if ("checkbox" === this.type) this.buttonElement.bind("click" + this.eventNamespace, function() {
                if (options.disabled || clickDragged) return false;
            }); else if ("radio" === this.type) this.buttonElement.bind("click" + this.eventNamespace, function() {
                if (options.disabled || clickDragged) return false;
                $(this).addClass("ui-state-active");
                that.buttonElement.attr("aria-pressed", "true");
                var radio = that.element[0];
                radioGroup(radio).not(radio).map(function() {
                    return $(this).button("widget")[0];
                }).removeClass("ui-state-active").attr("aria-pressed", "false");
            }); else {
                this.buttonElement.bind("mousedown" + this.eventNamespace, function() {
                    if (options.disabled) return false;
                    $(this).addClass("ui-state-active");
                    lastActive = this;
                    that.document.one("mouseup", function() {
                        lastActive = null;
                    });
                }).bind("mouseup" + this.eventNamespace, function() {
                    if (options.disabled) return false;
                    $(this).removeClass("ui-state-active");
                }).bind("keydown" + this.eventNamespace, function(event) {
                    if (options.disabled) return false;
                    if (event.keyCode === $.ui.keyCode.SPACE || event.keyCode === $.ui.keyCode.ENTER) $(this).addClass("ui-state-active");
                }).bind("keyup" + this.eventNamespace + " blur" + this.eventNamespace, function() {
                    $(this).removeClass("ui-state-active");
                });
                if (this.buttonElement.is("a")) this.buttonElement.keyup(function(event) {
                    if (event.keyCode === $.ui.keyCode.SPACE) $(this).click();
                });
            }
            this._setOption("disabled", options.disabled);
            this._resetButton();
        },
        _determineButtonType: function() {
            var ancestor, labelSelector, checked;
            if (this.element.is("[type=checkbox]")) this.type = "checkbox"; else if (this.element.is("[type=radio]")) this.type = "radio"; else if (this.element.is("input")) this.type = "input"; else this.type = "button";
            if ("checkbox" === this.type || "radio" === this.type) {
                ancestor = this.element.parents().last();
                labelSelector = "label[for='" + this.element.attr("id") + "']";
                this.buttonElement = ancestor.find(labelSelector);
                if (!this.buttonElement.length) {
                    ancestor = ancestor.length ? ancestor.siblings() : this.element.siblings();
                    this.buttonElement = ancestor.filter(labelSelector);
                    if (!this.buttonElement.length) this.buttonElement = ancestor.find(labelSelector);
                }
                this.element.addClass("ui-helper-hidden-accessible");
                checked = this.element.is(":checked");
                if (checked) this.buttonElement.addClass("ui-state-active");
                this.buttonElement.prop("aria-pressed", checked);
            } else this.buttonElement = this.element;
        },
        widget: function() {
            return this.buttonElement;
        },
        _destroy: function() {
            this.element.removeClass("ui-helper-hidden-accessible");
            this.buttonElement.removeClass(baseClasses + " " + stateClasses + " " + typeClasses).removeAttr("role").removeAttr("aria-pressed").html(this.buttonElement.find(".ui-button-text").html());
            if (!this.hasTitle) this.buttonElement.removeAttr("title");
        },
        _setOption: function(key, value) {
            this._super(key, value);
            if ("disabled" === key) {
                if (value) this.element.prop("disabled", true); else this.element.prop("disabled", false);
                return;
            }
            this._resetButton();
        },
        refresh: function() {
            var isDisabled = this.element.is("input, button") ? this.element.is(":disabled") : this.element.hasClass("ui-button-disabled");
            if (isDisabled !== this.options.disabled) this._setOption("disabled", isDisabled);
            if ("radio" === this.type) radioGroup(this.element[0]).each(function() {
                if ($(this).is(":checked")) $(this).button("widget").addClass("ui-state-active").attr("aria-pressed", "true"); else $(this).button("widget").removeClass("ui-state-active").attr("aria-pressed", "false");
            }); else if ("checkbox" === this.type) if (this.element.is(":checked")) this.buttonElement.addClass("ui-state-active").attr("aria-pressed", "true"); else this.buttonElement.removeClass("ui-state-active").attr("aria-pressed", "false");
        },
        _resetButton: function() {
            if ("input" === this.type) {
                if (this.options.label) this.element.val(this.options.label);
                return;
            }
            var buttonElement = this.buttonElement.removeClass(typeClasses), buttonText = $("<span></span>", this.document[0]).addClass("ui-button-text").html(this.options.label).appendTo(buttonElement.empty()).text(), icons = this.options.icons, multipleIcons = icons.primary && icons.secondary, buttonClasses = [];
            if (icons.primary || icons.secondary) {
                if (this.options.text) buttonClasses.push("ui-button-text-icon" + (multipleIcons ? "s" : icons.primary ? "-primary" : "-secondary"));
                if (icons.primary) buttonElement.prepend("<span class='ui-button-icon-primary ui-icon " + icons.primary + "'></span>");
                if (icons.secondary) buttonElement.append("<span class='ui-button-icon-secondary ui-icon " + icons.secondary + "'></span>");
                if (!this.options.text) {
                    buttonClasses.push(multipleIcons ? "ui-button-icons-only" : "ui-button-icon-only");
                    if (!this.hasTitle) buttonElement.attr("title", $.trim(buttonText));
                }
            } else buttonClasses.push("ui-button-text-only");
            buttonElement.addClass(buttonClasses.join(" "));
        }
    });
    $.widget("ui.buttonset", {
        version: "@VERSION",
        options: {
            items: "button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(ui-button)"
        },
        _create: function() {
            this.element.addClass("ui-buttonset");
        },
        _init: function() {
            this.refresh();
        },
        _setOption: function(key, value) {
            if ("disabled" === key) this.buttons.button("option", key, value);
            this._super(key, value);
        },
        refresh: function() {
            var rtl = "rtl" === this.element.css("direction");
            this.buttons = this.element.find(this.options.items).filter(":ui-button").button("refresh").end().not(":ui-button").button().end().map(function() {
                return $(this).button("widget")[0];
            }).removeClass("ui-corner-all ui-corner-left ui-corner-right").filter(":first").addClass(rtl ? "ui-corner-right" : "ui-corner-left").end().filter(":last").addClass(rtl ? "ui-corner-left" : "ui-corner-right").end().end();
        },
        _destroy: function() {
            this.element.removeClass("ui-buttonset");
            this.buttons.map(function() {
                return $(this).button("widget")[0];
            }).removeClass("ui-corner-left ui-corner-right").end().button("destroy");
        }
    });
})(jQuery);

(function($, undefined) {
    var sizeRelatedOptions = {
        buttons: true,
        height: true,
        maxHeight: true,
        maxWidth: true,
        minHeight: true,
        minWidth: true,
        width: true
    }, resizableRelatedOptions = {
        maxHeight: true,
        maxWidth: true,
        minHeight: true,
        minWidth: true
    };
    $.widget("ui.dialog", {
        version: "@VERSION",
        options: {
            appendTo: "body",
            autoOpen: true,
            buttons: [],
            closeOnEscape: true,
            closeText: "close",
            dialogClass: "",
            draggable: true,
            hide: null,
            height: "auto",
            maxHeight: null,
            maxWidth: null,
            minHeight: 150,
            minWidth: 150,
            modal: false,
            position: {
                my: "center",
                at: "center",
                of: window,
                collision: "fit",
                using: function(pos) {
                    var topOffset = $(this).css(pos).offset().top;
                    if (topOffset < 0) $(this).css("top", pos.top - topOffset);
                }
            },
            resizable: true,
            show: null,
            title: null,
            width: 300,
            beforeClose: null,
            close: null,
            drag: null,
            dragStart: null,
            dragStop: null,
            focus: null,
            open: null,
            resize: null,
            resizeStart: null,
            resizeStop: null
        },
        _create: function() {
            this.originalCss = {
                display: this.element[0].style.display,
                width: this.element[0].style.width,
                minHeight: this.element[0].style.minHeight,
                maxHeight: this.element[0].style.maxHeight,
                height: this.element[0].style.height
            };
            this.originalPosition = {
                parent: this.element.parent(),
                index: this.element.parent().children().index(this.element)
            };
            this.originalTitle = this.element.attr("title");
            this.options.title = this.options.title || this.originalTitle;
            this._createWrapper();
            this.element.show().removeAttr("title").addClass("ui-dialog-content ui-widget-content").appendTo(this.uiDialog);
            this._createTitlebar();
            this._createButtonPane();
            if (this.options.draggable && $.fn.draggable) this._makeDraggable();
            if (this.options.resizable && $.fn.resizable) this._makeResizable();
            this._isOpen = false;
        },
        _init: function() {
            if (this.options.autoOpen) this.open();
        },
        _appendTo: function() {
            var element = this.options.appendTo;
            if (element && (element.jquery || element.nodeType)) return $(element);
            return this.document.find(element || "body").eq(0);
        },
        _destroy: function() {
            var next, originalPosition = this.originalPosition;
            this._destroyOverlay();
            this.element.removeUniqueId().removeClass("ui-dialog-content ui-widget-content").css(this.originalCss).detach();
            this.uiDialog.stop(true, true).remove();
            if (this.originalTitle) this.element.attr("title", this.originalTitle);
            next = originalPosition.parent.children().eq(originalPosition.index);
            if (next.length && next[0] !== this.element[0]) next.before(this.element); else originalPosition.parent.append(this.element);
        },
        widget: function() {
            return this.uiDialog;
        },
        disable: $.noop,
        enable: $.noop,
        close: function(event) {
            var that = this;
            if (!this._isOpen || false === this._trigger("beforeClose", event)) return;
            this._isOpen = false;
            this._destroyOverlay();
            if (!this.opener.filter(":focusable").focus().length) $(this.document[0].activeElement).blur();
            this._hide(this.uiDialog, this.options.hide, function() {
                that._trigger("close", event);
            });
        },
        isOpen: function() {
            return this._isOpen;
        },
        moveToTop: function() {
            this._moveToTop();
        },
        _moveToTop: function(event, silent) {
            var moved = !!this.uiDialog.nextAll(":visible").insertBefore(this.uiDialog).length;
            if (moved && !silent) this._trigger("focus", event);
            return moved;
        },
        open: function() {
            var that = this;
            if (this._isOpen) {
                if (this._moveToTop()) this._focusTabbable();
                return;
            }
            this._isOpen = true;
            this.opener = $(this.document[0].activeElement);
            this._size();
            this._position();
            this._createOverlay();
            this._moveToTop(null, true);
            this._show(this.uiDialog, this.options.show, function() {
                that._focusTabbable();
                that._trigger("focus");
            });
            this._trigger("open");
        },
        _focusTabbable: function() {
            var hasFocus = this.element.find("[autofocus]");
            if (!hasFocus.length) hasFocus = this.element.find(":tabbable");
            if (!hasFocus.length) hasFocus = this.uiDialogButtonPane.find(":tabbable");
            if (!hasFocus.length) hasFocus = this.uiDialogTitlebarClose.filter(":tabbable");
            if (!hasFocus.length) hasFocus = this.uiDialog;
            hasFocus.eq(0).focus();
        },
        _keepFocus: function(event) {
            function checkFocus() {
                var activeElement = this.document[0].activeElement, isActive = this.uiDialog[0] === activeElement || $.contains(this.uiDialog[0], activeElement);
                if (!isActive) this._focusTabbable();
            }
            event.preventDefault();
            checkFocus.call(this);
            this._delay(checkFocus);
        },
        _createWrapper: function() {
            this.uiDialog = $("<div>").addClass("ui-dialog ui-widget ui-widget-content ui-corner-all ui-front " + this.options.dialogClass).hide().attr({
                tabIndex: -1,
                role: "dialog"
            }).appendTo(this._appendTo());
            this._on(this.uiDialog, {
                keydown: function(event) {
                    if (this.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode && event.keyCode === $.ui.keyCode.ESCAPE) {
                        event.preventDefault();
                        this.close(event);
                        return;
                    }
                    if (event.keyCode !== $.ui.keyCode.TAB) return;
                    var tabbables = this.uiDialog.find(":tabbable"), first = tabbables.filter(":first"), last = tabbables.filter(":last");
                    if ((event.target === last[0] || event.target === this.uiDialog[0]) && !event.shiftKey) {
                        first.focus(1);
                        event.preventDefault();
                    } else if ((event.target === first[0] || event.target === this.uiDialog[0]) && event.shiftKey) {
                        last.focus(1);
                        event.preventDefault();
                    }
                },
                mousedown: function(event) {
                    if (this._moveToTop(event)) this._focusTabbable();
                }
            });
            if (!this.element.find("[aria-describedby]").length) this.uiDialog.attr({
                "aria-describedby": this.element.uniqueId().attr("id")
            });
        },
        _createTitlebar: function() {
            var uiDialogTitle;
            this.uiDialogTitlebar = $("<div>").addClass("ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix").prependTo(this.uiDialog);
            this._on(this.uiDialogTitlebar, {
                mousedown: function(event) {
                    if (!$(event.target).closest(".ui-dialog-titlebar-close")) this.uiDialog.focus();
                }
            });
            this.uiDialogTitlebarClose = $("<button></button>").button({
                label: this.options.closeText,
                icons: {
                    primary: "ui-icon-closethick"
                },
                text: false
            }).addClass("ui-dialog-titlebar-close").appendTo(this.uiDialogTitlebar);
            this._on(this.uiDialogTitlebarClose, {
                click: function(event) {
                    event.preventDefault();
                    this.close(event);
                }
            });
            uiDialogTitle = $("<span>").uniqueId().addClass("ui-dialog-title").prependTo(this.uiDialogTitlebar);
            this._title(uiDialogTitle);
            this.uiDialog.attr({
                "aria-labelledby": uiDialogTitle.attr("id")
            });
        },
        _title: function(title) {
            if (!this.options.title) title.html("&#160;");
            title.text(this.options.title);
        },
        _createButtonPane: function() {
            this.uiDialogButtonPane = $("<div>").addClass("ui-dialog-buttonpane ui-widget-content ui-helper-clearfix");
            this.uiButtonSet = $("<div>").addClass("ui-dialog-buttonset").appendTo(this.uiDialogButtonPane);
            this._createButtons();
        },
        _createButtons: function() {
            var that = this, buttons = this.options.buttons;
            this.uiDialogButtonPane.remove();
            this.uiButtonSet.empty();
            if ($.isEmptyObject(buttons) || $.isArray(buttons) && !buttons.length) {
                this.uiDialog.removeClass("ui-dialog-buttons");
                return;
            }
            $.each(buttons, function(name, props) {
                var click, buttonOptions;
                props = $.isFunction(props) ? {
                    click: props,
                    text: name
                } : props;
                props = $.extend({
                    type: "button"
                }, props);
                click = props.click;
                props.click = function() {
                    click.apply(that.element[0], arguments);
                };
                buttonOptions = {
                    icons: props.icons,
                    text: props.showText
                };
                delete props.icons;
                delete props.showText;
                $("<button></button>", props).button(buttonOptions).appendTo(that.uiButtonSet);
            });
            this.uiDialog.addClass("ui-dialog-buttons");
            this.uiDialogButtonPane.appendTo(this.uiDialog);
        },
        _makeDraggable: function() {
            var that = this, options = this.options;
            function filteredUi(ui) {
                return {
                    position: ui.position,
                    offset: ui.offset
                };
            }
            this.uiDialog.draggable({
                cancel: ".ui-dialog-content, .ui-dialog-titlebar-close",
                handle: ".ui-dialog-titlebar",
                containment: "document",
                start: function(event, ui) {
                    $(this).addClass("ui-dialog-dragging");
                    that._blockFrames();
                    that._trigger("dragStart", event, filteredUi(ui));
                },
                drag: function(event, ui) {
                    that._trigger("drag", event, filteredUi(ui));
                },
                stop: function(event, ui) {
                    options.position = [ ui.position.left - that.document.scrollLeft(), ui.position.top - that.document.scrollTop() ];
                    $(this).removeClass("ui-dialog-dragging");
                    that._unblockFrames();
                    that._trigger("dragStop", event, filteredUi(ui));
                }
            });
        },
        _makeResizable: function() {
            var that = this, options = this.options, handles = options.resizable, position = this.uiDialog.css("position"), resizeHandles = "string" === typeof handles ? handles : "n,e,s,w,se,sw,ne,nw";
            function filteredUi(ui) {
                return {
                    originalPosition: ui.originalPosition,
                    originalSize: ui.originalSize,
                    position: ui.position,
                    size: ui.size
                };
            }
            this.uiDialog.resizable({
                cancel: ".ui-dialog-content",
                containment: "document",
                alsoResize: this.element,
                maxWidth: options.maxWidth,
                maxHeight: options.maxHeight,
                minWidth: options.minWidth,
                minHeight: this._minHeight(),
                handles: resizeHandles,
                start: function(event, ui) {
                    $(this).addClass("ui-dialog-resizing");
                    that._blockFrames();
                    that._trigger("resizeStart", event, filteredUi(ui));
                },
                resize: function(event, ui) {
                    that._trigger("resize", event, filteredUi(ui));
                },
                stop: function(event, ui) {
                    options.height = $(this).height();
                    options.width = $(this).width();
                    $(this).removeClass("ui-dialog-resizing");
                    that._unblockFrames();
                    that._trigger("resizeStop", event, filteredUi(ui));
                }
            }).css("position", position);
        },
        _minHeight: function() {
            var options = this.options;
            return "auto" === options.height ? options.minHeight : Math.min(options.minHeight, options.height);
        },
        _position: function() {
            var isVisible = this.uiDialog.is(":visible");
            if (!isVisible) this.uiDialog.show();
            this.uiDialog.position(this.options.position);
            if (!isVisible) this.uiDialog.hide();
        },
        _setOptions: function(options) {
            var that = this, resize = false, resizableOptions = {};
            $.each(options, function(key, value) {
                that._setOption(key, value);
                if (key in sizeRelatedOptions) resize = true;
                if (key in resizableRelatedOptions) resizableOptions[key] = value;
            });
            if (resize) {
                this._size();
                this._position();
            }
            if (this.uiDialog.is(":data(ui-resizable)")) this.uiDialog.resizable("option", resizableOptions);
        },
        _setOption: function(key, value) {
            var isDraggable, isResizable, uiDialog = this.uiDialog;
            if ("dialogClass" === key) uiDialog.removeClass(this.options.dialogClass).addClass(value);
            if ("disabled" === key) return;
            this._super(key, value);
            if ("appendTo" === key) this.uiDialog.appendTo(this._appendTo());
            if ("buttons" === key) this._createButtons();
            if ("closeText" === key) this.uiDialogTitlebarClose.button({
                label: "" + value
            });
            if ("draggable" === key) {
                isDraggable = uiDialog.is(":data(ui-draggable)");
                if (isDraggable && !value) uiDialog.draggable("destroy");
                if (!isDraggable && value) this._makeDraggable();
            }
            if ("position" === key) this._position();
            if ("resizable" === key) {
                isResizable = uiDialog.is(":data(ui-resizable)");
                if (isResizable && !value) uiDialog.resizable("destroy");
                if (isResizable && "string" === typeof value) uiDialog.resizable("option", "handles", value);
                if (!isResizable && false !== value) this._makeResizable();
            }
            if ("title" === key) this._title(this.uiDialogTitlebar.find(".ui-dialog-title"));
        },
        _size: function() {
            var nonContentHeight, minContentHeight, maxContentHeight, options = this.options;
            this.element.show().css({
                width: "auto",
                minHeight: 0,
                maxHeight: "none",
                height: 0
            });
            if (options.minWidth > options.width) options.width = options.minWidth;
            nonContentHeight = this.uiDialog.css({
                height: "auto",
                width: options.width
            }).outerHeight();
            minContentHeight = Math.max(0, options.minHeight - nonContentHeight);
            maxContentHeight = "number" === typeof options.maxHeight ? Math.max(0, options.maxHeight - nonContentHeight) : "none";
            if ("auto" === options.height) this.element.css({
                minHeight: minContentHeight,
                maxHeight: maxContentHeight,
                height: "auto"
            }); else this.element.height(Math.max(0, options.height - nonContentHeight));
            if (this.uiDialog.is(":data(ui-resizable)")) this.uiDialog.resizable("option", "minHeight", this._minHeight());
        },
        _blockFrames: function() {
            this.iframeBlocks = this.document.find("iframe").map(function() {
                var iframe = $(this);
                return $("<div>").css({
                    position: "absolute",
                    width: iframe.outerWidth(),
                    height: iframe.outerHeight()
                }).appendTo(iframe.parent()).offset(iframe.offset())[0];
            });
        },
        _unblockFrames: function() {
            if (this.iframeBlocks) {
                this.iframeBlocks.remove();
                delete this.iframeBlocks;
            }
        },
        _allowInteraction: function(event) {
            if ($(event.target).closest(".ui-dialog").length) return true;
            return !!$(event.target).closest(".ui-datepicker").length;
        },
        _createOverlay: function() {
            if (!this.options.modal) return;
            var that = this, widgetFullName = this.widgetFullName;
            if (!$.ui.dialog.overlayInstances) this._delay(function() {
                if ($.ui.dialog.overlayInstances) this.document.bind("focusin.dialog", function(event) {
                    if (!that._allowInteraction(event)) {
                        event.preventDefault();
                        $(".ui-dialog:visible:last .ui-dialog-content").data(widgetFullName)._focusTabbable();
                    }
                });
            });
            this.overlay = $("<div>").addClass("ui-widget-overlay ui-front").appendTo(this._appendTo());
            this._on(this.overlay, {
                mousedown: "_keepFocus"
            });
            $.ui.dialog.overlayInstances++;
        },
        _destroyOverlay: function() {
            if (!this.options.modal) return;
            if (this.overlay) {
                $.ui.dialog.overlayInstances--;
                if (!$.ui.dialog.overlayInstances) this.document.unbind("focusin.dialog");
                this.overlay.remove();
                this.overlay = null;
            }
        }
    });
    $.ui.dialog.overlayInstances = 0;
    if (false !== $.uiBackCompat) $.widget("ui.dialog", $.ui.dialog, {
        _position: function() {
            var position = this.options.position, myAt = [], offset = [ 0, 0 ], isVisible;
            if (position) {
                if ("string" === typeof position || "object" === typeof position && "0" in position) {
                    myAt = position.split ? position.split(" ") : [ position[0], position[1] ];
                    if (1 === myAt.length) myAt[1] = myAt[0];
                    $.each([ "left", "top" ], function(i, offsetPosition) {
                        if (+myAt[i] === myAt[i]) {
                            offset[i] = myAt[i];
                            myAt[i] = offsetPosition;
                        }
                    });
                    position = {
                        my: myAt[0] + (offset[0] < 0 ? offset[0] : "+" + offset[0]) + " " + myAt[1] + (offset[1] < 0 ? offset[1] : "+" + offset[1]),
                        at: myAt.join(" ")
                    };
                }
                position = $.extend({}, $.ui.dialog.prototype.options.position, position);
            } else position = $.ui.dialog.prototype.options.position;
            isVisible = this.uiDialog.is(":visible");
            if (!isVisible) this.uiDialog.show();
            this.uiDialog.position(position);
            if (!isVisible) this.uiDialog.hide();
        }
    });
})(jQuery);

(function($, undefined) {
    $.widget("ui.draggable", $.ui.mouse, {
        version: "@VERSION",
        widgetEventPrefix: "drag",
        options: {
            addClasses: true,
            appendTo: "parent",
            axis: false,
            connectToSortable: false,
            containment: false,
            cursor: "auto",
            cursorAt: false,
            grid: false,
            handle: false,
            helper: "original",
            iframeFix: false,
            opacity: false,
            refreshPositions: false,
            revert: false,
            revertDuration: 500,
            scope: "default",
            scroll: true,
            scrollSensitivity: 20,
            scrollSpeed: 20,
            snap: false,
            snapMode: "both",
            snapTolerance: 20,
            stack: false,
            zIndex: false,
            drag: null,
            start: null,
            stop: null
        },
        _create: function() {
            if ("original" === this.options.helper && !/^(?:r|a|f)/.test(this.element.css("position"))) this.element[0].style.position = "relative";
            if (this.options.addClasses) this.element.addClass("ui-draggable");
            if (this.options.disabled) this.element.addClass("ui-draggable-disabled");
            this._mouseInit();
        },
        _destroy: function() {
            this.element.removeClass("ui-draggable ui-draggable-dragging ui-draggable-disabled");
            this._mouseDestroy();
        },
        _mouseCapture: function(event) {
            var o = this.options;
            if (this.helper || o.disabled || $(event.target).closest(".ui-resizable-handle").length > 0) return false;
            this.handle = this._getHandle(event);
            if (!this.handle) return false;
            $(true === o.iframeFix ? "iframe" : o.iframeFix).each(function() {
                $("<div class='ui-draggable-iframeFix' style='background: #fff;'></div>").css({
                    width: this.offsetWidth + "px",
                    height: this.offsetHeight + "px",
                    position: "absolute",
                    opacity: "0.001",
                    zIndex: 1e3
                }).css($(this).offset()).appendTo("body");
            });
            return true;
        },
        _mouseStart: function(event) {
            var o = this.options;
            this.helper = this._createHelper(event);
            this.helper.addClass("ui-draggable-dragging");
            this._cacheHelperProportions();
            if ($.ui.ddmanager) $.ui.ddmanager.current = this;
            this._cacheMargins();
            this.cssPosition = this.helper.css("position");
            this.scrollParent = this.helper.scrollParent();
            this.offsetParent = this.helper.offsetParent();
            this.offsetParentCssPosition = this.offsetParent.css("position");
            this.offset = this.positionAbs = this.element.offset();
            this.offset = {
                top: this.offset.top - this.margins.top,
                left: this.offset.left - this.margins.left
            };
            this.offset.scroll = false;
            $.extend(this.offset, {
                click: {
                    left: event.pageX - this.offset.left,
                    top: event.pageY - this.offset.top
                },
                parent: this._getParentOffset(),
                relative: this._getRelativeOffset()
            });
            this.originalPosition = this.position = this._generatePosition(event);
            this.originalPageX = event.pageX;
            this.originalPageY = event.pageY;
            o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt);
            this._setContainment();
            if (false === this._trigger("start", event)) {
                this._clear();
                return false;
            }
            this._cacheHelperProportions();
            if ($.ui.ddmanager && !o.dropBehaviour) $.ui.ddmanager.prepareOffsets(this, event);
            this._mouseDrag(event, true);
            if ($.ui.ddmanager) $.ui.ddmanager.dragStart(this, event);
            return true;
        },
        _mouseDrag: function(event, noPropagation) {
            if ("fixed" === this.offsetParentCssPosition) this.offset.parent = this._getParentOffset();
            this.position = this._generatePosition(event);
            this.positionAbs = this._convertPositionTo("absolute");
            if (!noPropagation) {
                var ui = this._uiHash();
                if (false === this._trigger("drag", event, ui)) {
                    this._mouseUp({});
                    return false;
                }
                this.position = ui.position;
            }
            if (!this.options.axis || "y" !== this.options.axis) this.helper[0].style.left = this.position.left + "px";
            if (!this.options.axis || "x" !== this.options.axis) this.helper[0].style.top = this.position.top + "px";
            if ($.ui.ddmanager) $.ui.ddmanager.drag(this, event);
            return false;
        },
        _mouseStop: function(event) {
            var that = this, dropped = false;
            if ($.ui.ddmanager && !this.options.dropBehaviour) dropped = $.ui.ddmanager.drop(this, event);
            if (this.dropped) {
                dropped = this.dropped;
                this.dropped = false;
            }
            if ("original" === this.options.helper && !$.contains(this.element[0].ownerDocument, this.element[0])) return false;
            if ("invalid" === this.options.revert && !dropped || "valid" === this.options.revert && dropped || true === this.options.revert || $.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped)) $(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function() {
                if (false !== that._trigger("stop", event)) that._clear();
            }); else if (false !== this._trigger("stop", event)) this._clear();
            return false;
        },
        _mouseUp: function(event) {
            $("div.ui-draggable-iframeFix").each(function() {
                this.parentNode.removeChild(this);
            });
            if ($.ui.ddmanager) $.ui.ddmanager.dragStop(this, event);
            return $.ui.mouse.prototype._mouseUp.call(this, event);
        },
        cancel: function() {
            if (this.helper.is(".ui-draggable-dragging")) this._mouseUp({}); else this._clear();
            return this;
        },
        _getHandle: function(event) {
            return this.options.handle ? !!$(event.target).closest(this.element.find(this.options.handle)).length : true;
        },
        _createHelper: function(event) {
            var o = this.options, helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [ event ])) : "clone" === o.helper ? this.element.clone().removeAttr("id") : this.element;
            if (!helper.parents("body").length) helper.appendTo("parent" === o.appendTo ? this.element[0].parentNode : o.appendTo);
            if (helper[0] !== this.element[0] && !/(fixed|absolute)/.test(helper.css("position"))) helper.css("position", "absolute");
            return helper;
        },
        _adjustOffsetFromHelper: function(obj) {
            if ("string" === typeof obj) obj = obj.split(" ");
            if ($.isArray(obj)) obj = {
                left: +obj[0],
                top: +obj[1] || 0
            };
            if ("left" in obj) this.offset.click.left = obj.left + this.margins.left;
            if ("right" in obj) this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
            if ("top" in obj) this.offset.click.top = obj.top + this.margins.top;
            if ("bottom" in obj) this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
        },
        _getParentOffset: function() {
            var po = this.offsetParent.offset();
            if ("absolute" === this.cssPosition && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
                po.left += this.scrollParent.scrollLeft();
                po.top += this.scrollParent.scrollTop();
            }
            if (this.offsetParent[0] === document.body || this.offsetParent[0].tagName && "html" === this.offsetParent[0].tagName.toLowerCase() && $.ui.ie) po = {
                top: 0,
                left: 0
            };
            return {
                top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
                left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
            };
        },
        _getRelativeOffset: function() {
            if ("relative" === this.cssPosition) {
                var p = this.element.position();
                return {
                    top: p.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(),
                    left: p.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()
                };
            } else return {
                top: 0,
                left: 0
            };
        },
        _cacheMargins: function() {
            this.margins = {
                left: parseInt(this.element.css("marginLeft"), 10) || 0,
                top: parseInt(this.element.css("marginTop"), 10) || 0,
                right: parseInt(this.element.css("marginRight"), 10) || 0,
                bottom: parseInt(this.element.css("marginBottom"), 10) || 0
            };
        },
        _cacheHelperProportions: function() {
            this.helperProportions = {
                width: this.helper.outerWidth(),
                height: this.helper.outerHeight()
            };
        },
        _setContainment: function() {
            var over, c, ce, o = this.options;
            if (!o.containment) {
                this.containment = null;
                return;
            }
            if ("window" === o.containment) {
                this.containment = [ $(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left, $(window).scrollTop() - this.offset.relative.top - this.offset.parent.top, $(window).scrollLeft() + $(window).width() - this.helperProportions.width - this.margins.left, $(window).scrollTop() + ($(window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top ];
                return;
            }
            if ("document" === o.containment) {
                this.containment = [ 0, 0, $(document).width() - this.helperProportions.width - this.margins.left, ($(document).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top ];
                return;
            }
            if (o.containment.constructor === Array) {
                this.containment = o.containment;
                return;
            }
            if ("parent" === o.containment) o.containment = this.helper[0].parentNode;
            c = $(o.containment);
            ce = c[0];
            if (!ce) return;
            over = "hidden" !== c.css("overflow");
            this.containment = [ (parseInt(c.css("borderLeftWidth"), 10) || 0) + (parseInt(c.css("paddingLeft"), 10) || 0), (parseInt(c.css("borderTopWidth"), 10) || 0) + (parseInt(c.css("paddingTop"), 10) || 0), (over ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt(c.css("borderRightWidth"), 10) || 0) - (parseInt(c.css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right, (over ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt(c.css("borderBottomWidth"), 10) || 0) - (parseInt(c.css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom ];
            this.relative_container = c;
        },
        _convertPositionTo: function(d, pos) {
            if (!pos) pos = this.position;
            var mod = "absolute" === d ? 1 : -1, scroll = "absolute" === this.cssPosition && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent;
            if (!this.offset.scroll) this.offset.scroll = {
                top: scroll.scrollTop(),
                left: scroll.scrollLeft()
            };
            return {
                top: pos.top + this.offset.relative.top * mod + this.offset.parent.top * mod - ("fixed" === this.cssPosition ? -this.scrollParent.scrollTop() : this.offset.scroll.top) * mod,
                left: pos.left + this.offset.relative.left * mod + this.offset.parent.left * mod - ("fixed" === this.cssPosition ? -this.scrollParent.scrollLeft() : this.offset.scroll.left) * mod
            };
        },
        _generatePosition: function(event) {
            var containment, co, top, left, o = this.options, scroll = "absolute" === this.cssPosition && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, pageX = event.pageX, pageY = event.pageY;
            if (!this.offset.scroll) this.offset.scroll = {
                top: scroll.scrollTop(),
                left: scroll.scrollLeft()
            };
            if (this.originalPosition) {
                if (this.containment) {
                    if (this.relative_container) {
                        co = this.relative_container.offset();
                        containment = [ this.containment[0] + co.left, this.containment[1] + co.top, this.containment[2] + co.left, this.containment[3] + co.top ];
                    } else containment = this.containment;
                    if (event.pageX - this.offset.click.left < containment[0]) pageX = containment[0] + this.offset.click.left;
                    if (event.pageY - this.offset.click.top < containment[1]) pageY = containment[1] + this.offset.click.top;
                    if (event.pageX - this.offset.click.left > containment[2]) pageX = containment[2] + this.offset.click.left;
                    if (event.pageY - this.offset.click.top > containment[3]) pageY = containment[3] + this.offset.click.top;
                }
                if (o.grid) {
                    top = o.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY;
                    pageY = containment ? top - this.offset.click.top >= containment[1] || top - this.offset.click.top > containment[3] ? top : top - this.offset.click.top >= containment[1] ? top - o.grid[1] : top + o.grid[1] : top;
                    left = o.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX;
                    pageX = containment ? left - this.offset.click.left >= containment[0] || left - this.offset.click.left > containment[2] ? left : left - this.offset.click.left >= containment[0] ? left - o.grid[0] : left + o.grid[0] : left;
                }
            }
            return {
                top: pageY - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + ("fixed" === this.cssPosition ? -this.scrollParent.scrollTop() : this.offset.scroll.top),
                left: pageX - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + ("fixed" === this.cssPosition ? -this.scrollParent.scrollLeft() : this.offset.scroll.left)
            };
        },
        _clear: function() {
            this.helper.removeClass("ui-draggable-dragging");
            if (this.helper[0] !== this.element[0] && !this.cancelHelperRemoval) this.helper.remove();
            this.helper = null;
            this.cancelHelperRemoval = false;
        },
        _trigger: function(type, event, ui) {
            ui = ui || this._uiHash();
            $.ui.plugin.call(this, type, [ event, ui ]);
            if ("drag" === type) this.positionAbs = this._convertPositionTo("absolute");
            return $.Widget.prototype._trigger.call(this, type, event, ui);
        },
        plugins: {},
        _uiHash: function() {
            return {
                helper: this.helper,
                position: this.position,
                originalPosition: this.originalPosition,
                offset: this.positionAbs
            };
        }
    });
    $.ui.plugin.add("draggable", "connectToSortable", {
        start: function(event, ui) {
            var inst = $(this).data("ui-draggable"), o = inst.options, uiSortable = $.extend({}, ui, {
                item: inst.element
            });
            inst.sortables = [];
            $(o.connectToSortable).each(function() {
                var sortable = $.data(this, "ui-sortable");
                if (sortable && !sortable.options.disabled) {
                    inst.sortables.push({
                        instance: sortable,
                        shouldRevert: sortable.options.revert
                    });
                    sortable.refreshPositions();
                    sortable._trigger("activate", event, uiSortable);
                }
            });
        },
        stop: function(event, ui) {
            var inst = $(this).data("ui-draggable"), uiSortable = $.extend({}, ui, {
                item: inst.element
            });
            $.each(inst.sortables, function() {
                if (this.instance.isOver) {
                    this.instance.isOver = 0;
                    inst.cancelHelperRemoval = true;
                    this.instance.cancelHelperRemoval = false;
                    if (this.shouldRevert) this.instance.options.revert = this.shouldRevert;
                    this.instance._mouseStop(event);
                    this.instance.options.helper = this.instance.options._helper;
                    if ("original" === inst.options.helper) this.instance.currentItem.css({
                        top: "auto",
                        left: "auto"
                    });
                } else {
                    this.instance.cancelHelperRemoval = false;
                    this.instance._trigger("deactivate", event, uiSortable);
                }
            });
        },
        drag: function(event, ui) {
            var inst = $(this).data("ui-draggable"), that = this;
            $.each(inst.sortables, function() {
                var innermostIntersecting = false, thisSortable = this;
                this.instance.positionAbs = inst.positionAbs;
                this.instance.helperProportions = inst.helperProportions;
                this.instance.offset.click = inst.offset.click;
                if (this.instance._intersectsWith(this.instance.containerCache)) {
                    innermostIntersecting = true;
                    $.each(inst.sortables, function() {
                        this.instance.positionAbs = inst.positionAbs;
                        this.instance.helperProportions = inst.helperProportions;
                        this.instance.offset.click = inst.offset.click;
                        if (this !== thisSortable && this.instance._intersectsWith(this.instance.containerCache) && $.contains(thisSortable.instance.element[0], this.instance.element[0])) innermostIntersecting = false;
                        return innermostIntersecting;
                    });
                }
                if (innermostIntersecting) {
                    if (!this.instance.isOver) {
                        this.instance.isOver = 1;
                        this.instance.currentItem = $(that).clone().removeAttr("id").appendTo(this.instance.element).data("ui-sortable-item", true);
                        this.instance.options._helper = this.instance.options.helper;
                        this.instance.options.helper = function() {
                            return ui.helper[0];
                        };
                        event.target = this.instance.currentItem[0];
                        this.instance._mouseCapture(event, true);
                        this.instance._mouseStart(event, true, true);
                        this.instance.offset.click.top = inst.offset.click.top;
                        this.instance.offset.click.left = inst.offset.click.left;
                        this.instance.offset.parent.left -= inst.offset.parent.left - this.instance.offset.parent.left;
                        this.instance.offset.parent.top -= inst.offset.parent.top - this.instance.offset.parent.top;
                        inst._trigger("toSortable", event);
                        inst.dropped = this.instance.element;
                        inst.currentItem = inst.element;
                        this.instance.fromOutside = inst;
                    }
                    if (this.instance.currentItem) this.instance._mouseDrag(event);
                } else if (this.instance.isOver) {
                    this.instance.isOver = 0;
                    this.instance.cancelHelperRemoval = true;
                    this.instance.options.revert = false;
                    this.instance._trigger("out", event, this.instance._uiHash(this.instance));
                    this.instance._mouseStop(event, true);
                    this.instance.options.helper = this.instance.options._helper;
                    this.instance.currentItem.remove();
                    if (this.instance.placeholder) this.instance.placeholder.remove();
                    inst._trigger("fromSortable", event);
                    inst.dropped = false;
                }
            });
        }
    });
    $.ui.plugin.add("draggable", "cursor", {
        start: function() {
            var t = $("body"), o = $(this).data("ui-draggable").options;
            if (t.css("cursor")) o._cursor = t.css("cursor");
            t.css("cursor", o.cursor);
        },
        stop: function() {
            var o = $(this).data("ui-draggable").options;
            if (o._cursor) $("body").css("cursor", o._cursor);
        }
    });
    $.ui.plugin.add("draggable", "opacity", {
        start: function(event, ui) {
            var t = $(ui.helper), o = $(this).data("ui-draggable").options;
            if (t.css("opacity")) o._opacity = t.css("opacity");
            t.css("opacity", o.opacity);
        },
        stop: function(event, ui) {
            var o = $(this).data("ui-draggable").options;
            if (o._opacity) $(ui.helper).css("opacity", o._opacity);
        }
    });
    $.ui.plugin.add("draggable", "scroll", {
        start: function() {
            var i = $(this).data("ui-draggable");
            if (i.scrollParent[0] !== document && "HTML" !== i.scrollParent[0].tagName) i.overflowOffset = i.scrollParent.offset();
        },
        drag: function(event) {
            var i = $(this).data("ui-draggable"), o = i.options, scrolled = false;
            if (i.scrollParent[0] !== document && "HTML" !== i.scrollParent[0].tagName) {
                if (!o.axis || "x" !== o.axis) if (i.overflowOffset.top + i.scrollParent[0].offsetHeight - event.pageY < o.scrollSensitivity) i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop + o.scrollSpeed; else if (event.pageY - i.overflowOffset.top < o.scrollSensitivity) i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop - o.scrollSpeed;
                if (!o.axis || "y" !== o.axis) if (i.overflowOffset.left + i.scrollParent[0].offsetWidth - event.pageX < o.scrollSensitivity) i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft + o.scrollSpeed; else if (event.pageX - i.overflowOffset.left < o.scrollSensitivity) i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft - o.scrollSpeed;
            } else {
                if (!o.axis || "x" !== o.axis) if (event.pageY - $(document).scrollTop() < o.scrollSensitivity) scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed); else if ($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
                if (!o.axis || "y" !== o.axis) if (event.pageX - $(document).scrollLeft() < o.scrollSensitivity) scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed); else if ($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
            }
            if (false !== scrolled && $.ui.ddmanager && !o.dropBehaviour) $.ui.ddmanager.prepareOffsets(i, event);
        }
    });
    $.ui.plugin.add("draggable", "snap", {
        start: function() {
            var i = $(this).data("ui-draggable"), o = i.options;
            i.snapElements = [];
            $(o.snap.constructor !== String ? o.snap.items || ":data(ui-draggable)" : o.snap).each(function() {
                var $t = $(this), $o = $t.offset();
                if (this !== i.element[0]) i.snapElements.push({
                    item: this,
                    width: $t.outerWidth(),
                    height: $t.outerHeight(),
                    top: $o.top,
                    left: $o.left
                });
            });
        },
        drag: function(event, ui) {
            var ts, bs, ls, rs, l, r, t, b, i, first, inst = $(this).data("ui-draggable"), o = inst.options, d = o.snapTolerance, x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width, y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height;
            for (i = inst.snapElements.length - 1; i >= 0; i--) {
                l = inst.snapElements[i].left;
                r = l + inst.snapElements[i].width;
                t = inst.snapElements[i].top;
                b = t + inst.snapElements[i].height;
                if (x2 < l - d || x1 > r + d || y2 < t - d || y1 > b + d || !$.contains(inst.snapElements[i].item.ownerDocument, inst.snapElements[i].item)) {
                    if (inst.snapElements[i].snapping) inst.options.snap.release && inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), {
                        snapItem: inst.snapElements[i].item
                    }));
                    inst.snapElements[i].snapping = false;
                    continue;
                }
                if ("inner" !== o.snapMode) {
                    ts = Math.abs(t - y2) <= d;
                    bs = Math.abs(b - y1) <= d;
                    ls = Math.abs(l - x2) <= d;
                    rs = Math.abs(r - x1) <= d;
                    if (ts) ui.position.top = inst._convertPositionTo("relative", {
                        top: t - inst.helperProportions.height,
                        left: 0
                    }).top - inst.margins.top;
                    if (bs) ui.position.top = inst._convertPositionTo("relative", {
                        top: b,
                        left: 0
                    }).top - inst.margins.top;
                    if (ls) ui.position.left = inst._convertPositionTo("relative", {
                        top: 0,
                        left: l - inst.helperProportions.width
                    }).left - inst.margins.left;
                    if (rs) ui.position.left = inst._convertPositionTo("relative", {
                        top: 0,
                        left: r
                    }).left - inst.margins.left;
                }
                first = ts || bs || ls || rs;
                if ("outer" !== o.snapMode) {
                    ts = Math.abs(t - y1) <= d;
                    bs = Math.abs(b - y2) <= d;
                    ls = Math.abs(l - x1) <= d;
                    rs = Math.abs(r - x2) <= d;
                    if (ts) ui.position.top = inst._convertPositionTo("relative", {
                        top: t,
                        left: 0
                    }).top - inst.margins.top;
                    if (bs) ui.position.top = inst._convertPositionTo("relative", {
                        top: b - inst.helperProportions.height,
                        left: 0
                    }).top - inst.margins.top;
                    if (ls) ui.position.left = inst._convertPositionTo("relative", {
                        top: 0,
                        left: l
                    }).left - inst.margins.left;
                    if (rs) ui.position.left = inst._convertPositionTo("relative", {
                        top: 0,
                        left: r - inst.helperProportions.width
                    }).left - inst.margins.left;
                }
                if (!inst.snapElements[i].snapping && (ts || bs || ls || rs || first)) inst.options.snap.snap && inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), {
                    snapItem: inst.snapElements[i].item
                }));
                inst.snapElements[i].snapping = ts || bs || ls || rs || first;
            }
        }
    });
    $.ui.plugin.add("draggable", "stack", {
        start: function() {
            var min, o = this.data("ui-draggable").options, group = $.makeArray($(o.stack)).sort(function(a, b) {
                return (parseInt($(a).css("zIndex"), 10) || 0) - (parseInt($(b).css("zIndex"), 10) || 0);
            });
            if (!group.length) return;
            min = parseInt($(group[0]).css("zIndex"), 10) || 0;
            $(group).each(function(i) {
                $(this).css("zIndex", min + i);
            });
            this.css("zIndex", min + group.length);
        }
    });
    $.ui.plugin.add("draggable", "zIndex", {
        start: function(event, ui) {
            var t = $(ui.helper), o = $(this).data("ui-draggable").options;
            if (t.css("zIndex")) o._zIndex = t.css("zIndex");
            t.css("zIndex", o.zIndex);
        },
        stop: function(event, ui) {
            var o = $(this).data("ui-draggable").options;
            if (o._zIndex) $(ui.helper).css("zIndex", o._zIndex);
        }
    });
})(jQuery);

(function($, undefined) {
    $.ui = $.ui || {};
    var cachedScrollbarWidth, max = Math.max, abs = Math.abs, round = Math.round, rhorizontal = /left|center|right/, rvertical = /top|center|bottom/, roffset = /[\+\-]\d+(\.[\d]+)?%?/, rposition = /^\w+/, rpercent = /%$/, _position = $.fn.position;
    function getOffsets(offsets, width, height) {
        return [ parseFloat(offsets[0]) * (rpercent.test(offsets[0]) ? width / 100 : 1), parseFloat(offsets[1]) * (rpercent.test(offsets[1]) ? height / 100 : 1) ];
    }
    function parseCss(element, property) {
        return parseInt($.css(element, property), 10) || 0;
    }
    function getDimensions(elem) {
        var raw = elem[0];
        if (9 === raw.nodeType) return {
            width: elem.width(),
            height: elem.height(),
            offset: {
                top: 0,
                left: 0
            }
        };
        if ($.isWindow(raw)) return {
            width: elem.width(),
            height: elem.height(),
            offset: {
                top: elem.scrollTop(),
                left: elem.scrollLeft()
            }
        };
        if (raw.preventDefault) return {
            width: 0,
            height: 0,
            offset: {
                top: raw.pageY,
                left: raw.pageX
            }
        };
        return {
            width: elem.outerWidth(),
            height: elem.outerHeight(),
            offset: elem.offset()
        };
    }
    $.position = {
        scrollbarWidth: function() {
            if (cachedScrollbarWidth !== undefined) return cachedScrollbarWidth;
            var w1, w2, div = $("<div style='display:block;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"), innerDiv = div.children()[0];
            $("body").append(div);
            w1 = innerDiv.offsetWidth;
            div.css("overflow", "scroll");
            w2 = innerDiv.offsetWidth;
            if (w1 === w2) w2 = div[0].clientWidth;
            div.remove();
            return cachedScrollbarWidth = w1 - w2;
        },
        getScrollInfo: function(within) {
            var overflowX = within.isWindow ? "" : within.element.css("overflow-x"), overflowY = within.isWindow ? "" : within.element.css("overflow-y"), hasOverflowX = "scroll" === overflowX || "auto" === overflowX && within.width < within.element[0].scrollWidth, hasOverflowY = "scroll" === overflowY || "auto" === overflowY && within.height < within.element[0].scrollHeight;
            return {
                width: hasOverflowY ? $.position.scrollbarWidth() : 0,
                height: hasOverflowX ? $.position.scrollbarWidth() : 0
            };
        },
        getWithinInfo: function(element) {
            var withinElement = $(element || window), isWindow = $.isWindow(withinElement[0]);
            return {
                element: withinElement,
                isWindow: isWindow,
                offset: withinElement.offset() || {
                    left: 0,
                    top: 0
                },
                scrollLeft: withinElement.scrollLeft(),
                scrollTop: withinElement.scrollTop(),
                width: isWindow ? withinElement.width() : withinElement.outerWidth(),
                height: isWindow ? withinElement.height() : withinElement.outerHeight()
            };
        }
    };
    $.fn.position = function(options) {
        if (!options || !options.of) return _position.apply(this, arguments);
        options = $.extend({}, options);
        var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions, target = $(options.of), within = $.position.getWithinInfo(options.within), scrollInfo = $.position.getScrollInfo(within), collision = (options.collision || "flip").split(" "), offsets = {};
        dimensions = getDimensions(target);
        if (target[0].preventDefault) options.at = "left top";
        targetWidth = dimensions.width;
        targetHeight = dimensions.height;
        targetOffset = dimensions.offset;
        basePosition = $.extend({}, targetOffset);
        $.each([ "my", "at" ], function() {
            var pos = (options[this] || "").split(" "), horizontalOffset, verticalOffset;
            if (1 === pos.length) pos = rhorizontal.test(pos[0]) ? pos.concat([ "center" ]) : rvertical.test(pos[0]) ? [ "center" ].concat(pos) : [ "center", "center" ];
            pos[0] = rhorizontal.test(pos[0]) ? pos[0] : "center";
            pos[1] = rvertical.test(pos[1]) ? pos[1] : "center";
            horizontalOffset = roffset.exec(pos[0]);
            verticalOffset = roffset.exec(pos[1]);
            offsets[this] = [ horizontalOffset ? horizontalOffset[0] : 0, verticalOffset ? verticalOffset[0] : 0 ];
            options[this] = [ rposition.exec(pos[0])[0], rposition.exec(pos[1])[0] ];
        });
        if (1 === collision.length) collision[1] = collision[0];
        if ("right" === options.at[0]) basePosition.left += targetWidth; else if ("center" === options.at[0]) basePosition.left += targetWidth / 2;
        if ("bottom" === options.at[1]) basePosition.top += targetHeight; else if ("center" === options.at[1]) basePosition.top += targetHeight / 2;
        atOffset = getOffsets(offsets.at, targetWidth, targetHeight);
        basePosition.left += atOffset[0];
        basePosition.top += atOffset[1];
        return this.each(function() {
            var collisionPosition, using, elem = $(this), elemWidth = elem.outerWidth(), elemHeight = elem.outerHeight(), marginLeft = parseCss(this, "marginLeft"), marginTop = parseCss(this, "marginTop"), collisionWidth = elemWidth + marginLeft + parseCss(this, "marginRight") + scrollInfo.width, collisionHeight = elemHeight + marginTop + parseCss(this, "marginBottom") + scrollInfo.height, position = $.extend({}, basePosition), myOffset = getOffsets(offsets.my, elem.outerWidth(), elem.outerHeight());
            if ("right" === options.my[0]) position.left -= elemWidth; else if ("center" === options.my[0]) position.left -= elemWidth / 2;
            if ("bottom" === options.my[1]) position.top -= elemHeight; else if ("center" === options.my[1]) position.top -= elemHeight / 2;
            position.left += myOffset[0];
            position.top += myOffset[1];
            if (!$.support.offsetFractions) {
                position.left = round(position.left);
                position.top = round(position.top);
            }
            collisionPosition = {
                marginLeft: marginLeft,
                marginTop: marginTop
            };
            $.each([ "left", "top" ], function(i, dir) {
                if ($.ui.position[collision[i]]) $.ui.position[collision[i]][dir](position, {
                    targetWidth: targetWidth,
                    targetHeight: targetHeight,
                    elemWidth: elemWidth,
                    elemHeight: elemHeight,
                    collisionPosition: collisionPosition,
                    collisionWidth: collisionWidth,
                    collisionHeight: collisionHeight,
                    offset: [ atOffset[0] + myOffset[0], atOffset[1] + myOffset[1] ],
                    my: options.my,
                    at: options.at,
                    within: within,
                    elem: elem
                });
            });
            if (options.using) using = function(props) {
                var left = targetOffset.left - position.left, right = left + targetWidth - elemWidth, top = targetOffset.top - position.top, bottom = top + targetHeight - elemHeight, feedback = {
                    target: {
                        element: target,
                        left: targetOffset.left,
                        top: targetOffset.top,
                        width: targetWidth,
                        height: targetHeight
                    },
                    element: {
                        element: elem,
                        left: position.left,
                        top: position.top,
                        width: elemWidth,
                        height: elemHeight
                    },
                    horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",
                    vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
                };
                if (targetWidth < elemWidth && abs(left + right) < targetWidth) feedback.horizontal = "center";
                if (targetHeight < elemHeight && abs(top + bottom) < targetHeight) feedback.vertical = "middle";
                if (max(abs(left), abs(right)) > max(abs(top), abs(bottom))) feedback.important = "horizontal"; else feedback.important = "vertical";
                options.using.call(this, props, feedback);
            };
            elem.offset($.extend(position, {
                using: using
            }));
        });
    };
    $.ui.position = {
        fit: {
            left: function(position, data) {
                var within = data.within, withinOffset = within.isWindow ? within.scrollLeft : within.offset.left, outerWidth = within.width, collisionPosLeft = position.left - data.collisionPosition.marginLeft, overLeft = withinOffset - collisionPosLeft, overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset, newOverRight;
                if (data.collisionWidth > outerWidth) if (overLeft > 0 && overRight <= 0) {
                    newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;
                    position.left += overLeft - newOverRight;
                } else if (overRight > 0 && overLeft <= 0) position.left = withinOffset; else if (overLeft > overRight) position.left = withinOffset + outerWidth - data.collisionWidth; else position.left = withinOffset; else if (overLeft > 0) position.left += overLeft; else if (overRight > 0) position.left -= overRight; else position.left = max(position.left - collisionPosLeft, position.left);
            },
            top: function(position, data) {
                var within = data.within, withinOffset = within.isWindow ? within.scrollTop : within.offset.top, outerHeight = data.within.height, collisionPosTop = position.top - data.collisionPosition.marginTop, overTop = withinOffset - collisionPosTop, overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset, newOverBottom;
                if (data.collisionHeight > outerHeight) if (overTop > 0 && overBottom <= 0) {
                    newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;
                    position.top += overTop - newOverBottom;
                } else if (overBottom > 0 && overTop <= 0) position.top = withinOffset; else if (overTop > overBottom) position.top = withinOffset + outerHeight - data.collisionHeight; else position.top = withinOffset; else if (overTop > 0) position.top += overTop; else if (overBottom > 0) position.top -= overBottom; else position.top = max(position.top - collisionPosTop, position.top);
            }
        },
        flip: {
            left: function(position, data) {
                var within = data.within, withinOffset = within.offset.left + within.scrollLeft, outerWidth = within.width, offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left, collisionPosLeft = position.left - data.collisionPosition.marginLeft, overLeft = collisionPosLeft - offsetLeft, overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft, myOffset = "left" === data.my[0] ? -data.elemWidth : "right" === data.my[0] ? data.elemWidth : 0, atOffset = "left" === data.at[0] ? data.targetWidth : "right" === data.at[0] ? -data.targetWidth : 0, offset = -2 * data.offset[0], newOverRight, newOverLeft;
                if (overLeft < 0) {
                    newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;
                    if (newOverRight < 0 || newOverRight < abs(overLeft)) position.left += myOffset + atOffset + offset;
                } else if (overRight > 0) {
                    newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;
                    if (newOverLeft > 0 || abs(newOverLeft) < overRight) position.left += myOffset + atOffset + offset;
                }
            },
            top: function(position, data) {
                var within = data.within, withinOffset = within.offset.top + within.scrollTop, outerHeight = within.height, offsetTop = within.isWindow ? within.scrollTop : within.offset.top, collisionPosTop = position.top - data.collisionPosition.marginTop, overTop = collisionPosTop - offsetTop, overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop, top = "top" === data.my[1], myOffset = top ? -data.elemHeight : "bottom" === data.my[1] ? data.elemHeight : 0, atOffset = "top" === data.at[1] ? data.targetHeight : "bottom" === data.at[1] ? -data.targetHeight : 0, offset = -2 * data.offset[1], newOverTop, newOverBottom;
                if (overTop < 0) {
                    newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;
                    if (position.top + myOffset + atOffset + offset > overTop && (newOverBottom < 0 || newOverBottom < abs(overTop))) position.top += myOffset + atOffset + offset;
                } else if (overBottom > 0) {
                    newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;
                    if (position.top + myOffset + atOffset + offset > overBottom && (newOverTop > 0 || abs(newOverTop) < overBottom)) position.top += myOffset + atOffset + offset;
                }
            }
        },
        flipfit: {
            left: function() {
                $.ui.position.flip.left.apply(this, arguments);
                $.ui.position.fit.left.apply(this, arguments);
            },
            top: function() {
                $.ui.position.flip.top.apply(this, arguments);
                $.ui.position.fit.top.apply(this, arguments);
            }
        }
    };
    (function() {
        var testElement, testElementParent, testElementStyle, offsetLeft, i, body = document.getElementsByTagName("body")[0], div = document.createElement("div");
        testElement = document.createElement(body ? "div" : "body");
        testElementStyle = {
            visibility: "hidden",
            width: 0,
            height: 0,
            border: 0,
            margin: 0,
            background: "none"
        };
        if (body) $.extend(testElementStyle, {
            position: "absolute",
            left: "-1000px",
            top: "-1000px"
        });
        for (i in testElementStyle) testElement.style[i] = testElementStyle[i];
        testElement.appendChild(div);
        testElementParent = body || document.documentElement;
        testElementParent.insertBefore(testElement, testElementParent.firstChild);
        div.style.cssText = "position: absolute; left: 10.7432222px;";
        offsetLeft = $(div).offset().left;
        $.support.offsetFractions = offsetLeft > 10 && offsetLeft < 11;
        testElement.innerHTML = "";
        testElementParent.removeChild(testElement);
    })();
})(jQuery);

(function($, undefined) {
    $.widget("ui.progressbar", {
        version: "@VERSION",
        options: {
            max: 100,
            value: 0,
            change: null,
            complete: null
        },
        min: 0,
        _create: function() {
            this.oldValue = this.options.value = this._constrainedValue();
            this.element.addClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").attr({
                role: "progressbar",
                "aria-valuemin": this.min
            });
            this.valueDiv = $("<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>").appendTo(this.element);
            this._refreshValue();
        },
        _destroy: function() {
            this.element.removeClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow");
            this.valueDiv.remove();
        },
        value: function(newValue) {
            if (newValue === undefined) return this.options.value;
            this.options.value = this._constrainedValue(newValue);
            this._refreshValue();
        },
        _constrainedValue: function(newValue) {
            if (newValue === undefined) newValue = this.options.value;
            this.indeterminate = false === newValue;
            if ("number" !== typeof newValue) newValue = 0;
            return this.indeterminate ? false : Math.min(this.options.max, Math.max(this.min, newValue));
        },
        _setOptions: function(options) {
            var value = options.value;
            delete options.value;
            this._super(options);
            this.options.value = this._constrainedValue(value);
            this._refreshValue();
        },
        _setOption: function(key, value) {
            if ("max" === key) value = Math.max(this.min, value);
            this._super(key, value);
        },
        _percentage: function() {
            return this.indeterminate ? 100 : 100 * (this.options.value - this.min) / (this.options.max - this.min);
        },
        _refreshValue: function() {
            var value = this.options.value, percentage = this._percentage();
            this.valueDiv.toggle(this.indeterminate || value > this.min).toggleClass("ui-corner-right", value === this.options.max).width(percentage.toFixed(0) + "%");
            this.element.toggleClass("ui-progressbar-indeterminate", this.indeterminate);
            if (this.indeterminate) {
                this.element.removeAttr("aria-valuenow");
                if (!this.overlayDiv) this.overlayDiv = $("<div class='ui-progressbar-overlay'></div>").appendTo(this.valueDiv);
            } else {
                this.element.attr({
                    "aria-valuemax": this.options.max,
                    "aria-valuenow": value
                });
                if (this.overlayDiv) {
                    this.overlayDiv.remove();
                    this.overlayDiv = null;
                }
            }
            if (this.oldValue !== value) {
                this.oldValue = value;
                this._trigger("change");
            }
            if (value === this.options.max) this._trigger("complete");
        }
    });
})(jQuery);

(function($, undefined) {
    function num(v) {
        return parseInt(v, 10) || 0;
    }
    function isNumber(value) {
        return !isNaN(parseInt(value, 10));
    }
    $.widget("ui.resizable", $.ui.mouse, {
        version: "@VERSION",
        widgetEventPrefix: "resize",
        options: {
            alsoResize: false,
            animate: false,
            animateDuration: "slow",
            animateEasing: "swing",
            aspectRatio: false,
            autoHide: false,
            containment: false,
            ghost: false,
            grid: false,
            handles: "e,s,se",
            helper: false,
            maxHeight: null,
            maxWidth: null,
            minHeight: 10,
            minWidth: 10,
            zIndex: 90,
            resize: null,
            start: null,
            stop: null
        },
        _create: function() {
            var n, i, handle, axis, hname, that = this, o = this.options;
            this.element.addClass("ui-resizable");
            $.extend(this, {
                _aspectRatio: !!o.aspectRatio,
                aspectRatio: o.aspectRatio,
                originalElement: this.element,
                _proportionallyResizeElements: [],
                _helper: o.helper || o.ghost || o.animate ? o.helper || "ui-resizable-helper" : null
            });
            if (this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)) {
                this.element.wrap($("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({
                    position: this.element.css("position"),
                    width: this.element.outerWidth(),
                    height: this.element.outerHeight(),
                    top: this.element.css("top"),
                    left: this.element.css("left")
                }));
                this.element = this.element.parent().data("ui-resizable", this.element.data("ui-resizable"));
                this.elementIsWrapper = true;
                this.element.css({
                    marginLeft: this.originalElement.css("marginLeft"),
                    marginTop: this.originalElement.css("marginTop"),
                    marginRight: this.originalElement.css("marginRight"),
                    marginBottom: this.originalElement.css("marginBottom")
                });
                this.originalElement.css({
                    marginLeft: 0,
                    marginTop: 0,
                    marginRight: 0,
                    marginBottom: 0
                });
                this.originalResizeStyle = this.originalElement.css("resize");
                this.originalElement.css("resize", "none");
                this._proportionallyResizeElements.push(this.originalElement.css({
                    position: "static",
                    zoom: 1,
                    display: "block"
                }));
                this.originalElement.css({
                    margin: this.originalElement.css("margin")
                });
                this._proportionallyResize();
            }
            this.handles = o.handles || (!$(".ui-resizable-handle", this.element).length ? "e,s,se" : {
                n: ".ui-resizable-n",
                e: ".ui-resizable-e",
                s: ".ui-resizable-s",
                w: ".ui-resizable-w",
                se: ".ui-resizable-se",
                sw: ".ui-resizable-sw",
                ne: ".ui-resizable-ne",
                nw: ".ui-resizable-nw"
            });
            if (this.handles.constructor === String) {
                if ("all" === this.handles) this.handles = "n,e,s,w,se,sw,ne,nw";
                n = this.handles.split(",");
                this.handles = {};
                for (i = 0; i < n.length; i++) {
                    handle = $.trim(n[i]);
                    hname = "ui-resizable-" + handle;
                    axis = $("<div class='ui-resizable-handle " + hname + "'></div>");
                    axis.css({
                        zIndex: o.zIndex
                    });
                    if ("se" === handle) axis.addClass("ui-icon ui-icon-gripsmall-diagonal-se");
                    this.handles[handle] = ".ui-resizable-" + handle;
                    this.element.append(axis);
                }
            }
            this._renderAxis = function(target) {
                var i, axis, padPos, padWrapper;
                target = target || this.element;
                for (i in this.handles) {
                    if (this.handles[i].constructor === String) this.handles[i] = $(this.handles[i], this.element).show();
                    if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/textarea|input|select|button/i)) {
                        axis = $(this.handles[i], this.element);
                        padWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth();
                        padPos = [ "padding", /ne|nw|n/.test(i) ? "Top" : /se|sw|s/.test(i) ? "Bottom" : /^e$/.test(i) ? "Right" : "Left" ].join("");
                        target.css(padPos, padWrapper);
                        this._proportionallyResize();
                    }
                    if (!$(this.handles[i]).length) continue;
                }
            };
            this._renderAxis(this.element);
            this._handles = $(".ui-resizable-handle", this.element).disableSelection();
            this._handles.mouseover(function() {
                if (!that.resizing) {
                    if (this.className) axis = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);
                    that.axis = axis && axis[1] ? axis[1] : "se";
                }
            });
            if (o.autoHide) {
                this._handles.hide();
                $(this.element).addClass("ui-resizable-autohide").mouseenter(function() {
                    if (o.disabled) return;
                    $(this).removeClass("ui-resizable-autohide");
                    that._handles.show();
                }).mouseleave(function() {
                    if (o.disabled) return;
                    if (!that.resizing) {
                        $(this).addClass("ui-resizable-autohide");
                        that._handles.hide();
                    }
                });
            }
            this._mouseInit();
        },
        _destroy: function() {
            this._mouseDestroy();
            var wrapper, _destroy = function(exp) {
                $(exp).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing").removeData("resizable").removeData("ui-resizable").unbind(".resizable").find(".ui-resizable-handle").remove();
            };
            if (this.elementIsWrapper) {
                _destroy(this.element);
                wrapper = this.element;
                this.originalElement.css({
                    position: wrapper.css("position"),
                    width: wrapper.outerWidth(),
                    height: wrapper.outerHeight(),
                    top: wrapper.css("top"),
                    left: wrapper.css("left")
                }).insertAfter(wrapper);
                wrapper.remove();
            }
            this.originalElement.css("resize", this.originalResizeStyle);
            _destroy(this.originalElement);
            return this;
        },
        _mouseCapture: function(event) {
            var i, handle, capture = false;
            for (i in this.handles) {
                handle = $(this.handles[i])[0];
                if (handle === event.target || $.contains(handle, event.target)) capture = true;
            }
            return !this.options.disabled && capture;
        },
        _mouseStart: function(event) {
            var curleft, curtop, cursor, o = this.options, iniPos = this.element.position(), el = this.element;
            this.resizing = true;
            if (/absolute/.test(el.css("position"))) el.css({
                position: "absolute",
                top: el.css("top"),
                left: el.css("left")
            }); else if (el.is(".ui-draggable")) el.css({
                position: "absolute",
                top: iniPos.top,
                left: iniPos.left
            });
            this._renderProxy();
            curleft = num(this.helper.css("left"));
            curtop = num(this.helper.css("top"));
            if (o.containment) {
                curleft += $(o.containment).scrollLeft() || 0;
                curtop += $(o.containment).scrollTop() || 0;
            }
            this.offset = this.helper.offset();
            this.position = {
                left: curleft,
                top: curtop
            };
            this.size = this._helper ? {
                width: el.outerWidth(),
                height: el.outerHeight()
            } : {
                width: el.width(),
                height: el.height()
            };
            this.originalSize = this._helper ? {
                width: el.outerWidth(),
                height: el.outerHeight()
            } : {
                width: el.width(),
                height: el.height()
            };
            this.originalPosition = {
                left: curleft,
                top: curtop
            };
            this.sizeDiff = {
                width: el.outerWidth() - el.width(),
                height: el.outerHeight() - el.height()
            };
            this.originalMousePosition = {
                left: event.pageX,
                top: event.pageY
            };
            this.aspectRatio = "number" === typeof o.aspectRatio ? o.aspectRatio : this.originalSize.width / this.originalSize.height || 1;
            cursor = $(".ui-resizable-" + this.axis).css("cursor");
            $("body").css("cursor", "auto" === cursor ? this.axis + "-resize" : cursor);
            el.addClass("ui-resizable-resizing");
            this._propagate("start", event);
            return true;
        },
        _mouseDrag: function(event) {
            var data, el = this.helper, props = {}, smp = this.originalMousePosition, a = this.axis, prevTop = this.position.top, prevLeft = this.position.left, prevWidth = this.size.width, prevHeight = this.size.height, dx = event.pageX - smp.left || 0, dy = event.pageY - smp.top || 0, trigger = this._change[a];
            if (!trigger) return false;
            data = trigger.apply(this, [ event, dx, dy ]);
            this._updateVirtualBoundaries(event.shiftKey);
            if (this._aspectRatio || event.shiftKey) data = this._updateRatio(data, event);
            data = this._respectSize(data, event);
            this._updateCache(data);
            this._propagate("resize", event);
            if (this.position.top !== prevTop) props.top = this.position.top + "px";
            if (this.position.left !== prevLeft) props.left = this.position.left + "px";
            if (this.size.width !== prevWidth) props.width = this.size.width + "px";
            if (this.size.height !== prevHeight) props.height = this.size.height + "px";
            el.css(props);
            if (!this._helper && this._proportionallyResizeElements.length) this._proportionallyResize();
            if (!$.isEmptyObject(props)) this._trigger("resize", event, this.ui());
            return false;
        },
        _mouseStop: function(event) {
            this.resizing = false;
            var pr, ista, soffseth, soffsetw, s, left, top, o = this.options, that = this;
            if (this._helper) {
                pr = this._proportionallyResizeElements;
                ista = pr.length && /textarea/i.test(pr[0].nodeName);
                soffseth = ista && $.ui.hasScroll(pr[0], "left") ? 0 : that.sizeDiff.height;
                soffsetw = ista ? 0 : that.sizeDiff.width;
                s = {
                    width: that.helper.width() - soffsetw,
                    height: that.helper.height() - soffseth
                };
                left = parseInt(that.element.css("left"), 10) + (that.position.left - that.originalPosition.left) || null;
                top = parseInt(that.element.css("top"), 10) + (that.position.top - that.originalPosition.top) || null;
                if (!o.animate) this.element.css($.extend(s, {
                    top: top,
                    left: left
                }));
                that.helper.height(that.size.height);
                that.helper.width(that.size.width);
                if (this._helper && !o.animate) this._proportionallyResize();
            }
            $("body").css("cursor", "auto");
            this.element.removeClass("ui-resizable-resizing");
            this._propagate("stop", event);
            if (this._helper) this.helper.remove();
            return false;
        },
        _updateVirtualBoundaries: function(forceAspectRatio) {
            var pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b, o = this.options;
            b = {
                minWidth: isNumber(o.minWidth) ? o.minWidth : 0,
                maxWidth: isNumber(o.maxWidth) ? o.maxWidth : 1/0,
                minHeight: isNumber(o.minHeight) ? o.minHeight : 0,
                maxHeight: isNumber(o.maxHeight) ? o.maxHeight : 1/0
            };
            if (this._aspectRatio || forceAspectRatio) {
                pMinWidth = b.minHeight * this.aspectRatio;
                pMinHeight = b.minWidth / this.aspectRatio;
                pMaxWidth = b.maxHeight * this.aspectRatio;
                pMaxHeight = b.maxWidth / this.aspectRatio;
                if (pMinWidth > b.minWidth) b.minWidth = pMinWidth;
                if (pMinHeight > b.minHeight) b.minHeight = pMinHeight;
                if (pMaxWidth < b.maxWidth) b.maxWidth = pMaxWidth;
                if (pMaxHeight < b.maxHeight) b.maxHeight = pMaxHeight;
            }
            this._vBoundaries = b;
        },
        _updateCache: function(data) {
            this.offset = this.helper.offset();
            if (isNumber(data.left)) this.position.left = data.left;
            if (isNumber(data.top)) this.position.top = data.top;
            if (isNumber(data.height)) this.size.height = data.height;
            if (isNumber(data.width)) this.size.width = data.width;
        },
        _updateRatio: function(data) {
            var cpos = this.position, csize = this.size, a = this.axis;
            if (isNumber(data.height)) data.width = data.height * this.aspectRatio; else if (isNumber(data.width)) data.height = data.width / this.aspectRatio;
            if ("sw" === a) {
                data.left = cpos.left + (csize.width - data.width);
                data.top = null;
            }
            if ("nw" === a) {
                data.top = cpos.top + (csize.height - data.height);
                data.left = cpos.left + (csize.width - data.width);
            }
            return data;
        },
        _respectSize: function(data) {
            var o = this._vBoundaries, a = this.axis, ismaxw = isNumber(data.width) && o.maxWidth && o.maxWidth < data.width, ismaxh = isNumber(data.height) && o.maxHeight && o.maxHeight < data.height, isminw = isNumber(data.width) && o.minWidth && o.minWidth > data.width, isminh = isNumber(data.height) && o.minHeight && o.minHeight > data.height, dw = this.originalPosition.left + this.originalSize.width, dh = this.position.top + this.size.height, cw = /sw|nw|w/.test(a), ch = /nw|ne|n/.test(a);
            if (isminw) data.width = o.minWidth;
            if (isminh) data.height = o.minHeight;
            if (ismaxw) data.width = o.maxWidth;
            if (ismaxh) data.height = o.maxHeight;
            if (isminw && cw) data.left = dw - o.minWidth;
            if (ismaxw && cw) data.left = dw - o.maxWidth;
            if (isminh && ch) data.top = dh - o.minHeight;
            if (ismaxh && ch) data.top = dh - o.maxHeight;
            if (!data.width && !data.height && !data.left && data.top) data.top = null; else if (!data.width && !data.height && !data.top && data.left) data.left = null;
            return data;
        },
        _proportionallyResize: function() {
            if (!this._proportionallyResizeElements.length) return;
            var i, j, borders, paddings, prel, element = this.helper || this.element;
            for (i = 0; i < this._proportionallyResizeElements.length; i++) {
                prel = this._proportionallyResizeElements[i];
                if (!this.borderDif) {
                    this.borderDif = [];
                    borders = [ prel.css("borderTopWidth"), prel.css("borderRightWidth"), prel.css("borderBottomWidth"), prel.css("borderLeftWidth") ];
                    paddings = [ prel.css("paddingTop"), prel.css("paddingRight"), prel.css("paddingBottom"), prel.css("paddingLeft") ];
                    for (j = 0; j < borders.length; j++) this.borderDif[j] = (parseInt(borders[j], 10) || 0) + (parseInt(paddings[j], 10) || 0);
                }
                prel.css({
                    height: element.height() - this.borderDif[0] - this.borderDif[2] || 0,
                    width: element.width() - this.borderDif[1] - this.borderDif[3] || 0
                });
            }
        },
        _renderProxy: function() {
            var el = this.element, o = this.options;
            this.elementOffset = el.offset();
            if (this._helper) {
                this.helper = this.helper || $("<div style='overflow:hidden;'></div>");
                this.helper.addClass(this._helper).css({
                    width: this.element.outerWidth() - 1,
                    height: this.element.outerHeight() - 1,
                    position: "absolute",
                    left: this.elementOffset.left + "px",
                    top: this.elementOffset.top + "px",
                    zIndex: ++o.zIndex
                });
                this.helper.appendTo("body").disableSelection();
            } else this.helper = this.element;
        },
        _change: {
            e: function(event, dx) {
                return {
                    width: this.originalSize.width + dx
                };
            },
            w: function(event, dx) {
                var cs = this.originalSize, sp = this.originalPosition;
                return {
                    left: sp.left + dx,
                    width: cs.width - dx
                };
            },
            n: function(event, dx, dy) {
                var cs = this.originalSize, sp = this.originalPosition;
                return {
                    top: sp.top + dy,
                    height: cs.height - dy
                };
            },
            s: function(event, dx, dy) {
                return {
                    height: this.originalSize.height + dy
                };
            },
            se: function(event, dx, dy) {
                return $.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [ event, dx, dy ]));
            },
            sw: function(event, dx, dy) {
                return $.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [ event, dx, dy ]));
            },
            ne: function(event, dx, dy) {
                return $.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [ event, dx, dy ]));
            },
            nw: function(event, dx, dy) {
                return $.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [ event, dx, dy ]));
            }
        },
        _propagate: function(n, event) {
            $.ui.plugin.call(this, n, [ event, this.ui() ]);
            "resize" !== n && this._trigger(n, event, this.ui());
        },
        plugins: {},
        ui: function() {
            return {
                originalElement: this.originalElement,
                element: this.element,
                helper: this.helper,
                position: this.position,
                size: this.size,
                originalSize: this.originalSize,
                originalPosition: this.originalPosition
            };
        }
    });
    $.ui.plugin.add("resizable", "animate", {
        stop: function(event) {
            var that = $(this).data("ui-resizable"), o = that.options, pr = that._proportionallyResizeElements, ista = pr.length && /textarea/i.test(pr[0].nodeName), soffseth = ista && $.ui.hasScroll(pr[0], "left") ? 0 : that.sizeDiff.height, soffsetw = ista ? 0 : that.sizeDiff.width, style = {
                width: that.size.width - soffsetw,
                height: that.size.height - soffseth
            }, left = parseInt(that.element.css("left"), 10) + (that.position.left - that.originalPosition.left) || null, top = parseInt(that.element.css("top"), 10) + (that.position.top - that.originalPosition.top) || null;
            that.element.animate($.extend(style, top && left ? {
                top: top,
                left: left
            } : {}), {
                duration: o.animateDuration,
                easing: o.animateEasing,
                step: function() {
                    var data = {
                        width: parseInt(that.element.css("width"), 10),
                        height: parseInt(that.element.css("height"), 10),
                        top: parseInt(that.element.css("top"), 10),
                        left: parseInt(that.element.css("left"), 10)
                    };
                    if (pr && pr.length) $(pr[0]).css({
                        width: data.width,
                        height: data.height
                    });
                    that._updateCache(data);
                    that._propagate("resize", event);
                }
            });
        }
    });
    $.ui.plugin.add("resizable", "containment", {
        start: function() {
            var element, p, co, ch, cw, width, height, that = $(this).data("ui-resizable"), o = that.options, el = that.element, oc = o.containment, ce = oc instanceof $ ? oc.get(0) : /parent/.test(oc) ? el.parent().get(0) : oc;
            if (!ce) return;
            that.containerElement = $(ce);
            if (/document/.test(oc) || oc === document) {
                that.containerOffset = {
                    left: 0,
                    top: 0
                };
                that.containerPosition = {
                    left: 0,
                    top: 0
                };
                that.parentData = {
                    element: $(document),
                    left: 0,
                    top: 0,
                    width: $(document).width(),
                    height: $(document).height() || document.body.parentNode.scrollHeight
                };
            } else {
                element = $(ce);
                p = [];
                $([ "Top", "Right", "Left", "Bottom" ]).each(function(i, name) {
                    p[i] = num(element.css("padding" + name));
                });
                that.containerOffset = element.offset();
                that.containerPosition = element.position();
                that.containerSize = {
                    height: element.innerHeight() - p[3],
                    width: element.innerWidth() - p[1]
                };
                co = that.containerOffset;
                ch = that.containerSize.height;
                cw = that.containerSize.width;
                width = $.ui.hasScroll(ce, "left") ? ce.scrollWidth : cw;
                height = $.ui.hasScroll(ce) ? ce.scrollHeight : ch;
                that.parentData = {
                    element: ce,
                    left: co.left,
                    top: co.top,
                    width: width,
                    height: height
                };
            }
        },
        resize: function(event) {
            var woset, hoset, isParent, isOffsetRelative, that = $(this).data("ui-resizable"), o = that.options, co = that.containerOffset, cp = that.position, pRatio = that._aspectRatio || event.shiftKey, cop = {
                top: 0,
                left: 0
            }, ce = that.containerElement;
            if (ce[0] !== document && /static/.test(ce.css("position"))) cop = co;
            if (cp.left < (that._helper ? co.left : 0)) {
                that.size.width = that.size.width + (that._helper ? that.position.left - co.left : that.position.left - cop.left);
                if (pRatio) that.size.height = that.size.width / that.aspectRatio;
                that.position.left = o.helper ? co.left : 0;
            }
            if (cp.top < (that._helper ? co.top : 0)) {
                that.size.height = that.size.height + (that._helper ? that.position.top - co.top : that.position.top);
                if (pRatio) that.size.width = that.size.height * that.aspectRatio;
                that.position.top = that._helper ? co.top : 0;
            }
            that.offset.left = that.parentData.left + that.position.left;
            that.offset.top = that.parentData.top + that.position.top;
            woset = Math.abs((that._helper ? that.offset.left - cop.left : that.offset.left - cop.left) + that.sizeDiff.width);
            hoset = Math.abs((that._helper ? that.offset.top - cop.top : that.offset.top - co.top) + that.sizeDiff.height);
            isParent = that.containerElement.get(0) === that.element.parent().get(0);
            isOffsetRelative = /relative|absolute/.test(that.containerElement.css("position"));
            if (isParent && isOffsetRelative) woset -= that.parentData.left;
            if (woset + that.size.width >= that.parentData.width) {
                that.size.width = that.parentData.width - woset;
                if (pRatio) that.size.height = that.size.width / that.aspectRatio;
            }
            if (hoset + that.size.height >= that.parentData.height) {
                that.size.height = that.parentData.height - hoset;
                if (pRatio) that.size.width = that.size.height * that.aspectRatio;
            }
        },
        stop: function() {
            var that = $(this).data("ui-resizable"), o = that.options, co = that.containerOffset, cop = that.containerPosition, ce = that.containerElement, helper = $(that.helper), ho = helper.offset(), w = helper.outerWidth() - that.sizeDiff.width, h = helper.outerHeight() - that.sizeDiff.height;
            if (that._helper && !o.animate && /relative/.test(ce.css("position"))) $(this).css({
                left: ho.left - cop.left - co.left,
                width: w,
                height: h
            });
            if (that._helper && !o.animate && /static/.test(ce.css("position"))) $(this).css({
                left: ho.left - cop.left - co.left,
                width: w,
                height: h
            });
        }
    });
    $.ui.plugin.add("resizable", "alsoResize", {
        start: function() {
            var that = $(this).data("ui-resizable"), o = that.options, _store = function(exp) {
                $(exp).each(function() {
                    var el = $(this);
                    el.data("ui-resizable-alsoresize", {
                        width: parseInt(el.width(), 10),
                        height: parseInt(el.height(), 10),
                        left: parseInt(el.css("left"), 10),
                        top: parseInt(el.css("top"), 10)
                    });
                });
            };
            if ("object" === typeof o.alsoResize && !o.alsoResize.parentNode) if (o.alsoResize.length) {
                o.alsoResize = o.alsoResize[0];
                _store(o.alsoResize);
            } else $.each(o.alsoResize, function(exp) {
                _store(exp);
            }); else _store(o.alsoResize);
        },
        resize: function(event, ui) {
            var that = $(this).data("ui-resizable"), o = that.options, os = that.originalSize, op = that.originalPosition, delta = {
                height: that.size.height - os.height || 0,
                width: that.size.width - os.width || 0,
                top: that.position.top - op.top || 0,
                left: that.position.left - op.left || 0
            }, _alsoResize = function(exp, c) {
                $(exp).each(function() {
                    var el = $(this), start = $(this).data("ui-resizable-alsoresize"), style = {}, css = c && c.length ? c : el.parents(ui.originalElement[0]).length ? [ "width", "height" ] : [ "width", "height", "top", "left" ];
                    $.each(css, function(i, prop) {
                        var sum = (start[prop] || 0) + (delta[prop] || 0);
                        if (sum && sum >= 0) style[prop] = sum || null;
                    });
                    el.css(style);
                });
            };
            if ("object" === typeof o.alsoResize && !o.alsoResize.nodeType) $.each(o.alsoResize, function(exp, c) {
                _alsoResize(exp, c);
            }); else _alsoResize(o.alsoResize);
        },
        stop: function() {
            $(this).removeData("resizable-alsoresize");
        }
    });
    $.ui.plugin.add("resizable", "ghost", {
        start: function() {
            var that = $(this).data("ui-resizable"), o = that.options, cs = that.size;
            that.ghost = that.originalElement.clone();
            that.ghost.css({
                opacity: .25,
                display: "block",
                position: "relative",
                height: cs.height,
                width: cs.width,
                margin: 0,
                left: 0,
                top: 0
            }).addClass("ui-resizable-ghost").addClass("string" === typeof o.ghost ? o.ghost : "");
            that.ghost.appendTo(that.helper);
        },
        resize: function() {
            var that = $(this).data("ui-resizable");
            if (that.ghost) that.ghost.css({
                position: "relative",
                height: that.size.height,
                width: that.size.width
            });
        },
        stop: function() {
            var that = $(this).data("ui-resizable");
            if (that.ghost && that.helper) that.helper.get(0).removeChild(that.ghost.get(0));
        }
    });
    $.ui.plugin.add("resizable", "grid", {
        resize: function() {
            var that = $(this).data("ui-resizable"), o = that.options, cs = that.size, os = that.originalSize, op = that.originalPosition, a = that.axis, grid = "number" === typeof o.grid ? [ o.grid, o.grid ] : o.grid, gridX = grid[0] || 1, gridY = grid[1] || 1, ox = Math.round((cs.width - os.width) / gridX) * gridX, oy = Math.round((cs.height - os.height) / gridY) * gridY, newWidth = os.width + ox, newHeight = os.height + oy, isMaxWidth = o.maxWidth && o.maxWidth < newWidth, isMaxHeight = o.maxHeight && o.maxHeight < newHeight, isMinWidth = o.minWidth && o.minWidth > newWidth, isMinHeight = o.minHeight && o.minHeight > newHeight;
            o.grid = grid;
            if (isMinWidth) newWidth += gridX;
            if (isMinHeight) newHeight += gridY;
            if (isMaxWidth) newWidth -= gridX;
            if (isMaxHeight) newHeight -= gridY;
            if (/^(se|s|e)$/.test(a)) {
                that.size.width = newWidth;
                that.size.height = newHeight;
            } else if (/^(ne)$/.test(a)) {
                that.size.width = newWidth;
                that.size.height = newHeight;
                that.position.top = op.top - oy;
            } else if (/^(sw)$/.test(a)) {
                that.size.width = newWidth;
                that.size.height = newHeight;
                that.position.left = op.left - ox;
            } else {
                that.size.width = newWidth;
                that.size.height = newHeight;
                that.position.top = op.top - oy;
                that.position.left = op.left - ox;
            }
        }
    });
})(jQuery);

(function($, undefined) {
    var tabId = 0, rhash = /#.*$/;
    function getNextTabId() {
        return ++tabId;
    }
    function isLocal(anchor) {
        return anchor.hash.length > 1 && decodeURIComponent(anchor.href.replace(rhash, "")) === decodeURIComponent(location.href.replace(rhash, ""));
    }
    $.widget("ui.tabs", {
        version: "@VERSION",
        delay: 300,
        options: {
            active: null,
            collapsible: false,
            event: "click",
            heightStyle: "content",
            hide: null,
            show: null,
            activate: null,
            beforeActivate: null,
            beforeLoad: null,
            load: null
        },
        _create: function() {
            var that = this, options = this.options;
            this.running = false;
            this.element.addClass("ui-tabs ui-widget ui-widget-content ui-corner-all").toggleClass("ui-tabs-collapsible", options.collapsible).delegate(".ui-tabs-nav > li", "mousedown" + this.eventNamespace, function(event) {
                if ($(this).is(".ui-state-disabled")) event.preventDefault();
            }).delegate(".ui-tabs-anchor", "focus" + this.eventNamespace, function() {
                if ($(this).closest("li").is(".ui-state-disabled")) this.blur();
            });
            this._processTabs();
            options.active = this._initialActive();
            if ($.isArray(options.disabled)) options.disabled = $.unique(options.disabled.concat($.map(this.tabs.filter(".ui-state-disabled"), function(li) {
                return that.tabs.index(li);
            }))).sort();
            if (false !== this.options.active && this.anchors.length) this.active = this._findActive(options.active); else this.active = $();
            this._refresh();
            if (this.active.length) this.load(options.active);
        },
        _initialActive: function() {
            var active = this.options.active, collapsible = this.options.collapsible, locationHash = location.hash.substring(1);
            if (null === active) {
                if (locationHash) this.tabs.each(function(i, tab) {
                    if ($(tab).attr("aria-controls") === locationHash) {
                        active = i;
                        return false;
                    }
                });
                if (null === active) active = this.tabs.index(this.tabs.filter(".ui-tabs-active"));
                if (null === active || active === -1) active = this.tabs.length ? 0 : false;
            }
            if (false !== active) {
                active = this.tabs.index(this.tabs.eq(active));
                if (active === -1) active = collapsible ? false : 0;
            }
            if (!collapsible && false === active && this.anchors.length) active = 0;
            return active;
        },
        _getCreateEventData: function() {
            return {
                tab: this.active,
                panel: !this.active.length ? $() : this._getPanelForTab(this.active)
            };
        },
        _tabKeydown: function(event) {
            var focusedTab = $(this.document[0].activeElement).closest("li"), selectedIndex = this.tabs.index(focusedTab), goingForward = true;
            if (this._handlePageNav(event)) return;
            switch (event.keyCode) {
              case $.ui.keyCode.RIGHT:
              case $.ui.keyCode.DOWN:
                selectedIndex++;
                break;

              case $.ui.keyCode.UP:
              case $.ui.keyCode.LEFT:
                goingForward = false;
                selectedIndex--;
                break;

              case $.ui.keyCode.END:
                selectedIndex = this.anchors.length - 1;
                break;

              case $.ui.keyCode.HOME:
                selectedIndex = 0;
                break;

              case $.ui.keyCode.SPACE:
                event.preventDefault();
                clearTimeout(this.activating);
                this._activate(selectedIndex);
                return;

              case $.ui.keyCode.ENTER:
                event.preventDefault();
                clearTimeout(this.activating);
                this._activate(selectedIndex === this.options.active ? false : selectedIndex);
                return;

              default:
                return;
            }
            event.preventDefault();
            clearTimeout(this.activating);
            selectedIndex = this._focusNextTab(selectedIndex, goingForward);
            if (!event.ctrlKey) {
                focusedTab.attr("aria-selected", "false");
                this.tabs.eq(selectedIndex).attr("aria-selected", "true");
                this.activating = this._delay(function() {
                    this.option("active", selectedIndex);
                }, this.delay);
            }
        },
        _panelKeydown: function(event) {
            if (this._handlePageNav(event)) return;
            if (event.ctrlKey && event.keyCode === $.ui.keyCode.UP) {
                event.preventDefault();
                this.active.focus();
            }
        },
        _handlePageNav: function(event) {
            if (event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP) {
                this._activate(this._focusNextTab(this.options.active - 1, false));
                return true;
            }
            if (event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN) {
                this._activate(this._focusNextTab(this.options.active + 1, true));
                return true;
            }
        },
        _findNextTab: function(index, goingForward) {
            var lastTabIndex = this.tabs.length - 1;
            function constrain() {
                if (index > lastTabIndex) index = 0;
                if (index < 0) index = lastTabIndex;
                return index;
            }
            while ($.inArray(constrain(), this.options.disabled) !== -1) index = goingForward ? index + 1 : index - 1;
            return index;
        },
        _focusNextTab: function(index, goingForward) {
            index = this._findNextTab(index, goingForward);
            this.tabs.eq(index).focus();
            return index;
        },
        _setOption: function(key, value) {
            if ("active" === key) {
                this._activate(value);
                return;
            }
            if ("disabled" === key) {
                this._setupDisabled(value);
                return;
            }
            this._super(key, value);
            if ("collapsible" === key) {
                this.element.toggleClass("ui-tabs-collapsible", value);
                if (!value && false === this.options.active) this._activate(0);
            }
            if ("event" === key) this._setupEvents(value);
            if ("heightStyle" === key) this._setupHeightStyle(value);
        },
        _tabId: function(tab) {
            return tab.attr("aria-controls") || "ui-tabs-" + getNextTabId();
        },
        _sanitizeSelector: function(hash) {
            return hash ? hash.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&") : "";
        },
        refresh: function() {
            var options = this.options, lis = this.tablist.children(":has(a[href])");
            options.disabled = $.map(lis.filter(".ui-state-disabled"), function(tab) {
                return lis.index(tab);
            });
            this._processTabs();
            if (false === options.active || !this.anchors.length) {
                options.active = false;
                this.active = $();
            } else if (this.active.length && !$.contains(this.tablist[0], this.active[0])) if (this.tabs.length === options.disabled.length) {
                options.active = false;
                this.active = $();
            } else this._activate(this._findNextTab(Math.max(0, options.active - 1), false)); else options.active = this.tabs.index(this.active);
            this._refresh();
        },
        _refresh: function() {
            this._setupDisabled(this.options.disabled);
            this._setupEvents(this.options.event);
            this._setupHeightStyle(this.options.heightStyle);
            this.tabs.not(this.active).attr({
                "aria-selected": "false",
                tabIndex: -1
            });
            this.panels.not(this._getPanelForTab(this.active)).hide().attr({
                "aria-expanded": "false",
                "aria-hidden": "true"
            });
            if (!this.active.length) this.tabs.eq(0).attr("tabIndex", 0); else {
                this.active.addClass("ui-tabs-active ui-state-active").attr({
                    "aria-selected": "true",
                    tabIndex: 0
                });
                this._getPanelForTab(this.active).show().attr({
                    "aria-expanded": "true",
                    "aria-hidden": "false"
                });
            }
        },
        _processTabs: function() {
            var that = this;
            this.tablist = this._getList().addClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").attr("role", "tablist");
            this.tabs = this.tablist.find("> li:has(a[href])").addClass("ui-state-default ui-corner-top").attr({
                role: "tab",
                tabIndex: -1
            });
            this.anchors = this.tabs.map(function() {
                return $("a", this)[0];
            }).addClass("ui-tabs-anchor").attr({
                role: "presentation",
                tabIndex: -1
            });
            this.panels = $();
            this.anchors.each(function(i, anchor) {
                var selector, panel, panelId, anchorId = $(anchor).uniqueId().attr("id"), tab = $(anchor).closest("li"), originalAriaControls = tab.attr("aria-controls");
                if (isLocal(anchor)) {
                    selector = anchor.hash;
                    panel = that.element.find(that._sanitizeSelector(selector));
                } else {
                    panelId = that._tabId(tab);
                    selector = "#" + panelId;
                    panel = that.element.find(selector);
                    if (!panel.length) {
                        panel = that._createPanel(panelId);
                        panel.insertAfter(that.panels[i - 1] || that.tablist);
                    }
                    panel.attr("aria-live", "polite");
                }
                if (panel.length) that.panels = that.panels.add(panel);
                if (originalAriaControls) tab.data("ui-tabs-aria-controls", originalAriaControls);
                tab.attr({
                    "aria-controls": selector.substring(1),
                    "aria-labelledby": anchorId
                });
                panel.attr("aria-labelledby", anchorId);
            });
            this.panels.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").attr("role", "tabpanel");
        },
        _getList: function() {
            return this.element.find("ol,ul").eq(0);
        },
        _createPanel: function(id) {
            return $("<div>").attr("id", id).addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").data("ui-tabs-destroy", true);
        },
        _setupDisabled: function(disabled) {
            if ($.isArray(disabled)) if (!disabled.length) disabled = false; else if (disabled.length === this.anchors.length) disabled = true;
            for (var i = 0, li; li = this.tabs[i]; i++) if (true === disabled || $.inArray(i, disabled) !== -1) $(li).addClass("ui-state-disabled").attr("aria-disabled", "true"); else $(li).removeClass("ui-state-disabled").removeAttr("aria-disabled");
            this.options.disabled = disabled;
        },
        _setupEvents: function(event) {
            var events = {
                click: function(event) {
                    event.preventDefault();
                }
            };
            if (event) $.each(event.split(" "), function(index, eventName) {
                events[eventName] = "_eventHandler";
            });
            this._off(this.anchors.add(this.tabs).add(this.panels));
            this._on(this.anchors, events);
            this._on(this.tabs, {
                keydown: "_tabKeydown"
            });
            this._on(this.panels, {
                keydown: "_panelKeydown"
            });
            this._focusable(this.tabs);
            this._hoverable(this.tabs);
        },
        _setupHeightStyle: function(heightStyle) {
            var maxHeight, parent = this.element.parent();
            if ("fill" === heightStyle) {
                maxHeight = parent.height();
                maxHeight -= this.element.outerHeight() - this.element.height();
                this.element.siblings(":visible").each(function() {
                    var elem = $(this), position = elem.css("position");
                    if ("absolute" === position || "fixed" === position) return;
                    maxHeight -= elem.outerHeight(true);
                });
                this.element.children().not(this.panels).each(function() {
                    maxHeight -= $(this).outerHeight(true);
                });
                this.panels.each(function() {
                    $(this).height(Math.max(0, maxHeight - $(this).innerHeight() + $(this).height()));
                }).css("overflow", "auto");
            } else if ("auto" === heightStyle) {
                maxHeight = 0;
                this.panels.each(function() {
                    maxHeight = Math.max(maxHeight, $(this).height("").height());
                }).height(maxHeight);
            }
        },
        _eventHandler: function(event) {
            var options = this.options, active = this.active, anchor = $(event.currentTarget), tab = anchor.closest("li"), clickedIsActive = tab[0] === active[0], collapsing = clickedIsActive && options.collapsible, toShow = collapsing ? $() : this._getPanelForTab(tab), toHide = !active.length ? $() : this._getPanelForTab(active), eventData = {
                oldTab: active,
                oldPanel: toHide,
                newTab: collapsing ? $() : tab,
                newPanel: toShow
            };
            event.preventDefault();
            if (tab.hasClass("ui-state-disabled") || tab.hasClass("ui-tabs-loading") || this.running || clickedIsActive && !options.collapsible || false === this._trigger("beforeActivate", event, eventData)) return;
            options.active = collapsing ? false : this.tabs.index(tab);
            this.active = clickedIsActive ? $() : tab;
            if (this.xhr) this.xhr.abort();
            if (!toHide.length && !toShow.length) $.error("jQuery UI Tabs: Mismatching fragment identifier.");
            if (toShow.length) this.load(this.tabs.index(tab), event);
            this._toggle(event, eventData);
        },
        _toggle: function(event, eventData) {
            var that = this, toShow = eventData.newPanel, toHide = eventData.oldPanel;
            this.running = true;
            function complete() {
                that.running = false;
                that._trigger("activate", event, eventData);
            }
            function show() {
                eventData.newTab.closest("li").addClass("ui-tabs-active ui-state-active");
                if (toShow.length && that.options.show) that._show(toShow, that.options.show, complete); else {
                    toShow.show();
                    complete();
                }
            }
            if (toHide.length && this.options.hide) this._hide(toHide, this.options.hide, function() {
                eventData.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active");
                show();
            }); else {
                eventData.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active");
                toHide.hide();
                show();
            }
            toHide.attr({
                "aria-expanded": "false",
                "aria-hidden": "true"
            });
            eventData.oldTab.attr("aria-selected", "false");
            if (toShow.length && toHide.length) eventData.oldTab.attr("tabIndex", -1); else if (toShow.length) this.tabs.filter(function() {
                return 0 === $(this).attr("tabIndex");
            }).attr("tabIndex", -1);
            toShow.attr({
                "aria-expanded": "true",
                "aria-hidden": "false"
            });
            eventData.newTab.attr({
                "aria-selected": "true",
                tabIndex: 0
            });
        },
        _activate: function(index) {
            var anchor, active = this._findActive(index);
            if (active[0] === this.active[0]) return;
            if (!active.length) active = this.active;
            anchor = active.find(".ui-tabs-anchor")[0];
            this._eventHandler({
                target: anchor,
                currentTarget: anchor,
                preventDefault: $.noop
            });
        },
        _findActive: function(index) {
            return false === index ? $() : this.tabs.eq(index);
        },
        _getIndex: function(index) {
            if ("string" === typeof index) index = this.anchors.index(this.anchors.filter("[href$='" + index + "']"));
            return index;
        },
        _destroy: function() {
            if (this.xhr) this.xhr.abort();
            this.element.removeClass("ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible");
            this.tablist.removeClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").removeAttr("role");
            this.anchors.removeClass("ui-tabs-anchor").removeAttr("role").removeAttr("tabIndex").removeUniqueId();
            this.tabs.add(this.panels).each(function() {
                if ($.data(this, "ui-tabs-destroy")) $(this).remove(); else $(this).removeClass("ui-state-default ui-state-active ui-state-disabled " + "ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel").removeAttr("tabIndex").removeAttr("aria-live").removeAttr("aria-busy").removeAttr("aria-selected").removeAttr("aria-labelledby").removeAttr("aria-hidden").removeAttr("aria-expanded").removeAttr("role");
            });
            this.tabs.each(function() {
                var li = $(this), prev = li.data("ui-tabs-aria-controls");
                if (prev) li.attr("aria-controls", prev).removeData("ui-tabs-aria-controls"); else li.removeAttr("aria-controls");
            });
            this.panels.show();
            if ("content" !== this.options.heightStyle) this.panels.css("height", "");
        },
        enable: function(index) {
            var disabled = this.options.disabled;
            if (false === disabled) return;
            if (index === undefined) disabled = false; else {
                index = this._getIndex(index);
                if ($.isArray(disabled)) disabled = $.map(disabled, function(num) {
                    return num !== index ? num : null;
                }); else disabled = $.map(this.tabs, function(li, num) {
                    return num !== index ? num : null;
                });
            }
            this._setupDisabled(disabled);
        },
        disable: function(index) {
            var disabled = this.options.disabled;
            if (true === disabled) return;
            if (index === undefined) disabled = true; else {
                index = this._getIndex(index);
                if ($.inArray(index, disabled) !== -1) return;
                if ($.isArray(disabled)) disabled = $.merge([ index ], disabled).sort(); else disabled = [ index ];
            }
            this._setupDisabled(disabled);
        },
        load: function(index, event) {
            index = this._getIndex(index);
            var that = this, tab = this.tabs.eq(index), anchor = tab.find(".ui-tabs-anchor"), panel = this._getPanelForTab(tab), eventData = {
                tab: tab,
                panel: panel
            };
            if (isLocal(anchor[0])) return;
            this.xhr = $.ajax(this._ajaxSettings(anchor, event, eventData));
            if (this.xhr && "canceled" !== this.xhr.statusText) {
                tab.addClass("ui-tabs-loading");
                panel.attr("aria-busy", "true");
                this.xhr.success(function(response) {
                    setTimeout(function() {
                        panel.html(response);
                        that._trigger("load", event, eventData);
                    }, 1);
                }).complete(function(jqXHR, status) {
                    setTimeout(function() {
                        if ("abort" === status) that.panels.stop(false, true);
                        tab.removeClass("ui-tabs-loading");
                        panel.removeAttr("aria-busy");
                        if (jqXHR === that.xhr) delete that.xhr;
                    }, 1);
                });
            }
        },
        _ajaxSettings: function(anchor, event, eventData) {
            var that = this;
            return {
                url: anchor.attr("href"),
                beforeSend: function(jqXHR, settings) {
                    return that._trigger("beforeLoad", event, $.extend({
                        jqXHR: jqXHR,
                        ajaxSettings: settings
                    }, eventData));
                }
            };
        },
        _getPanelForTab: function(tab) {
            var id = $(tab).attr("aria-controls");
            return this.element.find(this._sanitizeSelector("#" + id));
        }
    });
})(jQuery);

jQuery.ajaxq = function(queue, options) {
    if ("undefined" == typeof document.ajaxq) document.ajaxq = {
        q: {},
        r: null,
        rq: null
    };
    if ("undefined" == typeof document.ajaxq.q[queue]) document.ajaxq.q[queue] = [];
    if ("undefined" != typeof options) {
        var optionsCopy = {};
        for (var o in options) optionsCopy[o] = options[o];
        options = optionsCopy;
        var originalCompleteCallback = options.complete;
        options.complete = function(request, status) {
            document.ajaxq.q[queue].shift();
            document.ajaxq.r = null;
            document.ajaxq.rq = null;
            if (originalCompleteCallback) originalCompleteCallback(request, status);
            if (document.ajaxq.q[queue].length > 0) {
                document.ajaxq.rq = queue;
                document.ajaxq.r = jQuery.ajax(document.ajaxq.q[queue][0]);
            }
        };
        document.ajaxq.q[queue].push(options);
        if (1 == document.ajaxq.q[queue].length) {
            document.ajaxq.rq = queue;
            document.ajaxq.r = jQuery.ajax(options);
        }
    } else {
        if (document.ajaxq.rq == queue) {
            document.ajaxq.r.abort();
            document.ajaxq.r = null;
            document.ajaxq.rq = null;
        }
        document.ajaxq.q[queue] = [];
    }
};

(function($, undefined) {
    function isOverAxis(x, reference, size) {
        return x > reference && x < reference + size;
    }
    function isFloating(item) {
        return /left|right/.test(item.css("float")) || /inline|table-cell/.test(item.css("display"));
    }
    $.widget("ui.sortable", $.ui.mouse, {
        version: "@VERSION",
        widgetEventPrefix: "sort",
        ready: false,
        options: {
            appendTo: "parent",
            axis: false,
            connectWith: false,
            containment: false,
            cursor: "auto",
            cursorAt: false,
            dropOnEmpty: true,
            forcePlaceholderSize: false,
            forceHelperSize: false,
            grid: false,
            handle: false,
            helper: "original",
            items: "> *",
            opacity: false,
            placeholder: false,
            revert: false,
            scroll: true,
            scrollSensitivity: 20,
            scrollSpeed: 20,
            scope: "default",
            tolerance: "intersect",
            zIndex: 1e3,
            activate: null,
            beforeStop: null,
            change: null,
            deactivate: null,
            out: null,
            over: null,
            receive: null,
            remove: null,
            sort: null,
            start: null,
            stop: null,
            update: null
        },
        _create: function() {
            var o = this.options;
            this.containerCache = {};
            this.element.addClass("ui-sortable");
            this.refresh();
            this.floating = this.items.length ? "x" === o.axis || isFloating(this.items[0].item) : false;
            this.offset = this.element.offset();
            this._mouseInit();
            this.ready = true;
        },
        _destroy: function() {
            this.element.removeClass("ui-sortable ui-sortable-disabled");
            this._mouseDestroy();
            for (var i = this.items.length - 1; i >= 0; i--) this.items[i].item.removeData(this.widgetName + "-item");
            return this;
        },
        _setOption: function(key, value) {
            if ("disabled" === key) {
                this.options[key] = value;
                this.widget().toggleClass("ui-sortable-disabled", !!value);
            } else $.Widget.prototype._setOption.apply(this, arguments);
        },
        _mouseCapture: function(event, overrideHandle) {
            var currentItem = null, validHandle = false, that = this;
            if (this.reverting) return false;
            if (this.options.disabled || "static" === this.options.type) return false;
            this._refreshItems(event);
            $(event.target).parents().each(function() {
                if ($.data(this, that.widgetName + "-item") === that) {
                    currentItem = $(this);
                    return false;
                }
            });
            if ($.data(event.target, that.widgetName + "-item") === that) currentItem = $(event.target);
            if (!currentItem) return false;
            if (this.options.handle && !overrideHandle) {
                $(this.options.handle, currentItem).find("*").addBack().each(function() {
                    if (this === event.target) validHandle = true;
                });
                if (!validHandle) return false;
            }
            this.currentItem = currentItem;
            this._removeCurrentsFromItems();
            return true;
        },
        _mouseStart: function(event, overrideHandle, noActivation) {
            var i, body, o = this.options;
            this.currentContainer = this;
            this.refreshPositions();
            this.helper = this._createHelper(event);
            this._cacheHelperProportions();
            this._cacheMargins();
            this.scrollParent = this.helper.scrollParent();
            this.offset = this.currentItem.offset();
            this.offset = {
                top: this.offset.top - this.margins.top,
                left: this.offset.left - this.margins.left
            };
            $.extend(this.offset, {
                click: {
                    left: event.pageX - this.offset.left,
                    top: event.pageY - this.offset.top
                },
                parent: this._getParentOffset(),
                relative: this._getRelativeOffset()
            });
            this.helper.css("position", "absolute");
            this.cssPosition = this.helper.css("position");
            this.originalPosition = this._generatePosition(event);
            this.originalPageX = event.pageX;
            this.originalPageY = event.pageY;
            o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt);
            this.domPosition = {
                prev: this.currentItem.prev()[0],
                parent: this.currentItem.parent()[0]
            };
            if (this.helper[0] !== this.currentItem[0]) this.currentItem.hide();
            this._createPlaceholder();
            if (o.containment) this._setContainment();
            if (o.cursor && "auto" !== o.cursor) {
                body = this.document.find("body");
                this.storedCursor = body.css("cursor");
                body.css("cursor", o.cursor);
                this.storedStylesheet = $("<style>*{ cursor: " + o.cursor + " !important; }</style>").appendTo(body);
            }
            if (o.opacity) {
                if (this.helper.css("opacity")) this._storedOpacity = this.helper.css("opacity");
                this.helper.css("opacity", o.opacity);
            }
            if (o.zIndex) {
                if (this.helper.css("zIndex")) this._storedZIndex = this.helper.css("zIndex");
                this.helper.css("zIndex", o.zIndex);
            }
            if (this.scrollParent[0] !== document && "HTML" !== this.scrollParent[0].tagName) this.overflowOffset = this.scrollParent.offset();
            this._trigger("start", event, this._uiHash());
            if (!this._preserveHelperProportions) this._cacheHelperProportions();
            if (!noActivation) for (i = this.containers.length - 1; i >= 0; i--) this.containers[i]._trigger("activate", event, this._uiHash(this));
            if ($.ui.ddmanager) $.ui.ddmanager.current = this;
            if ($.ui.ddmanager && !o.dropBehaviour) $.ui.ddmanager.prepareOffsets(this, event);
            this.dragging = true;
            this.helper.addClass("ui-sortable-helper");
            this._mouseDrag(event);
            return true;
        },
        _mouseDrag: function(event) {
            var i, item, itemElement, intersection, o = this.options, scrolled = false;
            this.position = this._generatePosition(event);
            this.positionAbs = this._convertPositionTo("absolute");
            if (!this.lastPositionAbs) this.lastPositionAbs = this.positionAbs;
            if (this.options.scroll) {
                if (this.scrollParent[0] !== document && "HTML" !== this.scrollParent[0].tagName) {
                    if (this.overflowOffset.top + this.scrollParent[0].offsetHeight - event.pageY < o.scrollSensitivity) this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed; else if (event.pageY - this.overflowOffset.top < o.scrollSensitivity) this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed;
                    if (this.overflowOffset.left + this.scrollParent[0].offsetWidth - event.pageX < o.scrollSensitivity) this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed; else if (event.pageX - this.overflowOffset.left < o.scrollSensitivity) this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed;
                } else {
                    if (event.pageY - $(document).scrollTop() < o.scrollSensitivity) scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed); else if ($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
                    if (event.pageX - $(document).scrollLeft() < o.scrollSensitivity) scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed); else if ($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
                }
                if (false !== scrolled && $.ui.ddmanager && !o.dropBehaviour) $.ui.ddmanager.prepareOffsets(this, event);
            }
            this.positionAbs = this._convertPositionTo("absolute");
            if (!this.options.axis || "y" !== this.options.axis) this.helper[0].style.left = this.position.left + "px";
            if (!this.options.axis || "x" !== this.options.axis) this.helper[0].style.top = this.position.top + "px";
            for (i = this.items.length - 1; i >= 0; i--) {
                item = this.items[i];
                itemElement = item.item[0];
                intersection = this._intersectsWithPointer(item);
                if (!intersection) continue;
                if (item.instance !== this.currentContainer) continue;
                if (itemElement !== this.currentItem[0] && this.placeholder[1 === intersection ? "next" : "prev"]()[0] !== itemElement && !$.contains(this.placeholder[0], itemElement) && ("semi-dynamic" === this.options.type ? !$.contains(this.element[0], itemElement) : true)) {
                    this.direction = 1 === intersection ? "down" : "up";
                    if ("pointer" === this.options.tolerance || this._intersectsWithSides(item)) this._rearrange(event, item); else break;
                    this._trigger("change", event, this._uiHash());
                    break;
                }
            }
            this._contactContainers(event);
            if ($.ui.ddmanager) $.ui.ddmanager.drag(this, event);
            this._trigger("sort", event, this._uiHash());
            this.lastPositionAbs = this.positionAbs;
            return false;
        },
        _mouseStop: function(event, noPropagation) {
            if (!event) return;
            if ($.ui.ddmanager && !this.options.dropBehaviour) $.ui.ddmanager.drop(this, event);
            if (this.options.revert) {
                var that = this, cur = this.placeholder.offset(), axis = this.options.axis, animation = {};
                if (!axis || "x" === axis) animation.left = cur.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollLeft);
                if (!axis || "y" === axis) animation.top = cur.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollTop);
                this.reverting = true;
                $(this.helper).animate(animation, parseInt(this.options.revert, 10) || 500, function() {
                    that._clear(event);
                });
            } else this._clear(event, noPropagation);
            return false;
        },
        cancel: function() {
            if (this.dragging) {
                this._mouseUp({
                    target: null
                });
                if ("original" === this.options.helper) this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper"); else this.currentItem.show();
                for (var i = this.containers.length - 1; i >= 0; i--) {
                    this.containers[i]._trigger("deactivate", null, this._uiHash(this));
                    if (this.containers[i].containerCache.over) {
                        this.containers[i]._trigger("out", null, this._uiHash(this));
                        this.containers[i].containerCache.over = 0;
                    }
                }
            }
            if (this.placeholder) {
                if (this.placeholder[0].parentNode) this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
                if ("original" !== this.options.helper && this.helper && this.helper[0].parentNode) this.helper.remove();
                $.extend(this, {
                    helper: null,
                    dragging: false,
                    reverting: false,
                    _noFinalSort: null
                });
                if (this.domPosition.prev) $(this.domPosition.prev).after(this.currentItem); else $(this.domPosition.parent).prepend(this.currentItem);
            }
            return this;
        },
        serialize: function(o) {
            var items = this._getItemsAsjQuery(o && o.connected), str = [];
            o = o || {};
            $(items).each(function() {
                var res = ($(o.item || this).attr(o.attribute || "id") || "").match(o.expression || /(.+)[\-=_](.+)/);
                if (res) str.push((o.key || res[1] + "[]") + "=" + (o.key && o.expression ? res[1] : res[2]));
            });
            if (!str.length && o.key) str.push(o.key + "=");
            return str.join("&");
        },
        toArray: function(o) {
            var items = this._getItemsAsjQuery(o && o.connected), ret = [];
            o = o || {};
            items.each(function() {
                ret.push($(o.item || this).attr(o.attribute || "id") || "");
            });
            return ret;
        },
        _intersectsWith: function(item) {
            var x1 = this.positionAbs.left, x2 = x1 + this.helperProportions.width, y1 = this.positionAbs.top, y2 = y1 + this.helperProportions.height, l = item.left, r = l + item.width, t = item.top, b = t + item.height, dyClick = this.offset.click.top, dxClick = this.offset.click.left, isOverElementHeight = "x" === this.options.axis || y1 + dyClick > t && y1 + dyClick < b, isOverElementWidth = "y" === this.options.axis || x1 + dxClick > l && x1 + dxClick < r, isOverElement = isOverElementHeight && isOverElementWidth;
            if ("pointer" === this.options.tolerance || this.options.forcePointerForContainers || "pointer" !== this.options.tolerance && this.helperProportions[this.floating ? "width" : "height"] > item[this.floating ? "width" : "height"]) return isOverElement; else return l < x1 + this.helperProportions.width / 2 && x2 - this.helperProportions.width / 2 < r && t < y1 + this.helperProportions.height / 2 && y2 - this.helperProportions.height / 2 < b;
        },
        _intersectsWithPointer: function(item) {
            var isOverElementHeight = "x" === this.options.axis || isOverAxis(this.positionAbs.top + this.offset.click.top, item.top, item.height), isOverElementWidth = "y" === this.options.axis || isOverAxis(this.positionAbs.left + this.offset.click.left, item.left, item.width), isOverElement = isOverElementHeight && isOverElementWidth, verticalDirection = this._getDragVerticalDirection(), horizontalDirection = this._getDragHorizontalDirection();
            if (!isOverElement) return false;
            return this.floating ? horizontalDirection && "right" === horizontalDirection || "down" === verticalDirection ? 2 : 1 : verticalDirection && ("down" === verticalDirection ? 2 : 1);
        },
        _intersectsWithSides: function(item) {
            var isOverBottomHalf = isOverAxis(this.positionAbs.top + this.offset.click.top, item.top + item.height / 2, item.height), isOverRightHalf = isOverAxis(this.positionAbs.left + this.offset.click.left, item.left + item.width / 2, item.width), verticalDirection = this._getDragVerticalDirection(), horizontalDirection = this._getDragHorizontalDirection();
            if (this.floating && horizontalDirection) return "right" === horizontalDirection && isOverRightHalf || "left" === horizontalDirection && !isOverRightHalf; else return verticalDirection && ("down" === verticalDirection && isOverBottomHalf || "up" === verticalDirection && !isOverBottomHalf);
        },
        _getDragVerticalDirection: function() {
            var delta = this.positionAbs.top - this.lastPositionAbs.top;
            return 0 !== delta && (delta > 0 ? "down" : "up");
        },
        _getDragHorizontalDirection: function() {
            var delta = this.positionAbs.left - this.lastPositionAbs.left;
            return 0 !== delta && (delta > 0 ? "right" : "left");
        },
        refresh: function(event) {
            this._refreshItems(event);
            this.refreshPositions();
            return this;
        },
        _connectWith: function() {
            var options = this.options;
            return options.connectWith.constructor === String ? [ options.connectWith ] : options.connectWith;
        },
        _getItemsAsjQuery: function(connected) {
            var i, j, cur, inst, items = [], queries = [], connectWith = this._connectWith();
            if (connectWith && connected) for (i = connectWith.length - 1; i >= 0; i--) {
                cur = $(connectWith[i]);
                for (j = cur.length - 1; j >= 0; j--) {
                    inst = $.data(cur[j], this.widgetFullName);
                    if (inst && inst !== this && !inst.options.disabled) queries.push([ $.isFunction(inst.options.items) ? inst.options.items.call(inst.element) : $(inst.options.items, inst.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), inst ]);
                }
            }
            queries.push([ $.isFunction(this.options.items) ? this.options.items.call(this.element, null, {
                options: this.options,
                item: this.currentItem
            }) : $(this.options.items, this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), this ]);
            for (i = queries.length - 1; i >= 0; i--) queries[i][0].each(function() {
                items.push(this);
            });
            return $(items);
        },
        _removeCurrentsFromItems: function() {
            var list = this.currentItem.find(":data(" + this.widgetName + "-item)");
            this.items = $.grep(this.items, function(item) {
                for (var j = 0; j < list.length; j++) if (list[j] === item.item[0]) return false;
                return true;
            });
        },
        _refreshItems: function(event) {
            this.items = [];
            this.containers = [ this ];
            var i, j, cur, inst, targetData, _queries, item, queriesLength, items = this.items, queries = [ [ $.isFunction(this.options.items) ? this.options.items.call(this.element[0], event, {
                item: this.currentItem
            }) : $(this.options.items, this.element), this ] ], connectWith = this._connectWith();
            if (connectWith && this.ready) for (i = connectWith.length - 1; i >= 0; i--) {
                cur = $(connectWith[i]);
                for (j = cur.length - 1; j >= 0; j--) {
                    inst = $.data(cur[j], this.widgetFullName);
                    if (inst && inst !== this && !inst.options.disabled) {
                        queries.push([ $.isFunction(inst.options.items) ? inst.options.items.call(inst.element[0], event, {
                            item: this.currentItem
                        }) : $(inst.options.items, inst.element), inst ]);
                        this.containers.push(inst);
                    }
                }
            }
            for (i = queries.length - 1; i >= 0; i--) {
                targetData = queries[i][1];
                _queries = queries[i][0];
                for (j = 0, queriesLength = _queries.length; j < queriesLength; j++) {
                    item = $(_queries[j]);
                    item.data(this.widgetName + "-item", targetData);
                    items.push({
                        item: item,
                        instance: targetData,
                        width: 0,
                        height: 0,
                        left: 0,
                        top: 0
                    });
                }
            }
        },
        refreshPositions: function(fast) {
            if (this.offsetParent && this.helper) this.offset.parent = this._getParentOffset();
            var i, item, t, p;
            for (i = this.items.length - 1; i >= 0; i--) {
                item = this.items[i];
                if (item.instance !== this.currentContainer && this.currentContainer && item.item[0] !== this.currentItem[0]) continue;
                t = this.options.toleranceElement ? $(this.options.toleranceElement, item.item) : item.item;
                if (!fast) {
                    item.width = t.outerWidth();
                    item.height = t.outerHeight();
                }
                p = t.offset();
                item.left = p.left;
                item.top = p.top;
            }
            if (this.options.custom && this.options.custom.refreshContainers) this.options.custom.refreshContainers.call(this); else for (i = this.containers.length - 1; i >= 0; i--) {
                p = this.containers[i].element.offset();
                this.containers[i].containerCache.left = p.left;
                this.containers[i].containerCache.top = p.top;
                this.containers[i].containerCache.width = this.containers[i].element.outerWidth();
                this.containers[i].containerCache.height = this.containers[i].element.outerHeight();
            }
            return this;
        },
        _createPlaceholder: function(that) {
            that = that || this;
            var className, o = that.options;
            if (!o.placeholder || o.placeholder.constructor === String) {
                className = o.placeholder;
                o.placeholder = {
                    element: function() {
                        var nodeName = that.currentItem[0].nodeName.toLowerCase(), element = $("<" + nodeName + ">", that.document[0]).addClass(className || that.currentItem[0].className + " ui-sortable-placeholder").removeClass("ui-sortable-helper");
                        if ("tr" === nodeName) that.currentItem.children().each(function() {
                            $("<td>&#160;</td>", that.document[0]).attr("colspan", $(this).attr("colspan") || 1).appendTo(element);
                        }); else if ("img" === nodeName) element.attr("src", that.currentItem.attr("src"));
                        if (!className) element.css("visibility", "hidden");
                        return element;
                    },
                    update: function(container, p) {
                        if (className && !o.forcePlaceholderSize) return;
                        if (!p.height()) p.height(that.currentItem.innerHeight() - parseInt(that.currentItem.css("paddingTop") || 0, 10) - parseInt(that.currentItem.css("paddingBottom") || 0, 10));
                        if (!p.width()) p.width(that.currentItem.innerWidth() - parseInt(that.currentItem.css("paddingLeft") || 0, 10) - parseInt(that.currentItem.css("paddingRight") || 0, 10));
                    }
                };
            }
            that.placeholder = $(o.placeholder.element.call(that.element, that.currentItem));
            that.currentItem.after(that.placeholder);
            o.placeholder.update(that, that.placeholder);
        },
        _contactContainers: function(event) {
            var i, j, dist, itemWithLeastDistance, posProperty, sizeProperty, base, cur, nearBottom, floating, innermostContainer = null, innermostIndex = null;
            for (i = this.containers.length - 1; i >= 0; i--) {
                if ($.contains(this.currentItem[0], this.containers[i].element[0])) continue;
                if (this._intersectsWith(this.containers[i].containerCache)) {
                    if (innermostContainer && $.contains(this.containers[i].element[0], innermostContainer.element[0])) continue;
                    innermostContainer = this.containers[i];
                    innermostIndex = i;
                } else if (this.containers[i].containerCache.over) {
                    this.containers[i]._trigger("out", event, this._uiHash(this));
                    this.containers[i].containerCache.over = 0;
                }
            }
            if (!innermostContainer) return;
            if (1 === this.containers.length) {
                if (!this.containers[innermostIndex].containerCache.over) {
                    this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
                    this.containers[innermostIndex].containerCache.over = 1;
                }
            } else {
                dist = 1e4;
                itemWithLeastDistance = null;
                floating = innermostContainer.floating || isFloating(this.currentItem);
                posProperty = floating ? "left" : "top";
                sizeProperty = floating ? "width" : "height";
                base = this.positionAbs[posProperty] + this.offset.click[posProperty];
                for (j = this.items.length - 1; j >= 0; j--) {
                    if (!$.contains(this.containers[innermostIndex].element[0], this.items[j].item[0])) continue;
                    if (this.items[j].item[0] === this.currentItem[0]) continue;
                    if (floating && !isOverAxis(this.positionAbs.top + this.offset.click.top, this.items[j].top, this.items[j].height)) continue;
                    cur = this.items[j].item.offset()[posProperty];
                    nearBottom = false;
                    if (Math.abs(cur - base) > Math.abs(cur + this.items[j][sizeProperty] - base)) {
                        nearBottom = true;
                        cur += this.items[j][sizeProperty];
                    }
                    if (Math.abs(cur - base) < dist) {
                        dist = Math.abs(cur - base);
                        itemWithLeastDistance = this.items[j];
                        this.direction = nearBottom ? "up" : "down";
                    }
                }
                if (!itemWithLeastDistance && !this.options.dropOnEmpty) return;
                if (this.currentContainer === this.containers[innermostIndex]) return;
                itemWithLeastDistance ? this._rearrange(event, itemWithLeastDistance, null, true) : this._rearrange(event, null, this.containers[innermostIndex].element, true);
                this._trigger("change", event, this._uiHash());
                this.containers[innermostIndex]._trigger("change", event, this._uiHash(this));
                this.currentContainer = this.containers[innermostIndex];
                this.options.placeholder.update(this.currentContainer, this.placeholder);
                this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
                this.containers[innermostIndex].containerCache.over = 1;
            }
        },
        _createHelper: function(event) {
            var o = this.options, helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [ event, this.currentItem ])) : "clone" === o.helper ? this.currentItem.clone() : this.currentItem;
            if (!helper.parents("body").length) $("parent" !== o.appendTo ? o.appendTo : this.currentItem[0].parentNode)[0].appendChild(helper[0]);
            if (helper[0] === this.currentItem[0]) this._storedCSS = {
                width: this.currentItem[0].style.width,
                height: this.currentItem[0].style.height,
                position: this.currentItem.css("position"),
                top: this.currentItem.css("top"),
                left: this.currentItem.css("left")
            };
            if (!helper[0].style.width || o.forceHelperSize) helper.width(this.currentItem.width());
            if (!helper[0].style.height || o.forceHelperSize) helper.height(this.currentItem.height());
            return helper;
        },
        _adjustOffsetFromHelper: function(obj) {
            if ("string" === typeof obj) obj = obj.split(" ");
            if ($.isArray(obj)) obj = {
                left: +obj[0],
                top: +obj[1] || 0
            };
            if ("left" in obj) this.offset.click.left = obj.left + this.margins.left;
            if ("right" in obj) this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
            if ("top" in obj) this.offset.click.top = obj.top + this.margins.top;
            if ("bottom" in obj) this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
        },
        _getParentOffset: function() {
            this.offsetParent = this.helper.offsetParent();
            var po = this.offsetParent.offset();
            if ("absolute" === this.cssPosition && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
                po.left += this.scrollParent.scrollLeft();
                po.top += this.scrollParent.scrollTop();
            }
            if (this.offsetParent[0] === document.body || this.offsetParent[0].tagName && "html" === this.offsetParent[0].tagName.toLowerCase() && $.ui.ie) po = {
                top: 0,
                left: 0
            };
            return {
                top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
                left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
            };
        },
        _getRelativeOffset: function() {
            if ("relative" === this.cssPosition) {
                var p = this.currentItem.position();
                return {
                    top: p.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(),
                    left: p.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()
                };
            } else return {
                top: 0,
                left: 0
            };
        },
        _cacheMargins: function() {
            this.margins = {
                left: parseInt(this.currentItem.css("marginLeft"), 10) || 0,
                top: parseInt(this.currentItem.css("marginTop"), 10) || 0
            };
        },
        _cacheHelperProportions: function() {
            this.helperProportions = {
                width: this.helper.outerWidth(),
                height: this.helper.outerHeight()
            };
        },
        _setContainment: function() {
            var ce, co, over, o = this.options;
            if ("parent" === o.containment) o.containment = this.helper[0].parentNode;
            if ("document" === o.containment || "window" === o.containment) this.containment = [ 0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, $("document" === o.containment ? document : window).width() - this.helperProportions.width - this.margins.left, ($("document" === o.containment ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top ];
            if (!/^(document|window|parent)$/.test(o.containment)) {
                ce = $(o.containment)[0];
                co = $(o.containment).offset();
                over = "hidden" !== $(ce).css("overflow");
                this.containment = [ co.left + (parseInt($(ce).css("borderLeftWidth"), 10) || 0) + (parseInt($(ce).css("paddingLeft"), 10) || 0) - this.margins.left, co.top + (parseInt($(ce).css("borderTopWidth"), 10) || 0) + (parseInt($(ce).css("paddingTop"), 10) || 0) - this.margins.top, co.left + (over ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderLeftWidth"), 10) || 0) - (parseInt($(ce).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left, co.top + (over ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderTopWidth"), 10) || 0) - (parseInt($(ce).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top ];
            }
        },
        _convertPositionTo: function(d, pos) {
            if (!pos) pos = this.position;
            var mod = "absolute" === d ? 1 : -1, scroll = "absolute" === this.cssPosition && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = /(html|body)/i.test(scroll[0].tagName);
            return {
                top: pos.top + this.offset.relative.top * mod + this.offset.parent.top * mod - ("fixed" === this.cssPosition ? -this.scrollParent.scrollTop() : scrollIsRootNode ? 0 : scroll.scrollTop()) * mod,
                left: pos.left + this.offset.relative.left * mod + this.offset.parent.left * mod - ("fixed" === this.cssPosition ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft()) * mod
            };
        },
        _generatePosition: function(event) {
            var top, left, o = this.options, pageX = event.pageX, pageY = event.pageY, scroll = "absolute" === this.cssPosition && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = /(html|body)/i.test(scroll[0].tagName);
            if ("relative" === this.cssPosition && !(this.scrollParent[0] !== document && this.scrollParent[0] !== this.offsetParent[0])) this.offset.relative = this._getRelativeOffset();
            if (this.originalPosition) {
                if (this.containment) {
                    if (event.pageX - this.offset.click.left < this.containment[0]) pageX = this.containment[0] + this.offset.click.left;
                    if (event.pageY - this.offset.click.top < this.containment[1]) pageY = this.containment[1] + this.offset.click.top;
                    if (event.pageX - this.offset.click.left > this.containment[2]) pageX = this.containment[2] + this.offset.click.left;
                    if (event.pageY - this.offset.click.top > this.containment[3]) pageY = this.containment[3] + this.offset.click.top;
                }
                if (o.grid) {
                    top = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1];
                    pageY = this.containment ? top - this.offset.click.top >= this.containment[1] && top - this.offset.click.top <= this.containment[3] ? top : top - this.offset.click.top >= this.containment[1] ? top - o.grid[1] : top + o.grid[1] : top;
                    left = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0];
                    pageX = this.containment ? left - this.offset.click.left >= this.containment[0] && left - this.offset.click.left <= this.containment[2] ? left : left - this.offset.click.left >= this.containment[0] ? left - o.grid[0] : left + o.grid[0] : left;
                }
            }
            return {
                top: pageY - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + ("fixed" === this.cssPosition ? -this.scrollParent.scrollTop() : scrollIsRootNode ? 0 : scroll.scrollTop()),
                left: pageX - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + ("fixed" === this.cssPosition ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft())
            };
        },
        _rearrange: function(event, i, a, hardRefresh) {
            a ? a[0].appendChild(this.placeholder[0]) : i.item[0].parentNode.insertBefore(this.placeholder[0], "down" === this.direction ? i.item[0] : i.item[0].nextSibling);
            this.counter = this.counter ? ++this.counter : 1;
            var counter = this.counter;
            this._delay(function() {
                if (counter === this.counter) this.refreshPositions(!hardRefresh);
            });
        },
        _clear: function(event, noPropagation) {
            this.reverting = false;
            var i, delayedTriggers = [];
            if (!this._noFinalSort && this.currentItem.parent().length) this.placeholder.before(this.currentItem);
            this._noFinalSort = null;
            if (this.helper[0] === this.currentItem[0]) {
                for (i in this._storedCSS) if ("auto" === this._storedCSS[i] || "static" === this._storedCSS[i]) this._storedCSS[i] = "";
                this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
            } else this.currentItem.show();
            if (this.fromOutside && !noPropagation) delayedTriggers.push(function(event) {
                this._trigger("receive", event, this._uiHash(this.fromOutside));
            });
            if ((this.fromOutside || this.domPosition.prev !== this.currentItem.prev().not(".ui-sortable-helper")[0] || this.domPosition.parent !== this.currentItem.parent()[0]) && !noPropagation) delayedTriggers.push(function(event) {
                this._trigger("update", event, this._uiHash());
            });
            if (this !== this.currentContainer) if (!noPropagation) {
                delayedTriggers.push(function(event) {
                    this._trigger("remove", event, this._uiHash());
                });
                delayedTriggers.push(function(c) {
                    return function(event) {
                        c._trigger("receive", event, this._uiHash(this));
                    };
                }.call(this, this.currentContainer));
                delayedTriggers.push(function(c) {
                    return function(event) {
                        c._trigger("update", event, this._uiHash(this));
                    };
                }.call(this, this.currentContainer));
            }
            for (i = this.containers.length - 1; i >= 0; i--) {
                if (!noPropagation) delayedTriggers.push(function(c) {
                    return function(event) {
                        c._trigger("deactivate", event, this._uiHash(this));
                    };
                }.call(this, this.containers[i]));
                if (this.containers[i].containerCache.over) {
                    delayedTriggers.push(function(c) {
                        return function(event) {
                            c._trigger("out", event, this._uiHash(this));
                        };
                    }.call(this, this.containers[i]));
                    this.containers[i].containerCache.over = 0;
                }
            }
            if (this.storedCursor) {
                this.document.find("body").css("cursor", this.storedCursor);
                this.storedStylesheet.remove();
            }
            if (this._storedOpacity) this.helper.css("opacity", this._storedOpacity);
            if (this._storedZIndex) this.helper.css("zIndex", "auto" === this._storedZIndex ? "" : this._storedZIndex);
            this.dragging = false;
            if (this.cancelHelperRemoval) {
                if (!noPropagation) {
                    this._trigger("beforeStop", event, this._uiHash());
                    for (i = 0; i < delayedTriggers.length; i++) delayedTriggers[i].call(this, event);
                    this._trigger("stop", event, this._uiHash());
                }
                this.fromOutside = false;
                return false;
            }
            if (!noPropagation) this._trigger("beforeStop", event, this._uiHash());
            this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
            if (this.helper[0] !== this.currentItem[0]) this.helper.remove();
            this.helper = null;
            if (!noPropagation) {
                for (i = 0; i < delayedTriggers.length; i++) delayedTriggers[i].call(this, event);
                this._trigger("stop", event, this._uiHash());
            }
            this.fromOutside = false;
            return true;
        },
        _trigger: function() {
            if (false === $.Widget.prototype._trigger.apply(this, arguments)) this.cancel();
        },
        _uiHash: function(_inst) {
            var inst = _inst || this;
            return {
                helper: inst.helper,
                placeholder: inst.placeholder || $([]),
                position: inst.position,
                originalPosition: inst.originalPosition,
                offset: inst.positionAbs,
                item: inst.currentItem,
                sender: _inst ? _inst.element : null
            };
        }
    });
})(jQuery);

(function($) {
    function maybeCall(thing, ctx) {
        return "function" == typeof thing ? thing.call(ctx) : thing;
    }
    function isElementInDOM(ele) {
        while (ele = ele.parentNode) if (ele == document) return true;
        return false;
    }
    function Tipsy(element, options) {
        this.$element = $(element);
        this.options = options;
        this.enabled = true;
        this.fixTitle();
    }
    Tipsy.prototype = {
        show: function() {
            var title = this.getTitle();
            if (title && this.enabled) {
                var $tip = this.tip();
                $tip.find(".tipsy-inner")[this.options.html ? "html" : "text"](title);
                $tip[0].className = "tipsy";
                $tip.remove().css({
                    top: 0,
                    left: 0,
                    visibility: "hidden",
                    display: "block"
                }).prependTo(document.body);
                var pos = $.extend({}, this.$element.offset(), {
                    width: this.$element[0].offsetWidth,
                    height: this.$element[0].offsetHeight
                });
                var actualWidth = $tip[0].offsetWidth, actualHeight = $tip[0].offsetHeight, gravity = maybeCall(this.options.gravity, this.$element[0]);
                var tp;
                switch (gravity.charAt(0)) {
                  case "n":
                    tp = {
                        top: pos.top + pos.height + this.options.offset,
                        left: pos.left + pos.width / 2 - actualWidth / 2
                    };
                    break;

                  case "s":
                    tp = {
                        top: pos.top - actualHeight - this.options.offset,
                        left: pos.left + pos.width / 2 - actualWidth / 2
                    };
                    break;

                  case "e":
                    tp = {
                        top: pos.top + pos.height / 2 - actualHeight / 2,
                        left: pos.left - actualWidth - this.options.offset
                    };
                    break;

                  case "w":
                    tp = {
                        top: pos.top + pos.height / 2 - actualHeight / 2,
                        left: pos.left + pos.width + this.options.offset
                    };
                }
                if (2 == gravity.length) if ("w" == gravity.charAt(1)) tp.left = pos.left + pos.width / 2 - 15; else tp.left = pos.left + pos.width / 2 - actualWidth + 15;
                $tip.css(tp).addClass("tipsy-" + gravity);
                $tip.find(".tipsy-arrow")[0].className = "tipsy-arrow tipsy-arrow-" + gravity.charAt(0);
                if (this.options.className) $tip.addClass(maybeCall(this.options.className, this.$element[0]));
                if (this.options.fade) $tip.stop().css({
                    opacity: 0,
                    display: "block",
                    visibility: "visible"
                }).animate({
                    opacity: this.options.opacity
                }); else $tip.css({
                    visibility: "visible",
                    opacity: this.options.opacity
                });
            }
        },
        hide: function() {
            if (this.options.fade) this.tip().stop().fadeOut(function() {
                $(this).remove();
            }); else this.tip().remove();
        },
        fixTitle: function() {
            var $e = this.$element;
            if ($e.attr("title") || "string" != typeof $e.attr("original-title")) $e.attr("original-title", $e.attr("title") || "").removeAttr("title");
        },
        getTitle: function() {
            var title, $e = this.$element, o = this.options;
            this.fixTitle();
            var title, o = this.options;
            if ("string" == typeof o.title) title = $e.attr("title" == o.title ? "original-title" : o.title); else if ("function" == typeof o.title) title = o.title.call($e[0]);
            title = ("" + title).replace(/(^\s*|\s*$)/, "");
            return title || o.fallback;
        },
        tip: function() {
            if (!this.$tip) {
                this.$tip = $('<div class="tipsy"></div>').html('<div class="tipsy-arrow"></div><div class="tipsy-inner"></div>');
                this.$tip.data("tipsy-pointee", this.$element[0]);
            }
            return this.$tip;
        },
        validate: function() {
            if (!this.$element[0].parentNode) {
                this.hide();
                this.$element = null;
                this.options = null;
            }
        },
        enable: function() {
            this.enabled = true;
        },
        disable: function() {
            this.enabled = false;
        },
        toggleEnabled: function() {
            this.enabled = !this.enabled;
        }
    };
    $.fn.tipsy = function(options) {
        if (true === options) return this.data("tipsy"); else if ("string" == typeof options) {
            var tipsy = this.data("tipsy");
            if (tipsy) tipsy[options]();
            return this;
        }
        options = $.extend({}, $.fn.tipsy.defaults, options);
        function get(ele) {
            var tipsy = $.data(ele, "tipsy");
            if (!tipsy) {
                tipsy = new Tipsy(ele, $.fn.tipsy.elementOptions(ele, options));
                $.data(ele, "tipsy", tipsy);
            }
            return tipsy;
        }
        function enter() {
            var tipsy = get(this);
            tipsy.hoverState = "in";
            if (0 == options.delayIn) tipsy.show(); else {
                tipsy.fixTitle();
                setTimeout(function() {
                    if ("in" == tipsy.hoverState) tipsy.show();
                }, options.delayIn);
            }
        }
        function leave() {
            var tipsy = get(this);
            tipsy.hoverState = "out";
            if (0 == options.delayOut) tipsy.hide(); else setTimeout(function() {
                if ("out" == tipsy.hoverState) tipsy.hide();
            }, options.delayOut);
        }
        if (!options.live) this.each(function() {
            get(this);
        });
        if ("manual" != options.trigger) {
            var binder = options.live ? "live" : "bind", eventIn = "hover" == options.trigger ? "mouseenter" : "focus", eventOut = "hover" == options.trigger ? "mouseleave" : "blur";
            this[binder](eventIn, enter)[binder](eventOut, leave);
        }
        return this;
    };
    $.fn.tipsy.defaults = {
        className: null,
        delayIn: 0,
        delayOut: 0,
        fade: false,
        fallback: "",
        gravity: "n",
        html: false,
        live: false,
        offset: 0,
        opacity: .8,
        title: "title",
        trigger: "hover"
    };
    $.fn.tipsy.revalidate = function() {
        $(".tipsy").each(function() {
            var pointee = $.data(this, "tipsy-pointee");
            if (!pointee || !isElementInDOM(pointee)) $(this).remove();
        });
    };
    $.fn.tipsy.elementOptions = function(ele, options) {
        return $.metadata ? $.extend({}, options, $(ele).metadata()) : options;
    };
    $.fn.tipsy.autoNS = function() {
        return $(this).offset().top > $(document).scrollTop() + $(window).height() / 2 ? "s" : "n";
    };
    $.fn.tipsy.autoWE = function() {
        return $(this).offset().left > $(document).scrollLeft() + $(window).width() / 2 ? "e" : "w";
    };
    $.fn.tipsy.autoBounds = function(margin, prefer) {
        return function() {
            var dir = {
                ns: prefer[0],
                ew: prefer.length > 1 ? prefer[1] : false
            }, boundTop = $(document).scrollTop() + margin, boundLeft = $(document).scrollLeft() + margin, $this = $(this);
            if ($this.offset().top < boundTop) dir.ns = "n";
            if ($this.offset().left < boundLeft) dir.ew = "w";
            if ($(window).width() + $(document).scrollLeft() - $this.offset().left < margin) dir.ew = "e";
            if ($(window).height() + $(document).scrollTop() - $this.offset().top < margin) dir.ns = "s";
            return dir.ns + (dir.ew ? dir.ew : "");
        };
    };
})(jQuery);

(function($) {
    var $scrollTo = $.scrollTo = function(target, duration, settings) {
        $(window).scrollTo(target, duration, settings);
    };
    $scrollTo.defaults = {
        axis: "xy",
        duration: parseFloat($.fn.jquery) >= 1.3 ? 0 : 1
    };
    $scrollTo.window = function(scope) {
        return $(window)._scrollable();
    };
    $.fn._scrollable = function() {
        return this.map(function() {
            var elem = this, isWin = !elem.nodeName || $.inArray(elem.nodeName.toLowerCase(), [ "iframe", "#document", "html", "body" ]) != -1;
            if (!isWin) return elem;
            var doc = (elem.contentWindow || elem).document || elem.ownerDocument || elem;
            return $.browser.safari || "BackCompat" == doc.compatMode ? doc.body : doc.documentElement;
        });
    };
    $.fn.scrollTo = function(target, duration, settings) {
        if ("object" == typeof duration) {
            settings = duration;
            duration = 0;
        }
        if ("function" == typeof settings) settings = {
            onAfter: settings
        };
        if ("max" == target) target = 9e9;
        settings = $.extend({}, $scrollTo.defaults, settings);
        duration = duration || settings.speed || settings.duration;
        settings.queue = settings.queue && settings.axis.length > 1;
        if (settings.queue) duration /= 2;
        settings.offset = both(settings.offset);
        settings.over = both(settings.over);
        return this._scrollable().each(function() {
            var elem = this, $elem = $(elem), targ = target, toff, attr = {}, win = $elem.is("html,body");
            switch (typeof targ) {
              case "number":
              case "string":
                if (/^([+-]=)?\d+(\.\d+)?(px|%)?$/.test(targ)) {
                    targ = both(targ);
                    break;
                }
                targ = $(targ, this);

              case "object":
                if (targ.is || targ.style) toff = (targ = $(targ)).offset();
            }
            $.each(settings.axis.split(""), function(i, axis) {
                var Pos = "x" == axis ? "Left" : "Top", pos = Pos.toLowerCase(), key = "scroll" + Pos, old = elem[key], max = $scrollTo.max(elem, axis);
                if (toff) {
                    attr[key] = toff[pos] + (win ? 0 : old - $elem.offset()[pos]);
                    if (settings.margin) {
                        attr[key] -= parseInt(targ.css("margin" + Pos)) || 0;
                        attr[key] -= parseInt(targ.css("border" + Pos + "Width")) || 0;
                    }
                    attr[key] += settings.offset[pos] || 0;
                    if (settings.over[pos]) attr[key] += targ["x" == axis ? "width" : "height"]() * settings.over[pos];
                } else {
                    var val = targ[pos];
                    attr[key] = val.slice && "%" == val.slice(-1) ? parseFloat(val) / 100 * max : val;
                }
                if (/^\d+$/.test(attr[key])) attr[key] = attr[key] <= 0 ? 0 : Math.min(attr[key], max);
                if (!i && settings.queue) {
                    if (old != attr[key]) animate(settings.onAfterFirst);
                    delete attr[key];
                }
            });
            animate(settings.onAfter);
            function animate(callback) {
                $elem.animate(attr, duration, settings.easing, callback && function() {
                    callback.call(this, target, settings);
                });
            }
        }).end();
    };
    $scrollTo.max = function(elem, axis) {
        var Dim = "x" == axis ? "Width" : "Height", scroll = "scroll" + Dim;
        if (!$(elem).is("html,body")) return elem[scroll] - $(elem)[Dim.toLowerCase()]();
        var size = "client" + Dim, html = elem.ownerDocument.documentElement, body = elem.ownerDocument.body;
        return Math.max(html[scroll], body[scroll]) - Math.min(html[size], body[size]);
    };
    function both(val) {
        return "object" == typeof val ? val : {
            top: val,
            left: val
        };
    }
})(jQuery);

(function($) {
    $.fn.hoverIntent = function(handlerIn, handlerOut, selector) {
        var cfg = {
            interval: 100,
            sensitivity: 7,
            timeout: 0
        };
        if ("object" === typeof handlerIn) cfg = $.extend(cfg, handlerIn); else if ($.isFunction(handlerOut)) cfg = $.extend(cfg, {
            over: handlerIn,
            out: handlerOut,
            selector: selector
        }); else cfg = $.extend(cfg, {
            over: handlerIn,
            out: handlerIn,
            selector: handlerOut
        });
        var cX, cY, pX, pY;
        var track = function(ev) {
            cX = ev.pageX;
            cY = ev.pageY;
        };
        var compare = function(ev, ob) {
            ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t);
            if (Math.abs(pX - cX) + Math.abs(pY - cY) < cfg.sensitivity) {
                $(ob).off("mousemove.hoverIntent", track);
                ob.hoverIntent_s = 1;
                return cfg.over.apply(ob, [ ev ]);
            } else {
                pX = cX;
                pY = cY;
                ob.hoverIntent_t = setTimeout(function() {
                    compare(ev, ob);
                }, cfg.interval);
            }
        };
        var delay = function(ev, ob) {
            ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t);
            ob.hoverIntent_s = 0;
            return cfg.out.apply(ob, [ ev ]);
        };
        var handleHover = function(e) {
            var ev = jQuery.extend({}, e);
            var ob = this;
            if (ob.hoverIntent_t) ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t);
            if ("mouseenter" == e.type) {
                pX = ev.pageX;
                pY = ev.pageY;
                $(ob).on("mousemove.hoverIntent", track);
                if (1 != ob.hoverIntent_s) ob.hoverIntent_t = setTimeout(function() {
                    compare(ev, ob);
                }, cfg.interval);
            } else {
                $(ob).off("mousemove.hoverIntent", track);
                if (1 == ob.hoverIntent_s) ob.hoverIntent_t = setTimeout(function() {
                    delay(ev, ob);
                }, cfg.timeout);
            }
        };
        return this.on({
            "mouseenter.hoverIntent": handleHover,
            "mouseleave.hoverIntent": handleHover
        }, cfg.selector);
    };
})(jQuery);

(function($) {
    var scrollbarWidth = 0;
    $.getScrollbarWidth = function() {
        if (!scrollbarWidth) if ($.browser.msie) {
            var $textarea1 = $('<textarea cols="10" rows="2"></textarea>').css({
                position: "absolute",
                top: -1e3,
                left: -1e3
            }).appendTo("body"), $textarea2 = $('<textarea cols="10" rows="2" style="overflow: hidden;"></textarea>').css({
                position: "absolute",
                top: -1e3,
                left: -1e3
            }).appendTo("body");
            scrollbarWidth = $textarea1.width() - $textarea2.width();
            $textarea1.add($textarea2).remove();
        } else {
            var $div = $("<div />").css({
                width: 100,
                height: 100,
                overflow: "auto",
                position: "absolute",
                top: -1e3,
                left: -1e3
            }).prependTo("body").append("<div />").find("div").css({
                width: "100%",
                height: 200
            });
            scrollbarWidth = 100 - $div.width();
            $div.parent().remove();
        }
        return scrollbarWidth;
    };
})(jQuery);

(function($) {
    "$:nomunge";
    var interval_id, last_hash, cache_bust = 1, rm_callback, window = this, FALSE = !1, postMessage = "postMessage", addEventListener = "addEventListener", p_receiveMessage, has_postMessage = window[postMessage] && !$.browser.opera;
    $[postMessage] = function(message, target_url, target) {
        if (!target_url) return;
        message = "string" === typeof message ? message : $.param(message);
        target = target || parent;
        if (has_postMessage) target[postMessage](message, target_url.replace(/([^:]+:\/\/[^\/]+).*/, "$1")); else if (target_url) target.location = target_url.replace(/#.*$/, "") + "#" + +new Date() + cache_bust++ + "&" + message;
    };
    $.receiveMessage = p_receiveMessage = function(callback, source_origin, delay) {
        if (has_postMessage) {
            if (callback) {
                rm_callback && p_receiveMessage();
                rm_callback = function(e) {
                    if ("string" === typeof source_origin && e.origin !== source_origin || $.isFunction(source_origin) && source_origin(e.origin) === FALSE) return FALSE;
                    callback(e);
                };
            }
            if (window[addEventListener]) window[callback ? addEventListener : "removeEventListener"]("message", rm_callback, FALSE); else window[callback ? "attachEvent" : "detachEvent"]("onmessage", rm_callback);
        } else {
            interval_id && clearInterval(interval_id);
            interval_id = null;
            if (callback) {
                delay = "number" === typeof source_origin ? source_origin : "number" === typeof delay ? delay : 100;
                interval_id = setInterval(function() {
                    var hash = document.location.hash, re = /^#?\d+&/;
                    if (hash !== last_hash && re.test(hash)) {
                        last_hash = hash;
                        callback({
                            data: hash.replace(re, "")
                        });
                    }
                }, delay);
            }
        }
    };
})(jQuery);

(function($, undefined) {
    "use strict";
    $.ajaxPrefilter(function(options, origOptions, jqXHR) {
        if (options.iframe) return "iframe";
    });
    $.ajaxSetup({
        converters: {
            "iframe text": function(iframe) {
                return $(iframe[0].body).text();
            },
            "iframe json": function(iframe) {
                return $.parseJSON($(iframe[0].body).text());
            },
            "iframe html": function(iframe) {
                return $(iframe[0].body).html();
            }
        }
    });
    $.ajaxTransport("iframe", function(options, origOptions, jqXHR) {
        var form = null, iframe = null, name = "iframe-" + $.now(), files = $(options.files).filter(":file:enabled"), markers = null;
        function cleanUp() {
            if (files.length) markers.replaceWith(function(idx) {
                return files.get(idx);
            });
            form.remove();
            iframe.attr("src", "javascript:false;").remove();
        }
        options.dataTypes.shift();
        form = $("<form enctype='multipart/form-data' method='" + options.type + "'></form>").hide().attr({
            action: options.url,
            target: name
        });
        if ("string" === typeof origOptions.data && origOptions.data.length > 0) $.error("data must not be serialized");
        $.each(origOptions.data || {}, function(name, value) {
            var name, value;
            if (value && value.nodeType) {
                if ($(value).is('input[type="checkbox"],input[type="radio"]') && !$(value).attr("checked")) return;
                name = $(value).attr("name");
                value = $(value).val();
            }
            if ($.isPlainObject(value)) {
                name = value.name;
                value = value.value;
            }
            $("<input type='hidden' />").attr({
                name: name,
                value: value
            }).appendTo(form);
        });
        $("<input type='hidden' value='IFrame' name='X-Requested-With' />").appendTo(form);
        if (files.length) {
            markers = files.after(function(idx) {
                return $(this).clone().prop("disabled", true);
            }).next();
            files.appendTo(form);
        }
        return {
            send: function(headers, completeCallback) {
                iframe = $("<iframe src='javascript:false;' name='" + name + "' id='" + name + "' style='display:none'></iframe>");
                iframe.bind("load", function() {
                    iframe.unbind("load").bind("load", function() {
                        var doc = this.contentWindow ? this.contentWindow.document : this.contentDocument ? this.contentDocument : this.document, root = doc.documentElement ? doc.documentElement : doc.body, textarea = root.getElementsByTagName("textarea")[0], type = textarea && textarea.getAttribute("data-type") || null, status = textarea && textarea.getAttribute("data-status") || 200, statusText = textarea && textarea.getAttribute("data-statusText") || "OK", content = {
                            html: root.innerHTML,
                            text: type ? textarea.value : root ? root.textContent || root.innerText : null
                        };
                        cleanUp();
                        completeCallback(status, statusText, content, type ? "Content-Type: " + type : null);
                    });
                    form[0].submit();
                });
                $("body").append(form, iframe);
            },
            abort: function() {
                if (null !== iframe) {
                    iframe.unbind("load").attr("src", "javascript:false;");
                    cleanUp();
                }
            }
        };
    });
})(jQuery);

(function($) {
    $.fn.autogrow = function(options) {
        this.filter("textarea").each(function() {
            var $this = $(this), minHeight = $this.height(), lineHeight = $this.css("lineHeight");
            var shadow = $("<div></div>").css({
                position: "absolute",
                top: -1e4,
                left: -1e4,
                width: $(this).width(),
                fontSize: $this.css("fontSize"),
                fontFamily: $this.css("fontFamily"),
                lineHeight: $this.css("lineHeight"),
                resize: "none"
            }).appendTo(document.body);
            var update = _.throttle(function() {
                var val = this.value.replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/&/g, "&amp;").replace(/\n/g, "<br/>");
                shadow.html(val);
                $(this).css("height", Math.max(shadow.height() + 20, minHeight));
            }, 200);
            $(this).focus(update).change(update).keyup(update).keydown(update);
            update.apply(this);
        });
        return this;
    };
})(jQuery);

var guiders = function($) {
    var guiders = {};
    guiders.version = "1.2.6";
    guiders._defaultSettings = {
        attachTo: null,
        autoFocus: false,
        buttons: [ {
            name: "Close"
        } ],
        buttonCustomHTML: "",
        classString: null,
        description: "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
        highlight: null,
        isHashable: true,
        offset: {
            top: null,
            left: null
        },
        onShow: null,
        onHide: null,
        overlay: false,
        position: 0,
        title: "Sample title goes here",
        width: 400,
        xButton: false
    };
    guiders._htmlSkeleton = [ "<div class='guider'>", "  <div class='guider_content'>", "    <h1 class='guider_title'></h1>", "    <div class='guider_close'></div>", "    <p class='guider_description'></p>", "    <div class='guider_buttons'>", "    </div>", "  </div>", "  <div class='guider_arrow'>", "  </div>", "</div>" ].join("");
    guiders._arrowSize = 42;
    guiders._buttonElement = "<a></a>";
    guiders._buttonAttributes = {
        href: "javascript:void(0);"
    };
    guiders._closeButtonTitle = "Close";
    guiders._currentGuiderID = null;
    guiders._guiders = {};
    guiders._lastCreatedGuiderID = null;
    guiders._nextButtonTitle = "Next";
    guiders._offsetNameMapping = {
        topLeft: 11,
        top: 12,
        topRight: 1,
        rightTop: 2,
        right: 3,
        rightBottom: 4,
        bottomRight: 5,
        bottom: 6,
        bottomLeft: 7,
        leftBottom: 8,
        left: 9,
        leftTop: 10
    };
    guiders._windowHeight = 0;
    guiders._addButtons = function(myGuider) {
        var guiderButtonsContainer = myGuider.elem.find(".guider_buttons");
        if (null === myGuider.buttons || 0 === myGuider.buttons.length) {
            guiderButtonsContainer.remove();
            return;
        }
        for (var i = myGuider.buttons.length - 1; i >= 0; i--) {
            var thisButton = myGuider.buttons[i];
            var thisButtonElem = $(guiders._buttonElement, $.extend({
                "class": "guider_button",
                html: thisButton.name
            }, guiders._buttonAttributes, thisButton.html || {}));
            if ("undefined" !== typeof thisButton.classString && null !== thisButton.classString) thisButtonElem.addClass(thisButton.classString);
            guiderButtonsContainer.append(thisButtonElem);
            if (thisButton.onclick) thisButtonElem.bind("click", thisButton.onclick); else if (!thisButton.onclick && thisButton.name.toLowerCase() === guiders._closeButtonTitle.toLowerCase()) thisButtonElem.bind("click", function() {
                guiders.hideAll();
            }); else if (!thisButton.onclick && thisButton.name.toLowerCase() === guiders._nextButtonTitle.toLowerCase()) thisButtonElem.bind("click", function() {
                !myGuider.elem.data("locked") && guiders.next();
            });
        }
        if ("" !== myGuider.buttonCustomHTML) {
            var myCustomHTML = $(myGuider.buttonCustomHTML);
            myGuider.elem.find(".guider_buttons").append(myCustomHTML);
        }
        if (0 === myGuider.buttons.length) guiderButtonsContainer.remove();
    };
    guiders._addXButton = function(myGuider) {
        var xButtonContainer = myGuider.elem.find(".guider_close");
        var xButton = $("<div></div>", {
            "class": "x_button",
            role: "button"
        });
        xButtonContainer.append(xButton);
        xButton.click(function() {
            guiders.hideAll();
        });
    };
    guiders._attach = function(myGuider) {
        if ("object" !== typeof myGuider) return;
        var attachTo = $(myGuider.attachTo);
        var myHeight = myGuider.elem.innerHeight();
        var myWidth = myGuider.elem.innerWidth();
        if (0 === myGuider.position || 0 === attachTo.length) {
            myGuider.elem.css("position", "fixed");
            myGuider.elem.css("top", ($(window).height() - myHeight) / 3 + "px");
            myGuider.elem.css("left", ($(window).width() - myWidth) / 2 + "px");
            return;
        }
        var base = attachTo.offset();
        var top = base.top;
        var left = base.left;
        var topMarginOfBody = $("body").outerHeight(true) - $("body").outerHeight(false);
        top -= topMarginOfBody;
        if (guiders._offsetNameMapping[myGuider.position]) myGuider.position = guiders._offsetNameMapping[myGuider.position];
        var attachToHeight = attachTo.innerHeight();
        var attachToWidth = attachTo.innerWidth();
        var bufferOffset = .9 * guiders._arrowSize;
        var offsetMap = {
            1: [ -bufferOffset - myHeight, attachToWidth - myWidth ],
            2: [ 0, bufferOffset + attachToWidth ],
            3: [ attachToHeight / 2 - myHeight / 2, bufferOffset + attachToWidth ],
            4: [ attachToHeight - myHeight, bufferOffset + attachToWidth ],
            5: [ bufferOffset + attachToHeight, attachToWidth - myWidth ],
            6: [ bufferOffset + attachToHeight, attachToWidth / 2 - myWidth / 2 ],
            7: [ bufferOffset + attachToHeight, 0 ],
            8: [ attachToHeight - myHeight, -myWidth - bufferOffset ],
            9: [ attachToHeight / 2 - myHeight / 2, -myWidth - bufferOffset ],
            10: [ 0, -myWidth - bufferOffset ],
            11: [ -bufferOffset - myHeight, 0 ],
            12: [ -bufferOffset - myHeight, attachToWidth / 2 - myWidth / 2 ]
        };
        var offset = offsetMap[myGuider.position];
        top += offset[0];
        left += offset[1];
        var positionType = "absolute";
        if ("fixed" == attachTo.css("position")) {
            positionType = "fixed";
            top -= $(window).scrollTop();
            left -= $(window).scrollLeft();
        }
        if (null !== myGuider.offset.top) top += myGuider.offset.top;
        if (null !== myGuider.offset.left) left += myGuider.offset.left;
        return myGuider.elem.css({
            position: positionType,
            top: top,
            left: left
        });
    };
    guiders._guiderById = function(id) {
        if ("undefined" === typeof guiders._guiders[id]) throw "Cannot find guider with id " + id;
        return guiders._guiders[id];
    };
    guiders._showOverlay = function() {
        $("#guider_overlay").fadeIn("fast", function() {
            if (this.style.removeAttribute) this.style.removeAttribute("filter");
        });
    };
    guiders._highlightElement = function(selector) {
        $(selector).addClass("guider_highlight");
    };
    guiders._dehighlightElement = function(selector) {
        $(selector).removeClass("guider_highlight");
    };
    guiders._hideOverlay = function() {
        $("#guider_overlay").fadeOut("fast");
    };
    guiders._initializeOverlay = function() {
        if (0 === $("#guider_overlay").length) $('<div id="guider_overlay"></div>').hide().appendTo("body");
    };
    guiders._styleArrow = function(myGuider) {
        var position = myGuider.position || 0;
        if (!position) return;
        var myGuiderArrow = $(myGuider.elem.find(".guider_arrow"));
        var newClass = {
            1: "guider_arrow_down",
            2: "guider_arrow_left",
            3: "guider_arrow_left",
            4: "guider_arrow_left",
            5: "guider_arrow_up",
            6: "guider_arrow_up",
            7: "guider_arrow_up",
            8: "guider_arrow_right",
            9: "guider_arrow_right",
            10: "guider_arrow_right",
            11: "guider_arrow_down",
            12: "guider_arrow_down"
        };
        myGuiderArrow.addClass(newClass[position]);
        var myHeight = myGuider.elem.innerHeight();
        var myWidth = myGuider.elem.innerWidth();
        var arrowOffset = guiders._arrowSize / 2;
        var positionMap = {
            1: [ "right", arrowOffset ],
            2: [ "top", arrowOffset ],
            3: [ "top", myHeight / 2 - arrowOffset ],
            4: [ "bottom", arrowOffset ],
            5: [ "right", arrowOffset ],
            6: [ "left", myWidth / 2 - arrowOffset ],
            7: [ "left", arrowOffset ],
            8: [ "bottom", arrowOffset ],
            9: [ "top", myHeight / 2 - arrowOffset ],
            10: [ "top", arrowOffset ],
            11: [ "left", arrowOffset ],
            12: [ "left", myWidth / 2 - arrowOffset ]
        };
        var position = positionMap[myGuider.position];
        myGuiderArrow.css(position[0], position[1] + "px");
    };
    guiders._showIfHashed = function(myGuider) {
        var GUIDER_HASH_TAG = "guider=";
        var hashIndex = window.location.hash.indexOf(GUIDER_HASH_TAG);
        if (hashIndex !== -1) {
            var hashGuiderId = window.location.hash.substr(hashIndex + GUIDER_HASH_TAG.length);
            if (myGuider.id.toLowerCase() === hashGuiderId.toLowerCase()) guiders.show(myGuider.id);
        }
    };
    guiders.reposition = function() {
        var currentGuider = guiders._guiders[guiders._currentGuiderID];
        guiders._attach(currentGuider);
    };
    guiders.next = function() {
        var currentGuider = guiders._guiders[guiders._currentGuiderID];
        if ("undefined" === typeof currentGuider) return;
        currentGuider.elem.data("locked", true);
        var nextGuiderId = currentGuider.next || null;
        if (null !== nextGuiderId && "" !== nextGuiderId) {
            var myGuider = guiders._guiderById(nextGuiderId);
            var omitHidingOverlay = myGuider.overlay ? true : false;
            guiders.hideAll(omitHidingOverlay, true);
            if (currentGuider && currentGuider.highlight) guiders._dehighlightElement(currentGuider.highlight);
            guiders.show(nextGuiderId);
        }
    };
    guiders.createGuider = function(passedSettings) {
        if (null === passedSettings || void 0 === passedSettings) passedSettings = {};
        myGuider = $.extend({}, guiders._defaultSettings, passedSettings);
        myGuider.id = myGuider.id || String(Math.floor(1e3 * Math.random()));
        var guiderElement = $(guiders._htmlSkeleton);
        myGuider.elem = guiderElement;
        if ("undefined" !== typeof myGuider.classString && null !== myGuider.classString) myGuider.elem.addClass(myGuider.classString);
        myGuider.elem.css("width", myGuider.width + "px");
        var guiderTitleContainer = guiderElement.find(".guider_title");
        guiderTitleContainer.html(myGuider.title);
        guiderElement.find(".guider_description").html(myGuider.description);
        guiders._addButtons(myGuider);
        if (myGuider.xButton) guiders._addXButton(myGuider);
        guiderElement.hide();
        guiderElement.appendTo("body");
        guiderElement.attr("id", myGuider.id);
        if ("undefined" !== typeof myGuider.attachTo && null !== myGuider) guiders._attach(myGuider) && guiders._styleArrow(myGuider);
        guiders._initializeOverlay();
        guiders._guiders[myGuider.id] = myGuider;
        guiders._lastCreatedGuiderID = myGuider.id;
        if (myGuider.isHashable) guiders._showIfHashed(myGuider);
        return guiders;
    };
    guiders.hideAll = function(omitHidingOverlay, next) {
        next = next || false;
        $(".guider:visible").each(function(index, elem) {
            var myGuider = guiders._guiderById($(elem).attr("id"));
            if (myGuider.onHide) myGuider.onHide(myGuider, next);
        });
        $(".guider").fadeOut("fast");
        var currentGuider = guiders._guiders[guiders._currentGuiderID];
        if (currentGuider && currentGuider.highlight) guiders._dehighlightElement(currentGuider.highlight);
        if ("undefined" !== typeof omitHidingOverlay && true === omitHidingOverlay) ; else guiders._hideOverlay();
        return guiders;
    };
    guiders.show = function(id) {
        if (!id && guiders._lastCreatedGuiderID) id = guiders._lastCreatedGuiderID;
        var myGuider = guiders._guiderById(id);
        if (myGuider.overlay) {
            guiders._showOverlay();
            if (myGuider.highlight) guiders._highlightElement(myGuider.highlight);
        }
        if (myGuider.onShow) myGuider.onShow(myGuider);
        guiders._attach(myGuider);
        myGuider.elem.fadeIn("fast").data("locked", false);
        guiders._currentGuiderID = id;
        var windowHeight = guiders._windowHeight = $(window).height();
        var scrollHeight = $(window).scrollTop();
        var guiderOffset = myGuider.elem.offset();
        var guiderElemHeight = myGuider.elem.height();
        var isGuiderBelow = scrollHeight + windowHeight < guiderOffset.top + guiderElemHeight;
        var isGuiderAbove = guiderOffset.top < scrollHeight;
        if (myGuider.autoFocus && (isGuiderBelow || isGuiderAbove)) setTimeout(guiders.scrollToCurrent, 10);
        $(myGuider.elem).trigger("guiders.show");
        return guiders;
    };
    guiders.scrollToCurrent = function() {
        var currentGuider = guiders._guiders[guiders._currentGuiderID];
        if ("undefined" === typeof currentGuider) return;
        var windowHeight = guiders._windowHeight;
        var scrollHeight = $(window).scrollTop();
        var guiderOffset = currentGuider.elem.offset();
        var guiderElemHeight = currentGuider.elem.height();
        var scrollToHeight = Math.round(Math.max(guiderOffset.top + guiderElemHeight / 2 - windowHeight / 2, 0));
        window.scrollTo(0, scrollToHeight);
    };
    var _resizing = void 0;
    $(window).resize(function() {
        if ("undefined" !== typeof _resizing) clearTimeout(_resizing);
        _resizing = setTimeout(function() {
            _resizing = void 0;
            guiders.reposition();
        }, 20);
    });
    return guiders;
}.call(this, jQuery);

(function(window, undefined) {
    "use strict";
    var History = window.History = window.History || {}, jQuery = window.jQuery;
    if ("undefined" !== typeof History.Adapter) throw new Error("History.js Adapter has already been loaded...");
    History.Adapter = {
        bind: function(el, event, callback) {
            jQuery(el).bind(event, callback);
        },
        trigger: function(el, event, extra) {
            jQuery(el).trigger(event, extra);
        },
        extractEventData: function(key, event, extra) {
            var result = event && event.originalEvent && event.originalEvent[key] || extra && extra[key] || undefined;
            return result;
        },
        onDomLoad: function(callback) {
            jQuery(callback);
        }
    };
    if ("undefined" !== typeof History.init) History.init();
})(window);

(function(window, undefined) {
    "use strict";
    var document = window.document, setTimeout = window.setTimeout || setTimeout, clearTimeout = window.clearTimeout || clearTimeout, setInterval = window.setInterval || setInterval, History = window.History = window.History || {};
    if ("undefined" !== typeof History.initHtml4) throw new Error("History.js HTML4 Support has already been loaded...");
    History.initHtml4 = function() {
        if ("undefined" !== typeof History.initHtml4.initialized) return false; else History.initHtml4.initialized = true;
        History.enabled = true;
        History.savedHashes = [];
        History.isLastHash = function(newHash) {
            var oldHash = History.getHashByIndex(), isLast;
            isLast = newHash === oldHash;
            return isLast;
        };
        History.isHashEqual = function(newHash, oldHash) {
            newHash = encodeURIComponent(newHash).replace(/%25/g, "%");
            oldHash = encodeURIComponent(oldHash).replace(/%25/g, "%");
            return newHash === oldHash;
        };
        History.saveHash = function(newHash) {
            if (History.isLastHash(newHash)) return false;
            History.savedHashes.push(newHash);
            return true;
        };
        History.getHashByIndex = function(index) {
            var hash = null;
            if ("undefined" === typeof index) hash = History.savedHashes[History.savedHashes.length - 1]; else if (index < 0) hash = History.savedHashes[History.savedHashes.length + index]; else hash = History.savedHashes[index];
            return hash;
        };
        History.discardedHashes = {};
        History.discardedStates = {};
        History.discardState = function(discardedState, forwardState, backState) {
            var discardedStateHash = History.getHashByState(discardedState), discardObject;
            discardObject = {
                discardedState: discardedState,
                backState: backState,
                forwardState: forwardState
            };
            History.discardedStates[discardedStateHash] = discardObject;
            return true;
        };
        History.discardHash = function(discardedHash, forwardState, backState) {
            var discardObject = {
                discardedHash: discardedHash,
                backState: backState,
                forwardState: forwardState
            };
            History.discardedHashes[discardedHash] = discardObject;
            return true;
        };
        History.discardedState = function(State) {
            var StateHash = History.getHashByState(State), discarded;
            discarded = History.discardedStates[StateHash] || false;
            return discarded;
        };
        History.discardedHash = function(hash) {
            var discarded = History.discardedHashes[hash] || false;
            return discarded;
        };
        History.recycleState = function(State) {
            var StateHash = History.getHashByState(State);
            if (History.discardedState(State)) delete History.discardedStates[StateHash];
            return true;
        };
        if (History.emulated.hashChange) {
            History.hashChangeInit = function() {
                History.checkerFunction = null;
                var lastDocumentHash = "", iframeId, iframe, lastIframeHash, checkerRunning, startedWithHash = Boolean(History.getHash());
                if (History.isInternetExplorer()) {
                    iframeId = "historyjs-iframe";
                    iframe = document.createElement("iframe");
                    iframe.setAttribute("id", iframeId);
                    iframe.setAttribute("src", "#");
                    iframe.style.display = "none";
                    document.body.appendChild(iframe);
                    iframe.contentWindow.document.open();
                    iframe.contentWindow.document.close();
                    lastIframeHash = "";
                    checkerRunning = false;
                    History.checkerFunction = function() {
                        if (checkerRunning) return false;
                        checkerRunning = true;
                        var documentHash = History.getHash(), iframeHash = History.getHash(iframe.contentWindow.document);
                        if (documentHash !== lastDocumentHash) {
                            lastDocumentHash = documentHash;
                            if (iframeHash !== documentHash) {
                                lastIframeHash = iframeHash = documentHash;
                                iframe.contentWindow.document.open();
                                iframe.contentWindow.document.close();
                                iframe.contentWindow.document.location.hash = History.escapeHash(documentHash);
                            }
                            History.Adapter.trigger(window, "hashchange");
                        } else if (iframeHash !== lastIframeHash) {
                            lastIframeHash = iframeHash;
                            if (startedWithHash && "" === iframeHash) History.back(); else History.setHash(iframeHash, false);
                        }
                        checkerRunning = false;
                        return true;
                    };
                } else History.checkerFunction = function() {
                    var documentHash = History.getHash() || "";
                    if (documentHash !== lastDocumentHash) {
                        lastDocumentHash = documentHash;
                        History.Adapter.trigger(window, "hashchange");
                    }
                    return true;
                };
                History.intervalList.push(setInterval(History.checkerFunction, History.options.hashChangeInterval));
                return true;
            };
            History.Adapter.onDomLoad(History.hashChangeInit);
        }
        if (History.emulated.pushState) {
            History.onHashChange = function(event) {
                var currentUrl = event && event.newURL || History.getLocationHref(), currentHash = History.getHashByUrl(currentUrl), currentState = null, currentStateHash = null, currentStateHashExits = null, discardObject;
                if (History.isLastHash(currentHash)) {
                    History.busy(false);
                    return false;
                }
                History.doubleCheckComplete();
                History.saveHash(currentHash);
                if (currentHash && History.isTraditionalAnchor(currentHash)) {
                    History.Adapter.trigger(window, "anchorchange");
                    History.busy(false);
                    return false;
                }
                currentState = History.extractState(History.getFullUrl(currentHash || History.getLocationHref()), true);
                if (History.isLastSavedState(currentState)) {
                    History.busy(false);
                    return false;
                }
                currentStateHash = History.getHashByState(currentState);
                discardObject = History.discardedState(currentState);
                if (discardObject) {
                    if (History.getHashByIndex(-2) === History.getHashByState(discardObject.forwardState)) History.back(false); else History.forward(false);
                    return false;
                }
                History.pushState(currentState.data, currentState.title, encodeURI(currentState.url), false);
                return true;
            };
            History.Adapter.bind(window, "hashchange", History.onHashChange);
            History.pushState = function(data, title, url, queue) {
                url = encodeURI(url).replace(/%25/g, "%");
                if (History.getHashByUrl(url)) throw new Error("History.js does not support states with fragment-identifiers (hashes/anchors).");
                if (false !== queue && History.busy()) {
                    History.pushQueue({
                        scope: History,
                        callback: History.pushState,
                        args: arguments,
                        queue: queue
                    });
                    return false;
                }
                History.busy(true);
                var newState = History.createStateObject(data, title, url), newStateHash = History.getHashByState(newState), oldState = History.getState(false), oldStateHash = History.getHashByState(oldState), html4Hash = History.getHash(), wasExpected = History.expectedStateId == newState.id;
                History.storeState(newState);
                History.expectedStateId = newState.id;
                History.recycleState(newState);
                History.setTitle(newState);
                if (newStateHash === oldStateHash) {
                    History.busy(false);
                    return false;
                }
                History.saveState(newState);
                if (!wasExpected) History.Adapter.trigger(window, "statechange");
                if (!History.isHashEqual(newStateHash, html4Hash) && !History.isHashEqual(newStateHash, History.getShortUrl(History.getLocationHref()))) History.setHash(newStateHash, false);
                History.busy(false);
                return true;
            };
            History.replaceState = function(data, title, url, queue) {
                url = encodeURI(url).replace(/%25/g, "%");
                if (History.getHashByUrl(url)) throw new Error("History.js does not support states with fragment-identifiers (hashes/anchors).");
                if (false !== queue && History.busy()) {
                    History.pushQueue({
                        scope: History,
                        callback: History.replaceState,
                        args: arguments,
                        queue: queue
                    });
                    return false;
                }
                History.busy(true);
                var newState = History.createStateObject(data, title, url), newStateHash = History.getHashByState(newState), oldState = History.getState(false), oldStateHash = History.getHashByState(oldState), previousState = History.getStateByIndex(-2);
                History.discardState(oldState, newState, previousState);
                if (newStateHash === oldStateHash) {
                    History.storeState(newState);
                    History.expectedStateId = newState.id;
                    History.recycleState(newState);
                    History.setTitle(newState);
                    History.saveState(newState);
                    History.Adapter.trigger(window, "statechange");
                    History.busy(false);
                } else History.pushState(newState.data, newState.title, newState.url, false);
                return true;
            };
        }
        if (History.emulated.pushState) if (History.getHash() && !History.emulated.hashChange) History.Adapter.onDomLoad(function() {
            History.Adapter.trigger(window, "hashchange");
        });
    };
    if ("undefined" !== typeof History.init) History.init();
})(window);

(function(window, undefined) {
    "use strict";
    var console = window.console || undefined, document = window.document, navigator = window.navigator, sessionStorage = window.sessionStorage || false, setTimeout = window.setTimeout, clearTimeout = window.clearTimeout, setInterval = window.setInterval, clearInterval = window.clearInterval, JSON = window.JSON, alert = window.alert, History = window.History = window.History || {}, history = window.history;
    try {
        sessionStorage.setItem("TEST", "1");
        sessionStorage.removeItem("TEST");
    } catch (e) {
        sessionStorage = false;
    }
    JSON.stringify = JSON.stringify || JSON.encode;
    JSON.parse = JSON.parse || JSON.decode;
    if ("undefined" !== typeof History.init) throw new Error("History.js Core has already been loaded...");
    History.init = function(options) {
        if ("undefined" === typeof History.Adapter) return false;
        if ("undefined" !== typeof History.initCore) History.initCore();
        if ("undefined" !== typeof History.initHtml4) History.initHtml4();
        return true;
    };
    History.initCore = function(options) {
        if ("undefined" !== typeof History.initCore.initialized) return false; else History.initCore.initialized = true;
        History.options = History.options || {};
        History.options.hashChangeInterval = History.options.hashChangeInterval || 100;
        History.options.safariPollInterval = History.options.safariPollInterval || 500;
        History.options.doubleCheckInterval = History.options.doubleCheckInterval || 500;
        History.options.disableSuid = History.options.disableSuid || false;
        History.options.storeInterval = History.options.storeInterval || 1e3;
        History.options.busyDelay = History.options.busyDelay || 250;
        History.options.debug = History.options.debug || false;
        History.options.initialTitle = History.options.initialTitle || document.title;
        History.options.html4Mode = History.options.html4Mode || false;
        History.options.delayInit = History.options.delayInit || false;
        History.intervalList = [];
        History.clearAllIntervals = function() {
            var i, il = History.intervalList;
            if ("undefined" !== typeof il && null !== il) {
                for (i = 0; i < il.length; i++) clearInterval(il[i]);
                History.intervalList = null;
            }
        };
        History.debug = function() {
            if (History.options.debug || false) History.log.apply(History, arguments);
        };
        History.log = function() {
            var consoleExists = !("undefined" === typeof console || "undefined" === typeof console.log || "undefined" === typeof console.log.apply), textarea = document.getElementById("log"), message, i, n, args, arg;
            if (consoleExists) {
                args = Array.prototype.slice.call(arguments);
                message = args.shift();
                if ("undefined" !== typeof console.debug) console.debug.apply(console, [ message, args ]); else console.log.apply(console, [ message, args ]);
            } else message = "\n" + arguments[0] + "\n";
            for (i = 1, n = arguments.length; i < n; ++i) {
                arg = arguments[i];
                if ("object" === typeof arg && "undefined" !== typeof JSON) try {
                    arg = JSON.stringify(arg);
                } catch (Exception) {}
                message += "\n" + arg + "\n";
            }
            if (textarea) {
                textarea.value += message + "\n-----\n";
                textarea.scrollTop = textarea.scrollHeight - textarea.clientHeight;
            } else if (!consoleExists) alert(message);
            return true;
        };
        History.getInternetExplorerMajorVersion = function() {
            var result = History.getInternetExplorerMajorVersion.cached = "undefined" !== typeof History.getInternetExplorerMajorVersion.cached ? History.getInternetExplorerMajorVersion.cached : function() {
                var v = 3, div = document.createElement("div"), all = div.getElementsByTagName("i");
                while ((div.innerHTML = "<!--[if gt IE " + ++v + "]><i></i><![endif]-->") && all[0]) ;
                return v > 4 ? v : false;
            }();
            return result;
        };
        History.isInternetExplorer = function() {
            var result = History.isInternetExplorer.cached = "undefined" !== typeof History.isInternetExplorer.cached ? History.isInternetExplorer.cached : Boolean(History.getInternetExplorerMajorVersion());
            return result;
        };
        if (History.options.html4Mode) History.emulated = {
            pushState: true,
            hashChange: true
        }; else History.emulated = {
            pushState: !Boolean(window.history && window.history.pushState && window.history.replaceState && !(/ Mobile\/([1-7][a-z]|(8([abcde]|f(1[0-8]))))/i.test(navigator.userAgent) || /AppleWebKit\/5([0-2]|3[0-2])/i.test(navigator.userAgent))),
            hashChange: Boolean(!("onhashchange" in window || "onhashchange" in document) || History.isInternetExplorer() && History.getInternetExplorerMajorVersion() < 8)
        };
        History.enabled = !History.emulated.pushState;
        History.bugs = {
            setHash: Boolean(!History.emulated.pushState && "Apple Computer, Inc." === navigator.vendor && /AppleWebKit\/5([0-2]|3[0-3])/.test(navigator.userAgent)),
            safariPoll: Boolean(!History.emulated.pushState && "Apple Computer, Inc." === navigator.vendor && /AppleWebKit\/5([0-2]|3[0-3])/.test(navigator.userAgent)),
            ieDoubleCheck: Boolean(History.isInternetExplorer() && History.getInternetExplorerMajorVersion() < 8),
            hashEscape: Boolean(History.isInternetExplorer() && History.getInternetExplorerMajorVersion() < 7)
        };
        History.isEmptyObject = function(obj) {
            for (var name in obj) if (obj.hasOwnProperty(name)) return false;
            return true;
        };
        History.cloneObject = function(obj) {
            var hash, newObj;
            if (obj) {
                hash = JSON.stringify(obj);
                newObj = JSON.parse(hash);
            } else newObj = {};
            return newObj;
        };
        History.getRootUrl = function() {
            var rootUrl = document.location.protocol + "//" + (document.location.hostname || document.location.host);
            if (document.location.port || false) rootUrl += ":" + document.location.port;
            rootUrl += "/";
            return rootUrl;
        };
        History.getBaseHref = function() {
            var baseElements = document.getElementsByTagName("base"), baseElement = null, baseHref = "";
            if (1 === baseElements.length) {
                baseElement = baseElements[0];
                baseHref = baseElement.href.replace(/[^\/]+$/, "");
            }
            baseHref = baseHref.replace(/\/+$/, "");
            if (baseHref) baseHref += "/";
            return baseHref;
        };
        History.getBaseUrl = function() {
            var baseUrl = History.getBaseHref() || History.getBasePageUrl() || History.getRootUrl();
            return baseUrl;
        };
        History.getPageUrl = function() {
            var State = History.getState(false, false), stateUrl = (State || {}).url || History.getLocationHref(), pageUrl;
            pageUrl = stateUrl.replace(/\/+$/, "").replace(/[^\/]+$/, function(part, index, string) {
                return /\./.test(part) ? part : part + "/";
            });
            return pageUrl;
        };
        History.getBasePageUrl = function() {
            var basePageUrl = History.getLocationHref().replace(/[#\?].*/, "").replace(/[^\/]+$/, function(part, index, string) {
                return /[^\/]$/.test(part) ? "" : part;
            }).replace(/\/+$/, "") + "/";
            return basePageUrl;
        };
        History.getFullUrl = function(url, allowBaseHref) {
            var fullUrl = url, firstChar = url.substring(0, 1);
            allowBaseHref = "undefined" === typeof allowBaseHref ? true : allowBaseHref;
            if (/[a-z]+\:\/\//.test(url)) ; else if ("/" === firstChar) fullUrl = History.getRootUrl() + url.replace(/^\/+/, ""); else if ("#" === firstChar) fullUrl = History.getPageUrl().replace(/#.*/, "") + url; else if ("?" === firstChar) fullUrl = History.getPageUrl().replace(/[\?#].*/, "") + url; else if (allowBaseHref) fullUrl = History.getBaseUrl() + url.replace(/^(\.\/)+/, ""); else fullUrl = History.getBasePageUrl() + url.replace(/^(\.\/)+/, "");
            return fullUrl.replace(/\#$/, "");
        };
        History.getShortUrl = function(url) {
            var shortUrl = url, baseUrl = History.getBaseUrl(), rootUrl = History.getRootUrl();
            if (History.emulated.pushState) shortUrl = shortUrl.replace(baseUrl, "");
            shortUrl = shortUrl.replace(rootUrl, "/");
            shortUrl = shortUrl.replace(/^(\.\/)+/g, "./").replace(/\#$/, "");
            return shortUrl;
        };
        History.getLocationHref = function(doc) {
            doc = doc || document;
            if (doc.URL === doc.location.href) return doc.location.href;
            if (doc.location.href === decodeURIComponent(doc.URL)) return doc.URL;
            if (doc.location.hash && decodeURIComponent(doc.location.href.replace(/^[^#]+/, "")) === doc.location.hash) return doc.location.href;
            if (doc.URL.indexOf("#") == -1 && doc.location.href.indexOf("#") != -1) return doc.location.href;
            return doc.URL || doc.location.href;
        };
        History.store = {};
        History.idToState = History.idToState || {};
        History.stateToId = History.stateToId || {};
        History.urlToId = History.urlToId || {};
        History.storedStates = History.storedStates || [];
        History.savedStates = History.savedStates || [];
        History.normalizeStore = function() {
            History.store.idToState = History.store.idToState || {};
            History.store.urlToId = History.store.urlToId || {};
            History.store.stateToId = History.store.stateToId || {};
        };
        History.getState = function(friendly, create) {
            if ("undefined" === typeof friendly) friendly = true;
            if ("undefined" === typeof create) create = true;
            var State = History.getLastSavedState();
            if (!State && create) State = History.createStateObject();
            if (friendly) {
                State = History.cloneObject(State);
                State.url = State.cleanUrl || State.url;
            }
            return State;
        };
        History.getIdByState = function(newState) {
            var id = History.extractId(newState.url), str;
            if (!id) {
                str = History.getStateString(newState);
                if ("undefined" !== typeof History.stateToId[str]) id = History.stateToId[str]; else if ("undefined" !== typeof History.store.stateToId[str]) id = History.store.stateToId[str]; else {
                    while (true) {
                        id = new Date().getTime() + String(Math.random()).replace(/\D/g, "");
                        if ("undefined" === typeof History.idToState[id] && "undefined" === typeof History.store.idToState[id]) break;
                    }
                    History.stateToId[str] = id;
                    History.idToState[id] = newState;
                }
            }
            return id;
        };
        History.normalizeState = function(oldState) {
            var newState, dataNotEmpty;
            if (!oldState || "object" !== typeof oldState) oldState = {};
            if ("undefined" !== typeof oldState.normalized) return oldState;
            if (!oldState.data || "object" !== typeof oldState.data) oldState.data = {};
            newState = {};
            newState.normalized = true;
            newState.title = oldState.title || "";
            newState.url = History.getFullUrl(oldState.url ? oldState.url : History.getLocationHref());
            newState.hash = History.getShortUrl(newState.url);
            newState.data = History.cloneObject(oldState.data);
            newState.id = History.getIdByState(newState);
            newState.cleanUrl = newState.url.replace(/\??\&_suid.*/, "");
            newState.url = newState.cleanUrl;
            dataNotEmpty = !History.isEmptyObject(newState.data);
            if (true || (newState.title || dataNotEmpty) && true !== History.options.disableSuid) {
                newState.hash = History.getShortUrl(newState.url).replace(/\??\&_suid.*/, "");
                if (!/\?/.test(newState.hash)) newState.hash += "?";
                newState.hash += "&_suid=" + newState.id;
            }
            newState.hashedUrl = History.getFullUrl(newState.hash);
            if ((History.emulated.pushState || History.bugs.safariPoll) && History.hasUrlDuplicate(newState)) newState.url = newState.hashedUrl;
            return newState;
        };
        History.createStateObject = function(data, title, url) {
            var State = {
                data: data,
                title: title,
                url: url
            };
            State = History.normalizeState(State);
            return State;
        };
        History.getStateById = function(id) {
            id = String(id);
            var State = History.idToState[id] || History.store.idToState[id] || undefined;
            return State;
        };
        History.getStateString = function(passedState) {
            var State, cleanedState, str;
            State = History.normalizeState(passedState);
            cleanedState = {
                data: State.data,
                title: passedState.title,
                url: passedState.url
            };
            str = JSON.stringify(cleanedState);
            return str;
        };
        History.getStateId = function(passedState) {
            var State, id;
            State = History.normalizeState(passedState);
            id = State.id;
            return id;
        };
        History.getHashByState = function(passedState) {
            var State, hash;
            State = History.normalizeState(passedState);
            hash = State.hash;
            return hash;
        };
        History.extractId = function(url_or_hash) {
            var id, parts, url, tmp;
            if (url_or_hash.indexOf("#") != -1) tmp = url_or_hash.split("#")[0]; else tmp = url_or_hash;
            parts = /(.*)\&_suid=([0-9]+)$/.exec(tmp);
            url = parts ? parts[1] || url_or_hash : url_or_hash;
            id = parts ? String(parts[2] || "") : "";
            return id || false;
        };
        History.isTraditionalAnchor = function(url_or_hash) {
            return false === History.extractId(url_or_hash);
            var isTraditional = !/[\/\?\.]/.test(url_or_hash);
            return isTraditional;
        };
        History.extractState = function(url_or_hash, create) {
            var State = null, id, url;
            create = create || false;
            id = History.extractId(url_or_hash);
            if (id) State = History.getStateById(id);
            if (!State) {
                url = History.getFullUrl(url_or_hash);
                id = History.getIdByUrl(url) || false;
                if (id) State = History.getStateById(id);
                if (!State && create) State = History.createStateObject(null, null, url);
            }
            return State;
        };
        History.getIdByUrl = function(url) {
            var id = History.urlToId[url] || History.store.urlToId[url] || undefined;
            return id;
        };
        History.getLastSavedState = function() {
            return History.savedStates[History.savedStates.length - 1] || undefined;
        };
        History.getLastStoredState = function() {
            return History.storedStates[History.storedStates.length - 1] || undefined;
        };
        History.hasUrlDuplicate = function(newState) {
            var hasDuplicate = false, oldState;
            oldState = History.extractState(newState.url);
            hasDuplicate = oldState && oldState.id !== newState.id;
            return hasDuplicate;
        };
        History.storeState = function(newState) {
            History.urlToId[newState.url] = newState.id;
            History.storedStates.push(History.cloneObject(newState));
            return newState;
        };
        History.isLastSavedState = function(newState) {
            var isLast = false, newId, oldState, oldId;
            if (History.savedStates.length) {
                newId = newState.id;
                oldState = History.getLastSavedState();
                oldId = oldState.id;
                isLast = newId === oldId;
            }
            return isLast;
        };
        History.saveState = function(newState) {
            if (History.isLastSavedState(newState)) return false;
            History.savedStates.push(History.cloneObject(newState));
            return true;
        };
        History.getStateByIndex = function(index) {
            var State = null;
            if ("undefined" === typeof index) State = History.savedStates[History.savedStates.length - 1]; else if (index < 0) State = History.savedStates[History.savedStates.length + index]; else State = History.savedStates[index];
            return State;
        };
        History.getCurrentIndex = function() {
            var index = null;
            if (History.savedStates.length < 1) index = 0; else index = History.savedStates.length - 1;
            return index;
        };
        History.getHash = function(doc) {
            var url = History.getLocationHref(doc), hash;
            hash = History.getHashByUrl(url);
            return hash;
        };
        History.unescapeHash = function(hash) {
            var result = History.normalizeHash(hash);
            result = decodeURIComponent(result);
            return result;
        };
        History.normalizeHash = function(hash) {
            var result = hash.replace(/[^#]*#/, "").replace(/#.*/, "");
            return result;
        };
        History.setHash = function(hash, queue) {
            var State, pageUrl;
            if (false !== queue && History.busy()) {
                History.pushQueue({
                    scope: History,
                    callback: History.setHash,
                    args: arguments,
                    queue: queue
                });
                return false;
            }
            History.busy(true);
            State = History.extractState(hash, true);
            if (State && !History.emulated.pushState) History.pushState(State.data, State.title, State.url, false); else if (History.getHash() !== hash) if (History.bugs.setHash) {
                pageUrl = History.getPageUrl();
                History.pushState(null, null, pageUrl + "#" + hash, false);
            } else document.location.hash = hash;
            return History;
        };
        History.escapeHash = function(hash) {
            var result = History.normalizeHash(hash);
            result = window.encodeURIComponent(result);
            if (!History.bugs.hashEscape) result = result.replace(/\%21/g, "!").replace(/\%26/g, "&").replace(/\%3D/g, "=").replace(/\%3F/g, "?");
            return result;
        };
        History.getHashByUrl = function(url) {
            var hash = String(url).replace(/([^#]*)#?([^#]*)#?(.*)/, "$2");
            hash = History.unescapeHash(hash);
            return hash;
        };
        History.setTitle = function(newState) {
            var title = newState.title, firstState;
            if (!title) {
                firstState = History.getStateByIndex(0);
                if (firstState && firstState.url === newState.url) title = firstState.title || History.options.initialTitle;
            }
            try {
                document.getElementsByTagName("title")[0].innerHTML = title.replace("<", "&lt;").replace(">", "&gt;").replace(" & ", " &amp; ");
            } catch (Exception) {}
            document.title = title;
            return History;
        };
        History.queues = [];
        History.busy = function(value) {
            if ("undefined" !== typeof value) History.busy.flag = value; else if ("undefined" === typeof History.busy.flag) History.busy.flag = false;
            if (!History.busy.flag) {
                clearTimeout(History.busy.timeout);
                var fireNext = function() {
                    var i, queue, item;
                    if (History.busy.flag) return;
                    for (i = History.queues.length - 1; i >= 0; --i) {
                        queue = History.queues[i];
                        if (0 === queue.length) continue;
                        item = queue.shift();
                        History.fireQueueItem(item);
                        History.busy.timeout = setTimeout(fireNext, History.options.busyDelay);
                    }
                };
                History.busy.timeout = setTimeout(fireNext, History.options.busyDelay);
            }
            return History.busy.flag;
        };
        History.busy.flag = false;
        History.fireQueueItem = function(item) {
            return item.callback.apply(item.scope || History, item.args || []);
        };
        History.pushQueue = function(item) {
            History.queues[item.queue || 0] = History.queues[item.queue || 0] || [];
            History.queues[item.queue || 0].push(item);
            return History;
        };
        History.queue = function(item, queue) {
            if ("function" === typeof item) item = {
                callback: item
            };
            if ("undefined" !== typeof queue) item.queue = queue;
            if (History.busy()) History.pushQueue(item); else History.fireQueueItem(item);
            return History;
        };
        History.clearQueue = function() {
            History.busy.flag = false;
            History.queues = [];
            return History;
        };
        History.stateChanged = false;
        History.doubleChecker = false;
        History.doubleCheckComplete = function() {
            History.stateChanged = true;
            History.doubleCheckClear();
            return History;
        };
        History.doubleCheckClear = function() {
            if (History.doubleChecker) {
                clearTimeout(History.doubleChecker);
                History.doubleChecker = false;
            }
            return History;
        };
        History.doubleCheck = function(tryAgain) {
            History.stateChanged = false;
            History.doubleCheckClear();
            if (History.bugs.ieDoubleCheck) History.doubleChecker = setTimeout(function() {
                History.doubleCheckClear();
                if (!History.stateChanged) tryAgain();
                return true;
            }, History.options.doubleCheckInterval);
            return History;
        };
        History.safariStatePoll = function() {
            var urlState = History.extractState(History.getLocationHref()), newState;
            if (!History.isLastSavedState(urlState)) newState = urlState; else return;
            if (!newState) newState = History.createStateObject();
            History.Adapter.trigger(window, "popstate");
            return History;
        };
        History.back = function(queue) {
            if (false !== queue && History.busy()) {
                History.pushQueue({
                    scope: History,
                    callback: History.back,
                    args: arguments,
                    queue: queue
                });
                return false;
            }
            History.busy(true);
            History.doubleCheck(function() {
                History.back(false);
            });
            history.go(-1);
            return true;
        };
        History.forward = function(queue) {
            if (false !== queue && History.busy()) {
                History.pushQueue({
                    scope: History,
                    callback: History.forward,
                    args: arguments,
                    queue: queue
                });
                return false;
            }
            History.busy(true);
            History.doubleCheck(function() {
                History.forward(false);
            });
            history.go(1);
            return true;
        };
        History.go = function(index, queue) {
            var i;
            if (index > 0) for (i = 1; i <= index; ++i) History.forward(queue); else if (index < 0) for (i = -1; i >= index; --i) History.back(queue); else throw new Error("History.go: History.go requires a positive or negative integer passed.");
            return History;
        };
        if (History.emulated.pushState) {
            var emptyFunction = function() {};
            History.pushState = History.pushState || emptyFunction;
            History.replaceState = History.replaceState || emptyFunction;
        } else {
            History.onPopState = function(event, extra) {
                var stateId = false, newState = false, currentHash, currentState;
                History.doubleCheckComplete();
                currentHash = History.getHash();
                if (currentHash) {
                    if (!History.isTraditionalAnchor(currentHash)) currentState = History.extractState(currentHash, true);
                    if (currentState) History.replaceState(currentState.data, currentState.title, currentState.url, false); else {
                        History.Adapter.trigger(window, "anchorchange");
                        History.busy(false);
                    }
                    History.expectedStateId = false;
                    return false;
                }
                stateId = History.Adapter.extractEventData("state", event, extra) || false;
                if (stateId) newState = History.getStateById(stateId); else if (History.expectedStateId) newState = History.getStateById(History.expectedStateId); else newState = History.extractState(History.getLocationHref());
                if (!newState) newState = History.createStateObject(null, null, History.getLocationHref());
                History.expectedStateId = false;
                if (History.isLastSavedState(newState)) {
                    History.busy(false);
                    return false;
                }
                History.storeState(newState);
                History.saveState(newState);
                History.setTitle(newState);
                History.Adapter.trigger(window, "statechange");
                History.busy(false);
                return true;
            };
            History.Adapter.bind(window, "popstate", History.onPopState);
            History.pushState = function(data, title, url, queue) {
                if (History.getHashByUrl(url) && History.emulated.pushState) throw new Error("History.js does not support states with fragement-identifiers (hashes/anchors).");
                if (false !== queue && History.busy()) {
                    History.pushQueue({
                        scope: History,
                        callback: History.pushState,
                        args: arguments,
                        queue: queue
                    });
                    return false;
                }
                History.busy(true);
                var newState = History.createStateObject(data, title, url);
                if (History.isLastSavedState(newState)) History.busy(false); else {
                    History.storeState(newState);
                    History.expectedStateId = newState.id;
                    history.pushState(newState.id, newState.title, newState.url);
                    History.Adapter.trigger(window, "popstate");
                }
                return true;
            };
            History.replaceState = function(data, title, url, queue) {
                if (History.getHashByUrl(url) && History.emulated.pushState) throw new Error("History.js does not support states with fragement-identifiers (hashes/anchors).");
                if (false !== queue && History.busy()) {
                    History.pushQueue({
                        scope: History,
                        callback: History.replaceState,
                        args: arguments,
                        queue: queue
                    });
                    return false;
                }
                History.busy(true);
                var newState = History.createStateObject(data, title, url);
                if (History.isLastSavedState(newState)) History.busy(false); else {
                    History.storeState(newState);
                    History.expectedStateId = newState.id;
                    history.replaceState(newState.id, newState.title, newState.url);
                    History.Adapter.trigger(window, "popstate");
                }
                return true;
            };
        }
        if (sessionStorage) {
            try {
                History.store = JSON.parse(sessionStorage.getItem("History.store")) || {};
            } catch (err) {
                History.store = {};
            }
            History.normalizeStore();
        } else {
            History.store = {};
            History.normalizeStore();
        }
        History.Adapter.bind(window, "unload", History.clearAllIntervals);
        History.saveState(History.storeState(History.extractState(History.getLocationHref(), true)));
        if (sessionStorage) {
            History.onUnload = function() {
                var currentStore, item, currentStoreString;
                try {
                    currentStore = JSON.parse(sessionStorage.getItem("History.store")) || {};
                } catch (err) {
                    currentStore = {};
                }
                currentStore.idToState = currentStore.idToState || {};
                currentStore.urlToId = currentStore.urlToId || {};
                currentStore.stateToId = currentStore.stateToId || {};
                for (item in History.idToState) {
                    if (!History.idToState.hasOwnProperty(item)) continue;
                    currentStore.idToState[item] = History.idToState[item];
                }
                for (item in History.urlToId) {
                    if (!History.urlToId.hasOwnProperty(item)) continue;
                    currentStore.urlToId[item] = History.urlToId[item];
                }
                for (item in History.stateToId) {
                    if (!History.stateToId.hasOwnProperty(item)) continue;
                    currentStore.stateToId[item] = History.stateToId[item];
                }
                History.store = currentStore;
                History.normalizeStore();
                currentStoreString = JSON.stringify(currentStore);
                try {
                    sessionStorage.setItem("History.store", currentStoreString);
                } catch (e) {
                    if (e.code === DOMException.QUOTA_EXCEEDED_ERR) if (sessionStorage.length) {
                        sessionStorage.removeItem("History.store");
                        sessionStorage.setItem("History.store", currentStoreString);
                    } else ; else throw e;
                }
            };
            History.intervalList.push(setInterval(History.onUnload, History.options.storeInterval));
            History.Adapter.bind(window, "beforeunload", History.onUnload);
            History.Adapter.bind(window, "unload", History.onUnload);
        }
        if (!History.emulated.pushState) {
            if (History.bugs.safariPoll) History.intervalList.push(setInterval(History.safariStatePoll, History.options.safariPollInterval));
            if ("Apple Computer, Inc." === navigator.vendor || "Mozilla" === (navigator.appCodeName || "")) {
                History.Adapter.bind(window, "hashchange", function() {
                    History.Adapter.trigger(window, "popstate");
                });
                if (History.getHash()) History.Adapter.onDomLoad(function() {
                    History.Adapter.trigger(window, "hashchange");
                });
            }
        }
    };
    if (!History.options || !History.options.delayInit) History.init();
})(window);

(function($) {
    $.fn.mask = function(elems) {
        var CLASS = "mask";
        $("." + CLASS).remove();
        if (false === elems) return this; else if ("string" !== typeof elems) elems = $(elems);
        return this.each(function() {
            var container = $(this), containerDims = $.mask.getDims(container), myElems = elems, maskDimsList = [ containerDims ], nextMaskDimsList = [];
            if ("string" === typeof myElems) myElems = container.find(myElems);
            myElems.each(function() {
                var dims = $.mask.getDims(this);
                $.each(maskDimsList, function() {
                    nextMaskDimsList = $.merge(nextMaskDimsList, $.mask.getMaskDimsList(this, dims));
                });
                maskDimsList = nextMaskDimsList;
                nextMaskDimsList = [];
            });
            $.each(maskDimsList, function() {
                $("<div>").css(this).addClass(CLASS).appendTo($("body"));
            });
        });
    };
    $.mask = {};
    $.mask.getDims = function(elem) {
        elem = $(elem);
        var dims = elem.offset();
        if (!dims) dims = {
            top: 0,
            left: 0
        };
        dims.height = elem.outerHeight();
        dims.width = elem.outerWidth();
        return dims;
    };
    $.mask.intersectDims = function(containerDims, elemDims) {
        var top = elemDims.top, left = elemDims.left, height = elemDims.height, width = elemDims.width, newObj = false;
        if (top < containerDims.top) {
            height -= containerDims.top - top;
            top = containerDims.top;
            newObj = true;
        }
        if (left < containerDims.left) {
            width -= containerDims.left - left;
            left = containerDims.left;
            newObj = true;
        }
        if (top + height > containerDims.top + containerDims.height) {
            height -= top + height - (containerDims.top + containerDims.height);
            newObj = true;
        }
        if (left + width > containerDims.left + containerDims.width) {
            width -= left + width - (containerDims.left + containerDims.width);
            newObj = true;
        }
        if (newObj) return {
            top: top,
            left: left,
            height: height,
            width: width
        };
        return elemDims;
    };
    $.mask.dimsOverlap = function(dims1, dims2) {
        return !(dims2.top + dims2.height <= dims1.top || dims1.top + dims1.height <= dims2.top || dims2.left + dims2.width <= dims1.left || dims1.left + dims1.width <= dims2.left);
    };
    $.mask.getMaskDimsList = function(containerDims, dims) {
        if (!$.mask.dimsOverlap(containerDims, dims)) return [ containerDims ];
        dims = $.mask.intersectDims(containerDims, dims);
        var maskDimsList = [ {
            top: containerDims.top,
            left: containerDims.left,
            height: dims.top - containerDims.top,
            width: dims.left + dims.width - containerDims.left
        }, {
            top: containerDims.top,
            left: dims.left + dims.width,
            height: dims.top + dims.height - containerDims.top,
            width: containerDims.left + containerDims.width - (dims.left + dims.width)
        }, {
            top: dims.top + dims.height,
            left: dims.left,
            height: containerDims.top + containerDims.height - (dims.top + dims.height),
            width: containerDims.left + containerDims.width - dims.left
        }, {
            top: dims.top,
            left: containerDims.left,
            height: containerDims.top + containerDims.height - dims.top,
            width: dims.left - containerDims.left
        } ];
        return $.grep(maskDimsList, function(d) {
            return d.height > 0 && d.width > 0;
        });
    };
})(jQuery);

(function(window, document, $) {
    var isInputSupported = "placeholder" in document.createElement("input"), isTextareaSupported = "placeholder" in document.createElement("textarea"), valHooks = $.valHooks, hooks, placeholder;
    if (isInputSupported && isTextareaSupported) {
        placeholder = $.fn.placeholder = function() {
            return this;
        };
        placeholder.input = placeholder.textarea = true;
    } else {
        placeholder = $.fn.placeholder = function() {
            var $this = this;
            $this.filter((isInputSupported ? "textarea" : ":input") + "[placeholder]").not(".placeholder").bind({
                "focus.placeholder": clearPlaceholder,
                "blur.placeholder": setPlaceholder
            }).data("placeholder-enabled", true).trigger("blur.placeholder");
            return $this;
        };
        placeholder.input = isInputSupported;
        placeholder.textarea = isTextareaSupported;
        hooks = {
            get: function(element) {
                var $element = $(element);
                return $element.data("placeholder-enabled") && $element.hasClass("placeholder") ? "" : element.value;
            },
            set: function(element, value) {
                var $element = $(element);
                if (!$element.data("placeholder-enabled")) return element.value = value;
                if ("" == value) {
                    element.value = value;
                    if (element != document.activeElement) setPlaceholder.call(element);
                } else if ($element.hasClass("placeholder")) clearPlaceholder.call(element, true, value) || (element.value = value); else element.value = value;
                return $element;
            }
        };
        isInputSupported || (valHooks.input = hooks);
        isTextareaSupported || (valHooks.textarea = hooks);
        $(function() {
            $(document).delegate("form", "submit.placeholder", function() {
                var $inputs = $(".placeholder", this).each(clearPlaceholder);
                setTimeout(function() {
                    $inputs.each(setPlaceholder);
                }, 10);
            });
        });
        $(window).bind("beforeunload.placeholder", function() {
            $(".placeholder").each(function() {
                this.value = "";
            });
        });
    }
    function args(elem) {
        var newAttrs = {}, rinlinejQuery = /^jQuery\d+$/;
        $.each(elem.attributes, function(i, attr) {
            if (attr.specified && !rinlinejQuery.test(attr.name)) newAttrs[attr.name] = attr.value;
        });
        return newAttrs;
    }
    function clearPlaceholder(event, value) {
        var input = this, $input = $(input);
        if (input.value == $input.attr("placeholder") && $input.hasClass("placeholder")) if ($input.data("placeholder-password")) {
            $input = $input.hide().next().show().attr("id", $input.removeAttr("id").data("placeholder-id"));
            if (true === event) return $input[0].value = value;
            $input.focus();
        } else {
            input.value = "";
            $input.removeClass("placeholder");
            input == document.activeElement && input.select();
        }
    }
    function setPlaceholder() {
        var $replacement, input = this, $input = $(input), $origInput = $input, id = this.id;
        if ("" == input.value) {
            if ("password" == input.type) {
                if (!$input.data("placeholder-textinput")) {
                    try {
                        $replacement = $input.clone().attr({
                            type: "text"
                        });
                    } catch (e) {
                        $replacement = $("<input>").attr($.extend(args(this), {
                            type: "text"
                        }));
                    }
                    $replacement.removeAttr("name").data({
                        "placeholder-password": true,
                        "placeholder-id": id
                    }).bind("focus.placeholder", clearPlaceholder);
                    $input.data({
                        "placeholder-textinput": $replacement,
                        "placeholder-id": id
                    }).before($replacement);
                }
                $input = $input.removeAttr("id").hide().prev().attr("id", id).show();
            }
            $input.addClass("placeholder");
            $input[0].value = $input.attr("placeholder");
        } else $input.removeClass("placeholder");
    }
})(this, document, jQuery);

(function($) {
    $.timeago = function(timestamp) {
        if (timestamp instanceof Date) return inWords(timestamp); else if ("string" === typeof timestamp) return inWords($.timeago.parse(timestamp)); else if ("number" === typeof timestamp) return inWords(new Date(timestamp)); else return inWords($.timeago.datetime(timestamp));
    };
    var $t = $.timeago;
    $.extend($.timeago, {
        settings: {
            refreshMillis: 6e4,
            allowFuture: false,
            strings: {
                prefixAgo: null,
                prefixFromNow: null,
                suffixAgo: "ago",
                suffixFromNow: "from now",
                seconds: "less than a minute",
                minute: "about a minute",
                minutes: "%d minutes",
                hour: "about an hour",
                hours: "about %d hours",
                day: "a day",
                days: "%d days",
                month: "about a month",
                months: "%d months",
                year: "about a year",
                years: "%d years",
                wordSeparator: " ",
                numbers: []
            }
        },
        inWords: function(distanceMillis) {
            var $l = this.settings.strings;
            var prefix = $l.prefixAgo;
            var suffix = $l.suffixAgo;
            if (this.settings.allowFuture) if (distanceMillis < 0) {
                prefix = $l.prefixFromNow;
                suffix = $l.suffixFromNow;
            }
            var seconds = Math.abs(distanceMillis) / 1e3;
            var minutes = seconds / 60;
            var hours = minutes / 60;
            var days = hours / 24;
            var years = days / 365;
            function substitute(stringOrFunction, number) {
                var string = $.isFunction(stringOrFunction) ? stringOrFunction(number, distanceMillis) : stringOrFunction;
                var value = $l.numbers && $l.numbers[number] || number;
                return string.replace(/%d/i, value);
            }
            var words = seconds < 45 && substitute($l.seconds, Math.round(seconds)) || seconds < 90 && substitute($l.minute, 1) || minutes < 45 && substitute($l.minutes, Math.round(minutes)) || minutes < 90 && substitute($l.hour, 1) || hours < 24 && substitute($l.hours, Math.round(hours)) || hours < 42 && substitute($l.day, 1) || days < 30 && substitute($l.days, Math.round(days)) || days < 45 && substitute($l.month, 1) || days < 365 && substitute($l.months, Math.round(days / 30)) || years < 1.5 && substitute($l.year, 1) || substitute($l.years, Math.round(years));
            var separator = void 0 === $l.wordSeparator ? " " : $l.wordSeparator;
            return $.trim([ prefix, words, suffix ].join(separator));
        },
        parse: function(iso8601) {
            var s = $.trim(iso8601);
            s = s.replace(/\.\d+/, "");
            s = s.replace(/-/, "/").replace(/-/, "/");
            s = s.replace(/T/, " ").replace(/Z/, " UTC");
            s = s.replace(/([\+\-]\d\d)\:?(\d\d)/, " $1$2");
            return new Date(s);
        },
        datetime: function(elem) {
            var iso8601 = $t.isTime(elem) ? $(elem).attr("datetime") : $(elem).attr("title");
            return $t.parse(iso8601);
        },
        isTime: function(elem) {
            return "time" === $(elem).get(0).tagName.toLowerCase();
        }
    });
    $.fn.timeago = function() {
        var self = this;
        self.each(refresh);
        var $s = $t.settings;
        if ($s.refreshMillis > 0) setInterval(function() {
            self.each(refresh);
        }, $s.refreshMillis);
        return self;
    };
    function refresh() {
        var data = prepareData(this);
        if (!isNaN(data.datetime)) $(this).text(inWords(data.datetime));
        return this;
    }
    function prepareData(element) {
        element = $(element);
        if (!element.data("timeago")) {
            element.data("timeago", {
                datetime: $t.datetime(element)
            });
            var text = $.trim(element.text());
            if (text.length > 0 && !($t.isTime(element) && element.attr("title"))) element.attr("title", text);
        }
        return element.data("timeago");
    }
    function inWords(date) {
        return $t.inWords(distance(date));
    }
    function distance(date) {
        return new Date().getTime() - date.getTime();
    }
    document.createElement("abbr");
    document.createElement("time");
})(jQuery);

var Kicksend = {
    mailcheck: {
        threshold: 3,
        defaultDomains: [ "yahoo.com", "google.com", "hotmail.com", "gmail.com", "me.com", "aol.com", "mac.com", "live.com", "comcast.net", "googlemail.com", "msn.com", "hotmail.co.uk", "yahoo.co.uk", "facebook.com", "verizon.net", "sbcglobal.net", "att.net", "gmx.com", "mail.com" ],
        defaultTopLevelDomains: [ "co.uk", "com", "net", "org", "info", "edu", "gov", "mil" ],
        run: function(opts) {
            opts.domains = opts.domains || Kicksend.mailcheck.defaultDomains;
            opts.topLevelDomains = opts.topLevelDomains || Kicksend.mailcheck.defaultTopLevelDomains;
            opts.distanceFunction = opts.distanceFunction || Kicksend.sift3Distance;
            var result = Kicksend.mailcheck.suggest(encodeURI(opts.email), opts.domains, opts.topLevelDomains, opts.distanceFunction);
            if (result) {
                if (opts.suggested) opts.suggested(result);
            } else if (opts.empty) opts.empty();
        },
        suggest: function(email, domains, topLevelDomains, distanceFunction) {
            email = email.toLowerCase();
            var emailParts = this.splitEmail(email);
            var closestDomain = this.findClosestDomain(emailParts.domain, domains, distanceFunction);
            if (closestDomain) {
                if (closestDomain != emailParts.domain) return {
                    address: emailParts.address,
                    domain: closestDomain,
                    full: emailParts.address + "@" + closestDomain
                };
            } else {
                var closestTopLevelDomain = this.findClosestDomain(emailParts.topLevelDomain, topLevelDomains);
                if (emailParts.domain && closestTopLevelDomain && closestTopLevelDomain != emailParts.topLevelDomain) {
                    var domain = emailParts.domain;
                    closestDomain = domain.substring(0, domain.lastIndexOf(emailParts.topLevelDomain)) + closestTopLevelDomain;
                    return {
                        address: emailParts.address,
                        domain: closestDomain,
                        full: emailParts.address + "@" + closestDomain
                    };
                }
            }
            return false;
        },
        findClosestDomain: function(domain, domains, distanceFunction) {
            var dist;
            var minDist = 99;
            var closestDomain = null;
            if (!domain || !domains) return false;
            if (!distanceFunction) distanceFunction = this.sift3Distance;
            for (var i = 0; i < domains.length; i++) {
                if (domain === domains[i]) return domain;
                dist = distanceFunction(domain, domains[i]);
                if (dist < minDist) {
                    minDist = dist;
                    closestDomain = domains[i];
                }
            }
            if (minDist <= this.threshold && null !== closestDomain) return closestDomain; else return false;
        },
        sift3Distance: function(s1, s2) {
            if (null == s1 || 0 === s1.length) if (null == s2 || 0 === s2.length) return 0; else return s2.length;
            if (null == s2 || 0 === s2.length) return s1.length;
            var c = 0;
            var offset1 = 0;
            var offset2 = 0;
            var lcs = 0;
            var maxOffset = 5;
            while (c + offset1 < s1.length && c + offset2 < s2.length) {
                if (s1.charAt(c + offset1) == s2.charAt(c + offset2)) lcs++; else {
                    offset1 = 0;
                    offset2 = 0;
                    for (var i = 0; i < maxOffset; i++) {
                        if (c + i < s1.length && s1.charAt(c + i) == s2.charAt(c)) {
                            offset1 = i;
                            break;
                        }
                        if (c + i < s2.length && s1.charAt(c) == s2.charAt(c + i)) {
                            offset2 = i;
                            break;
                        }
                    }
                }
                c++;
            }
            return (s1.length + s2.length) / 2 - lcs;
        },
        splitEmail: function(email) {
            var parts = email.split("@");
            if (parts.length < 2) return false;
            for (var i = 0; i < parts.length; i++) if ("" === parts[i]) return false;
            var domain = parts.pop();
            var domainParts = domain.split(".");
            var tld = "";
            if (0 == domainParts.length) return false; else if (1 == domainParts.length) tld = domainParts[0]; else {
                for (var i = 1; i < domainParts.length; i++) tld += domainParts[i] + ".";
                if (domainParts.length >= 2) tld = tld.substring(0, tld.length - 1);
            }
            return {
                topLevelDomain: tld,
                domain: domain,
                address: parts.join("@")
            };
        }
    }
};

if (window.jQuery) (function($) {
    $.fn.mailcheck = function(opts) {
        var self = this;
        if (opts.suggested) {
            var oldSuggested = opts.suggested;
            opts.suggested = function(result) {
                oldSuggested(self, result);
            };
        }
        if (opts.empty) {
            var oldEmpty = opts.empty;
            opts.empty = function() {
                oldEmpty.call(null, self);
            };
        }
        opts.email = this.val();
        Kicksend.mailcheck.run(opts);
    };
})(jQuery);

var hexcase = 0;

var b64pad = "";

var chrsz = 8;

function hex_md5(s) {
    return binl2hex(core_md5(str2binl(s), s.length * chrsz));
}

function b64_md5(s) {
    return binl2b64(core_md5(str2binl(s), s.length * chrsz));
}

function str_md5(s) {
    return binl2str(core_md5(str2binl(s), s.length * chrsz));
}

function hex_hmac_md5(key, data) {
    return binl2hex(core_hmac_md5(key, data));
}

function b64_hmac_md5(key, data) {
    return binl2b64(core_hmac_md5(key, data));
}

function str_hmac_md5(key, data) {
    return binl2str(core_hmac_md5(key, data));
}

function md5_vm_test() {
    return "900150983cd24fb0d6963f7d28e17f72" == hex_md5("abc");
}

function core_md5(x, len) {
    x[len >> 5] |= 128 << len % 32;
    x[(len + 64 >>> 9 << 4) + 14] = len;
    var a = 1732584193;
    var b = -271733879;
    var c = -1732584194;
    var d = 271733878;
    for (var i = 0; i < x.length; i += 16) {
        var olda = a;
        var oldb = b;
        var oldc = c;
        var oldd = d;
        a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);
        d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);
        c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);
        b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);
        a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);
        d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);
        c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);
        b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);
        a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);
        d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);
        c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);
        b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
        a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);
        d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
        c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
        b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);
        a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);
        d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);
        c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);
        b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);
        a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);
        d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);
        c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
        b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);
        a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);
        d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);
        c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);
        b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);
        a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);
        d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);
        c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);
        b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);
        a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);
        d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);
        c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);
        b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
        a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);
        d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);
        c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);
        b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
        a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);
        d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);
        c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);
        b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);
        a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);
        d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
        c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);
        b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);
        a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);
        d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);
        c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
        b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);
        a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);
        d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);
        c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
        b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);
        a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);
        d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
        c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);
        b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);
        a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);
        d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
        c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);
        b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);
        a = safe_add(a, olda);
        b = safe_add(b, oldb);
        c = safe_add(c, oldc);
        d = safe_add(d, oldd);
    }
    return Array(a, b, c, d);
}

function md5_cmn(q, a, b, x, s, t) {
    return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);
}

function md5_ff(a, b, c, d, x, s, t) {
    return md5_cmn(b & c | ~b & d, a, b, x, s, t);
}

function md5_gg(a, b, c, d, x, s, t) {
    return md5_cmn(b & d | c & ~d, a, b, x, s, t);
}

function md5_hh(a, b, c, d, x, s, t) {
    return md5_cmn(b ^ c ^ d, a, b, x, s, t);
}

function md5_ii(a, b, c, d, x, s, t) {
    return md5_cmn(c ^ (b | ~d), a, b, x, s, t);
}

function core_hmac_md5(key, data) {
    var bkey = str2binl(key);
    if (bkey.length > 16) bkey = core_md5(bkey, key.length * chrsz);
    var ipad = Array(16), opad = Array(16);
    for (var i = 0; i < 16; i++) {
        ipad[i] = 909522486 ^ bkey[i];
        opad[i] = 1549556828 ^ bkey[i];
    }
    var hash = core_md5(ipad.concat(str2binl(data)), 512 + data.length * chrsz);
    return core_md5(opad.concat(hash), 512 + 128);
}

function safe_add(x, y) {
    var lsw = (65535 & x) + (65535 & y);
    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
    return msw << 16 | 65535 & lsw;
}

function bit_rol(num, cnt) {
    return num << cnt | num >>> 32 - cnt;
}

function str2binl(str) {
    var bin = Array();
    var mask = (1 << chrsz) - 1;
    for (var i = 0; i < str.length * chrsz; i += chrsz) bin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << i % 32;
    return bin;
}

function binl2str(bin) {
    var str = "";
    var mask = (1 << chrsz) - 1;
    for (var i = 0; i < 32 * bin.length; i += chrsz) str += String.fromCharCode(bin[i >> 5] >>> i % 32 & mask);
    return str;
}

function binl2hex(binarray) {
    var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
    var str = "";
    for (var i = 0; i < 4 * binarray.length; i++) str += hex_tab.charAt(15 & binarray[i >> 2] >> 8 * (i % 4) + 4) + hex_tab.charAt(15 & binarray[i >> 2] >> 8 * (i % 4));
    return str;
}

function binl2b64(binarray) {
    var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    var str = "";
    for (var i = 0; i < 4 * binarray.length; i += 3) {
        var triplet = (255 & binarray[i >> 2] >> 8 * (i % 4)) << 16 | (255 & binarray[i + 1 >> 2] >> 8 * ((i + 1) % 4)) << 8 | 255 & binarray[i + 2 >> 2] >> 8 * ((i + 2) % 4);
        for (var j = 0; j < 4; j++) if (8 * i + 6 * j > 32 * binarray.length) str += b64pad; else str += tab.charAt(63 & triplet >> 6 * (3 - j));
    }
    return str;
}

ws.namespace("ws.common");

ws.common = function($, undefined) {
    var preventMenuClose = false;
    var ajaxQueue = {};
    $(document).ready(function() {
        $("input, textarea").placeholder();
        $(document).on("click", "a.userLink:not(.userLinkNoMenu)", ws.common.makeLinkClickFunction(ws.common.userLinkClick));
        ws.common.loadMenuHandlers();
        $("textarea.autogrow").autogrow();
        $("body").click(function(event) {
            $(".userMenu").remove();
        });
        $(".wsbtn, .btn").one("submit", function() {
            $(this).click(function() {
                return false;
            });
        });
        if ($.browser.msie && "diff" != wikispaces_method) if (7 == $.browser.version) $(".wiki a[name]").css("display", "inline-block"); else if (8 == $.browser.version) $(".wiki a[name]").html("&zwj;");
        $("form").submit(function() {
            $(this).find(".wsh, .jowic, .movkp, .mimw, .jovise").find('input[name="wikispaces_user_id"]').val("");
            $(this).find($(this).data("onSubmitShow")).show();
            $(this).find($(this).data("onSubmitHide")).hide();
        });
        if ($("#WikispacesBanner").length) setTimeout(function() {
            ws.common.displayBanner(true);
        }, 1e3);
        $(".WikispacesNoticeDismiss").click(function() {
            $(this).closest(".WikispacesNotice").fadeOut();
        });
        $(".WikiAddContentBar .ws-tip").tooltip({
            container: $("body"),
            placement: "bottom"
        });
        ws.math.process();
        $('.WikispacesContent input[type="email"]').one("blur", function() {
            $(this).mailcheck({
                suggested: function(element, suggestion) {
                    jQuery(".mailcheck").remove();
                    var $div = $("<div/>").addClass("mailcheck");
                    var $a = $("<a>").click(function(e) {
                        jQuery(element).val(suggestion.full);
                        jQuery(".mailcheck").remove();
                        e.preventDefault();
                    }).html(suggestion.full);
                    $div.append("Did you mean ").append($a).append("? ").append($("<a/>").text("(dismiss)").on("click", function() {
                        $(this).closest(".mailcheck").remove();
                    }));
                    jQuery("#mailcheck-placeholder").css("visibility", "visible").find("a").replaceWith($div);
                },
                empty: function(element) {
                    jQuery(".mailcheck").remove();
                }
            });
        });
        setTimeout(function() {
            $("#WikispacesNoticeHolder .WikispacesNoticeSuccess").fadeOut();
        }, 3e4);
    });
    window.onload = function() {
        if (window.performance && window.performance.timing) {
            var ntStats = getPerfStats();
            _gaq = _gaq || [];
            _gaq.push([ "_setAccount", wsGoogleAccount ]);
            _gaq.push([ "_trackEvent", "Navigation Timing", "DNS", undefined, ntStats.dns, true ]);
            _gaq.push([ "_trackEvent", "Navigation Timing", "Connect", undefined, ntStats.connect, true ]);
            _gaq.push([ "_trackEvent", "Navigation Timing", "TTFB", undefined, ntStats.ttfb, true ]);
            _gaq.push([ "_trackEvent", "Navigation Timing", "BasePage", undefined, ntStats.basePage, true ]);
            _gaq.push([ "_trackEvent", "Navigation Timing", "FrontEnd", undefined, ntStats.frontEnd, true ]);
        }
    };
    function getProjectUrl() {
        if (wikispaces_isDefaultSpace) return "";
        return "/" + ws.common.encodePath(ws.common.PROJECT_INDICATOR, wikispaces_projectName, wikispaces_spaceName);
    }
    function fullTeamPath(project, space, object, method, page, id) {
        return "/" + ws.common.PROJECT_INDICATOR + "/" + ws.common.encodePath(project, space, object, method, page, id);
    }
    function relativePath(object, method, page, id) {
        return "/" + ws.common.encodePath(object, method, page, id);
    }
    function showMenu(element) {
        $(".WikiMenu").not($(element).next()).removeClass("WikiMenuEnabled").addClass("WikiMenuDisabled");
        $(element).removeClass("WikiMenuDisabled").addClass("WikiMenuEnabled");
        ws.common.hideOverlappingEmbeds($(element).find("ul"));
        return false;
    }
    function hideMenu(element) {
        if (!preventMenuClose && $(".WikiMenuEnabled").length) {
            $(element).addClass("WikiMenuDisabled").removeClass("WikiMenuEnabled");
            ws.common.hideOverlappingEmbeds($(element).find("ul"));
        }
    }
    function getPerfStats() {
        var timing = window.performance.timing;
        return {
            dns: timing.domainLookupEnd - timing.domainLookupStart,
            connect: timing.connectEnd - timing.connectStart,
            ttfb: timing.responseStart - timing.connectEnd,
            basePage: timing.responseEnd - timing.responseStart,
            frontEnd: timing.loadEventStart - timing.responseEnd
        };
    }
    return {
        PROJECT_INDICATOR: "-",
        highlightColor: "#FFC",
        single_page_regex: /^([:\/]?)([^:\/]+)$/,
        full_link_regex: /^[:\/]?([^:\/]+)[:\/]([^:\/]+)[:\/]([^:\/]+)$/,
        pageNameRegex: /[\[\]:|{}$\"#@+]/,
        projectNameRegex: /[:\[\]\/]/,
        teamNameRegex: /[:\[\]\/]/,
        disableHideOverlappingEmbeds: false,
        isMac: navigator.userAgent.indexOf("Mac") != -1,
        camelize: function(str) {
            var parts = str.split("-"), len = parts.length;
            if (1 == len) return parts[0];
            var camelized = "-" == str.charAt(0) ? parts[0].charAt(0).toUpperCase() + parts[0].substring(1) : parts[0];
            for (var i = 1; i < len; i++) camelized += parts[i].charAt(0).toUpperCase() + parts[i].substring(1);
            return camelized;
        },
        normalizeCssSelector: function(value) {
            if (value == value.toUpperCase()) value = value.toLowerCase();
            return ws.common.camelize(value);
        },
        truncate: function(str, length, ellipsis) {
            return ws.common.truncify(str, length, 0, ellipsis);
        },
        truncify: function(str, length, suffix, ellipsis) {
            if (!str) return "";
            if ("number" !== typeof suffix) suffix = 10;
            if (!ellipsis) ellipsis = "...";
            if (str.length <= length) return str;
            return str.substr(0, length - suffix - ellipsis.length) + ellipsis + str.substr(str.length - suffix);
        },
        addUriParams: function(uri, params) {
            if (!params || !params.length) return uri;
            uri += uri.indexOf("?") == -1 ? "?" : "&";
            var newParams = [];
            for (var i = 0; i < params.length; ++i) if (!_.isUndefined(params[i][1])) newParams.push(encodeURIComponent(params[i][0]) + "=" + encodeURIComponent(params[i][1]));
            return uri + newParams.join("&");
        },
        removeUriParams: function(uri) {
            return uri.match(/^[^\?]*/);
        },
        updateUriParams: function(uri, params) {
            return ws.common.replaceUriParams(uri, _.extend(ws.common.uriParams(uri), params));
        },
        replaceUriParams: function(uri, params) {
            var paramStr = "?" + _(params).chain().map(function(v, k) {
                return null === v ? "" : encodeURIComponent(k) + "=" + encodeURIComponent(v);
            }).compact().value().join("&");
            return uri.match(/.*?(?=\?|$)/)[0] + paramStr;
        },
        uriParams: function(uri) {
            var params = {}, queryStart;
            if ((queryStart = uri.indexOf("?")) >= 0) {
                var query = uri.substring(queryStart + 1);
                var regex = /(.+?)=(.*?)(?:&|;|$)/g, match;
                while (match = regex.exec(query)) params[decodeURIComponent(match[1])] = decodeURIComponent(match[2]);
            }
            return params;
        },
        track: function(a, b, c) {
            _gaq = _gaq || [];
            _gaq.push([ "_trackEvent", a, b, c ]);
        },
        escapeRegExp: function(s) {
            return s.replace(/([.*+?^${}()|[\]\/\\])/g, "\\$1");
        },
        escapeHtml: function escapeHtml(s) {
            return (s || "").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
        },
        strtr: function(s, from, to) {
            var result = "", offset = -1;
            for (var i = 0; i < s.length; i++) if (s.charCodeAt(i) <= 127) result += s.charAt(i); else {
                offset = from.indexOf(s.charAt(i));
                if (offset >= 0) result += to.charAt(offset); else result += s.charAt(i);
            }
            return result;
        },
        encodePath: function() {
            return _(arguments).chain().filter(function(part) {
                return null !== part && part !== undefined && "" !== part;
            }).map(function(part) {
                return encodeURIComponent(part);
            }).value().join("/");
        },
        pathFor: function(object, method, page, id) {
            return getProjectUrl() + "/" + ws.common.encodePath(object, method, page, id);
        },
        parseLink: function(link, object, method) {
            var project = null;
            var space = null;
            var page = null;
            var matches = link.match(ws.common.single_page_regex);
            if (matches) if ("/" != matches[1]) return ws.common.pathFor(object, method, matches[2]); else return relativePath(object, method, matches[2]); else {
                matches = link.match(ws.common.full_link_regex);
                if (matches) return fullTeamPath(matches[1], matches[2], object, method, matches[3]); else return false;
            }
        },
        logFileUploadError: function(err, maxFileSize) {
            var message;
            if (err.file && err.file.name) message = "Could not upload " + err.file.name + ": "; else message = "An error occured while uploading: ";
            if (err.code == plupload.FILE_SIZE_ERROR) message += "the file is larger than your maximum of " + maxFileSize; else if (err.code == plupload.HTTP_ERROR) {
                message += "an HTTP error occurred. (HTTP status: ";
                if (err.status) message += err.status; else message += "unknown";
                message += ")";
            } else message += err.message;
            alert(message + " (code: " + -err.code + ").");
        },
        makeLinkClickFunction: function(func) {
            return function(e) {
                if (!ws.common.isMac && e.ctrlKey || ws.common.isMac && e.originalEvent && e.originalEvent.metaKey || e.shiftKey || 2 == e.which) return;
                if (!func.apply(this, arguments)) {
                    e.preventDefault();
                    return false;
                }
            };
        },
        compareGroupPermissionValues: function(val1, val2) {
            if (val1 == val2) return 0;
            if ("O" == val1) return 1;
            if ("O" == val2) return -1;
            if ("M" == val1) return 1;
            if ("M" == val2) return -1;
            if ("W" == val1) return 1;
            if ("W" == val2) return -1;
            if ("L" == val1) return 1;
            if ("L" == val2) return -1;
        },
        hideOverlappingEmbeds: function(elem) {
            if (ws.common.disableHideOverlappingEmbeds) return;
            elem = $(elem);
            if (!elem.is(":visible")) {
                $(".WikiEmbedSubForPopup").remove();
                $(".WikiHideForPopup").removeClass("WikiHideForPopup");
                return;
            }
            var offset = elem.offset();
            var y1 = offset.top;
            var x1 = offset.left;
            var y2 = y1 + elem.outerHeight();
            var x2 = x1 + elem.outerWidth();
            $("iframe:visible, object:visible, embed:visible, applet:visible").not(elem.find("*")).each(function() {
                var jI = $(this);
                if (!jI.is(":visible")) return;
                if (jI.is("iframe") && ws.common.isSameDomain(jI.attr("src"))) {
                    this.contentWindow.ws.common.hideOverlappingEmbeds(this.contentWindow.document.body);
                    return;
                }
                var iOffset = jI.offset();
                var iY1 = iOffset.top;
                var iX1 = iOffset.left;
                var iX2 = iX1 + jI.outerWidth();
                var iY2 = iY1 + jI.outerHeight();
                jI.find("iframe:visible, object:visible, embed:visible, applet:visible").each(function() {
                    var jThis = $(this);
                    var myOffset = jThis.offset();
                    var myY1 = myOffset.top;
                    var myX1 = myOffset.left;
                    var myX2 = myX1 + jThis.outerWidth();
                    var myY2 = myY1 + jThis.outerHeight();
                    if (myY1 < iY1) iY1 = myY1;
                    if (myX1 < iX1) iX1 = myX1;
                    if (myY2 > iY2) iY2 = myY2;
                    if (myX2 > iX2) iX2 = myX2;
                });
                if (!(y1 < iY2 && y2 > iY1 && x1 < iX2 && x2 > iX1)) return;
                var display = jI.css("display");
                if ("block" != display) display = "inline-block";
                var css = {
                    display: display,
                    position: jI.css("position"),
                    "float": jI.css("float"),
                    top: jI.css("top"),
                    right: jI.css("right"),
                    bottom: jI.css("bottom"),
                    left: jI.css("left"),
                    width: iX2 - iX1 - 18,
                    height: iY2 - iY1 - 18,
                    overflow: "hidden"
                };
                $("<div></div>").css(css).addClass("WikiEmbedSubForPopup").insertBefore(jI);
                jI.addClass("WikiHideForPopup");
            });
        },
        loadMenuHandlers: function() {
            $(document).on("mouseover", ".WikiMenuControl", function(event) {
                var control = $(this);
                var menu = control.nextAll(".WikiMenu:first");
                if (0 === menu.length) menu = control.parent().nextAll(".WikiMenu:first");
                if (!control.data("init")) {
                    control.data("init", true);
                    menu.hover(function(e) {
                        preventMenuClose = true;
                        return true;
                    }, function(e) {
                        preventMenuClose = false;
                        setTimeout(function() {
                            hideMenu(menu[0]);
                        }, 500);
                        return true;
                    });
                    control.hoverIntent({
                        sensitivity: 3,
                        interval: 200,
                        over: function() {
                            showMenu(menu[0]);
                        },
                        timeout: 500,
                        out: function() {
                            hideMenu(menu[0]);
                        }
                    });
                    control.click(function() {
                        showMenu(menu[0]);
                    });
                    menu.find(".WikiMenuEntry").click(function(event) {
                        if (1 == $(event.target).children("a").length) {
                            var elem = $(event.target).children("a:first");
                            if (elem.attr("href") && "#" != elem.attr("href") && !elem.hasClass("WikispacesDialogLink")) window.location = elem.attr("href"); else $(elem).trigger("click");
                        }
                        preventMenuClose = false;
                        hideMenu(menu[0]);
                    });
                    control.trigger(event);
                }
            });
        },
        resolveNameToBoundFunction: function(name) {
            if ("string" !== typeof name) return;
            var obj = null, func = window, success = false;
            $.each(name.split("."), function(i, namePart) {
                obj = func;
                func = obj[namePart];
                if (!func) {
                    success = false;
                    return false;
                }
                success = true;
            });
            if (success && "function" === typeof func) return function() {
                return func.call(obj);
            };
        },
        trackFileLink: function(url) {
            _gaq = _gaq || [];
            if ("undefined" != typeof wsSpaceGoogleAccount) _gaq.push([ "gaSpace._trackPageview", url ]);
            if ("undefined" != typeof wsInstanceGoogleAcount) _gaq.push([ "gaInstance._trackPageview", url ]);
            _gaq.push([ "_trackPageview", url ]);
        },
        userLinkClick: function() {
            var link = $(this);
            $(".userMenu").remove();
            var o = $("<div>");
            o.addClass("userMenu");
            $("body").append(o);
            var username = link.attr("href").substring(link.attr("href").lastIndexOf("/") + 1);
            function errorFunction(request, textStatus, errorThrown) {
                ws.session.reloadSession(function() {
                    link.click();
                }, 500, function() {
                    alert("Error: Could not display user details");
                });
            }
            $.ajax({
                url: "/user/menu/" + username,
                type: "GET",
                dataType: "html",
                success: function(data, textStatus, request) {
                    o.html(data);
                    o.fadeIn("slow");
                    o.css("position", "absolute");
                    o.css("left", Math.min(link.offset().left - 3, $(window).width() - o.outerWidth()));
                    o.css("top", link.offset().top - 8);
                },
                error: errorFunction
            });
        },
        ucfirst: function(str) {
            str += "";
            var f = str.charAt(0).toUpperCase();
            return f + str.substr(1);
        },
        addNotice: function(str, css_class) {
            var $section = $("#WikispacesNoticeJs div." + css_class);
            var dismiss = '<span class="WikispacesNoticeDismiss"><img src="/i/icon/16_close.png"/></span>';
            if (0 === $section.length) $section = $("<div>").addClass("WikispacesNotice").addClass(css_class).append(dismiss).append("<ul>").appendTo("#WikispacesNoticeJs");
            $section.find("ul").append($("<li>").html(str));
            $(".WikispacesNoticeDismiss").click(function() {
                $(this).closest(".WikispacesNotice").fadeOut();
            });
            $("#WikispacesNoticeJs").show();
        },
        removeNotice: function(removePhpNotice) {
            $("#WikispacesNoticeJs").hide().empty();
            if (removePhpNotice) $(".WikispacesNotice").hide();
        },
        addJsonNotices: function(data) {
            if (!data || !data.notices) return;
            _(data.notices).each(function(noticeList, noticeClass) {
                _(noticeList).each(function(notice) {
                    ws.common.addNotice(notice, "WikispacesNotice" + ws.common.ucfirst(noticeClass));
                });
            });
        },
        displayBanner: function(makeVisible) {
            var wrapperTop = $("#WikispacesBanner").outerHeight();
            var bannerTop = 0;
            if (makeVisible) $("#WikispacesBanner").show(); else {
                bannerTop = -1 * wrapperTop;
                wrapperTop = 0;
            }
            $("#WikispacesWrapper").animate({
                marginTop: wrapperTop,
                queue: false
            }, 250);
            $("#WikispacesBanner").animate({
                top: bannerTop,
                queue: false
            }, 250);
            if (makeVisible) {
                $("#WikispacesWrapper").addClass("BannerDisplayed");
                $("#WikispacesBanner").addClass("BannerDisplayed");
            } else {
                $("#WikispacesWrapper").removeClass("BannerDisplayed");
                $("#WikispacesBanner").removeClass("BannerDisplayed");
            }
        },
        ajaxifyForms: function(forms) {
            $(forms).find("form").addBack("form").on("submit", function(e, button) {
                e.preventDefault();
                var form = this;
                _.defer(function() {
                    var ajaxPost = ws.common.ajaxPost({
                        form: form,
                        target: button
                    });
                    $(form).find(".btn:not(.disabled)").addClass("disabled js-ajax-disabled");
                    $(form).find(":input:not(:disabled)").addClass("js-ajax-disabled").prop("disabled", true);
                    $(form).find(".select2-offscreen.js-ajax-disabled").select2("enable", false);
                    ajaxPost.always(function() {
                        $(form).find(".select2-offscreen.js-ajax-disabled").select2("enable", true);
                        $(form).find(".js-ajax-disabled").filter(".btn.disabled").removeClass("disabled").end().filter(":input:disabled").prop("disabled", false).end().removeClass("js-ajax-disabled");
                    });
                    $(form).trigger("ws-ajax-submit", [ ajaxPost, button ]);
                });
            }).find(":submit, :image").click(function(e) {
                e.preventDefault();
                $(this).trigger("submit", [ this ]);
            });
        },
        ajaxPost: function(options) {
            if (options.form) {
                var $form = $(options.form);
                options = $.extend({
                    url: $form.attr("action"),
                    type: $form.attr("method"),
                    data: $form
                }, options);
            }
            options = $.extend({
                url: window.location.href,
                type: "POST",
                iframe: true,
                cache: false,
                dataType: "json"
            }, options);
            options = $.extend({
                processData: !options.iframe
            }, options);
            if (options.data && options.iframe) {
                var optData = options.data;
                var data = [];
                if ($.isPlainObject(optData)) $.each(optData, function(name, value) {
                    if (!$.isArray(value)) value = [ value ];
                    $.each(value, function(index, val) {
                        if ("function" == typeof val) val = val.call(optData);
                        data.push({
                            name: name,
                            value: val
                        });
                    });
                }); else {
                    if (!$.isArray(optData)) optData = [ optData ];
                    $.each(optData, function(index, value) {
                        if ($.isPlainObject(value)) data.push(value); else if ("object" == $.type(value)) data = data.concat($(value).find(":input").addBack(":input").filter(function() {
                            if (!$(this).is(":button, :submit, :image, :reset")) return true;
                            if ($(this).is("button:not(:submit), :reset")) return false;
                            return options.target == this;
                        }).toArray());
                    });
                }
                options.data = data;
            }
            if (options.queueName && ajaxQueue[options.queueName]) ajaxQueue[options.queueName].abort();
            var request = $.ajax(options);
            if (options.queueName) {
                var originalRequest = request;
                ajaxQueue[options.queueName] = request;
                request = request.then(null, function(a, b, c) {
                    if ("abort" == c) return $.Deferred().promise();
                    return originalRequest;
                });
            }
            request.always(function(data) {
                ws.common.addJsonNotices(data);
            });
            return request;
        },
        pluploadRuntimes: function() {
            var runtimes = [ "html5", "silverlight", "flash", "html4" ];
            if ($.browser.msie) runtimes = _(runtimes).without("silverlight");
            return runtimes;
        },
        getURLParameter: function(name) {
            return decodeURI((RegExp(name + "=" + "(.+?)(&|$)").exec(location.search) || [ null, null ])[1]);
        },
        validatePageName: function(value) {
            var invalid = value.match(/[\/\[\]\{\}\:\|\$\+\#\@\"]/);
            if (invalid && invalid.length > 0 || value.length > 255 || 0 === value.length) return false;
            return true;
        },
        showMorePageBar: function() {
            var $more = $(".ws-menu-bar .btn-group .ws-btn-more");
            if ($more.data("tooltip")) $more.tooltip("hide");
            $(".ws-menu-bar .btn-group").addClass("open");
            ws.common.hideOverlappingEmbeds($(".ws-menu-bar .ws-more-menu"));
        },
        hideMorePageBar: function() {
            if ($(".ws-menu-bar .ws-more-menu .WikiTagFormEdit").length) return;
            $(".ws-menu-bar .btn-group").removeClass("open");
            var $more = $(".ws-menu-bar .btn-group .ws-btn-more");
            if ($more.data("tooltip")) $more.tooltip("hide");
            ws.common.hideOverlappingEmbeds();
        },
        showTagDropdown: function() {
            $(".ws-menu-bar .ws-tag-dropdown-toggle").closest(".dropdown").addClass("open active");
        },
        hideTagDropdown: function() {
            if ($(".ws-menu-bar .ws-more-menu .WikiTagFormEdit").length) return;
            $(".ws-menu-bar .ws-tag-dropdown-toggle").closest(".dropdown").removeClass("open active");
        },
        setSelectionRange: function(element, start, end) {
            if (element.setSelectionRange) return element.setSelectionRange(start, end);
            var range = element.createTextRange();
            range.collapse(true);
            range.moveEnd("character", end);
            range.moveStart("character", start);
            range.select();
        },
        isScrolledIntoView: function(elem) {
            var docViewTop = $(window).scrollTop();
            var docViewBottom = docViewTop + $(window).height();
            var elemTop = $(elem).offset().top;
            var elemBottom = elemTop + $(elem).height();
            return elemBottom <= docViewBottom && elemTop >= docViewTop;
        },
        getPagerData: function(offset, limit, numrows) {
            var pager = {
                firstpage: 1,
                numrows: numrows,
                numpages: Math.max(Math.ceil(numrows / limit), 1),
                limit: limit,
                current: Math.floor(offset / limit) + 1,
                from: Math.min(numrows, offset + 1),
                to: numrows
            };
            pager.lastpage = pager.numpages;
            if (pager.current != pager.numpages) pager.to = pager.current * limit;
            pager.prev = null;
            if (pager.current > pager.firstpage) pager.prev = Math.max(0, pager.from - 1 - pager.limit);
            pager.next = null;
            if (pager.current < pager.lastpage) pager.next = Math.min(pager.numrows, pager.from - 1 + pager.limit);
            pager.first = 0;
            pager.last = (pager.lastpage - 1) * pager.limit;
            pager.paginator = ws.common.getPagerPagination(pager);
            return pager;
        },
        getPagerPagination: function(pager) {
            var result = [ {
                page: pager.firstpage,
                offset: pager.first
            } ];
            if (1 == pager.lastpage) return result;
            var offset = 1;
            var start = pager.current - offset;
            var end = pager.current + offset;
            var frontOverhang = Math.max(0, pager.firstpage + 1 - start);
            var backOverhang = Math.max(0, end - (pager.lastpage - 1));
            start = Math.max(pager.firstpage + 1, start - backOverhang);
            end = Math.min(pager.lastpage - 1, end + frontOverhang);
            if (start > pager.firstpage + 1) result.push({
                page: null,
                offset: null
            });
            for (var i = start; i <= end; i++) result.push({
                page: i,
                offset: (i - 1) * pager.limit
            });
            if (end < pager.lastpage - 1) result.push({
                page: null,
                offset: null
            });
            result.push({
                page: pager.lastpage,
                offset: pager.last
            });
            return result;
        },
        log: function() {
            var jsDebugMode = false;
            if (document.cookie && document.cookie.indexOf("debug_js=") != -1) jsDebugMode = true;
            if (jsDebugMode && window.console) if ($.browser.mozilla || $.browser.webkit) window.console.log(arguments); else for (var i = 0; i < arguments.length; i++) window.console.log(arguments[i]);
        },
        isSameDomain: function(src) {
            if (!src) return false;
            if (src.match(/^\/(?:[^\/]|$)/)) return true;
            if (src.match("^" + ws.common.escapeRegExp("//" + location.host) + "(?:/|$)")) return true;
            if (src.match("^" + ws.common.escapeRegExp(location.protocol + "//" + location.host) + "(?:/|$)")) return true;
            return false;
        }
    };
}(jQuery);

function log() {
    ws.common.log.apply(this, arguments);
}

if (!Date.prototype.toISOString) (function() {
    function pad(number) {
        var r = String(number);
        if (1 === r.length) r = "0" + r;
        return r;
    }
    Date.prototype.toISOString = function() {
        return this.getUTCFullYear() + "-" + pad(this.getUTCMonth() + 1) + "-" + pad(this.getUTCDate()) + "T" + pad(this.getUTCHours()) + ":" + pad(this.getUTCMinutes()) + ":" + pad(this.getUTCSeconds()) + "." + String((this.getUTCMilliseconds() / 1e3).toFixed(3)).slice(2, 5) + "Z";
    };
})();

ws.namespace("ws.assessment");

ws.assessment = function($, undefined) {
    var handle = {};
    var lastActive = null;
    var enabled = false;
    $(document).ready(function() {
        var viewCallback = function(date) {
            return 1;
        };
        enabled = "C" == ws.context.wiki.module;
        ws.assessment.schedule("view", viewCallback);
        $(window).on("focus", function(e) {
            ws.assessment.schedule("view", viewCallback);
        });
        $(window).on("blur", function(e) {
            if (handle.view) {
                clearTimeout(handle.view);
                handle.view = null;
            }
            $("iframe").each(function() {
                if (!ws.common.isSameDomain($(this).attr("src"))) return;
                $(this.contentWindow).off(".subfocus");
                $(this.contentWindow).on("focus.subfocus", function(e) {
                    ws.assessment.schedule("view", viewCallback);
                }).on("blur.subfocus", function(e) {
                    if (handle.view) {
                        clearTimeout(handle.view);
                        handle.view = null;
                    }
                });
            });
        });
    });
    function sendActivity(type, valueCallback, date) {
        if (!enabled || !ws.context.user.id) return;
        if (!date) date = ws.assessment.getCurrentDate();
        var value = valueCallback(date);
        if (!value) return;
        var url = "/data/put/" + encodeURIComponent(type);
        var data = {
            s: ws.context.space.id,
            w: ws.context.wiki.id,
            u: ws.context.user.id,
            d: date,
            v: value
        };
        var md5Data = [ type, encodeURIComponent(Cookie.get("slave")) ];
        $.each(data, function() {
            url = ws.common.addUriParams(url, [ arguments ]);
            md5Data.push(arguments[1]);
        });
        var hash = md5Data.join(":");
        hash = b64_md5(hash).replace(/\+/g, "-").replace(/\//g, "_");
        url = ws.common.addUriParams(url, [ [ "h", hash ] ]);
        $.ajax(url);
    }
    return {
        BUCKET_SECONDS: 5,
        getCurrentDate: function(unixMillis) {
            var date = null;
            if (unixMillis) date = new Date(unixMillis); else date = new Date(new Date().getTime() + ws.context.clockSkewMillis);
            date.setUTCMilliseconds(0);
            var seconds = date.getUTCSeconds();
            seconds = Math.floor(seconds / ws.assessment.BUCKET_SECONDS) * ws.assessment.BUCKET_SECONDS;
            date.setUTCSeconds(seconds);
            var currentBucket = Math.floor(date.getTime() / 1e3);
            return currentBucket;
        },
        disable: function() {
            enabled = false;
            $.each(handle, function(type, v) {
                clearTimeout(v);
                handle[type] = null;
            });
        },
        schedule: function(type, callback) {
            if (handle[type]) return;
            var bucketDate = ws.assessment.getCurrentDate();
            var runAt = 1e3 * (bucketDate + ws.assessment.BUCKET_SECONDS - Math.floor((new Date().getTime() + ws.context.clockSkewMillis) / 1e3));
            handle[type] = setTimeout(function() {
                sendActivity(type, callback, bucketDate);
                handle[type] = null;
                ws.assessment.schedule(type, callback);
            }, runAt);
        }
    };
}(jQuery);

ws.namespace("ws.cob");

ws.cob = function($, undefined) {
    var callbacks = [];
    var registeredCallbacks = {};
    var associatedCallbacks = {};
    var overlay;
    $(document).ready(function() {
        $(".cobWrapper").on("click", ".js-selections-remove", function(e) {
            var wrapper = $(this).closest(".cobWrapper");
            ws.cob.clearSelections(wrapper);
            e.preventDefault();
        });
        $(".cobWrapper").on("change", ".cobSelectAll", function(e) {
            var check = $(this).prop("checked");
            var wrapper = $(this).closest(".cobWrapper");
            wrapper.find("input[type=checkbox].cobCheck").prop("checked", check).each(function() {
                checkBox(this, check);
            });
            updateSelections(wrapper);
        });
        $(".cobWrapper").on("refreshChecks", function() {
            $(this).find("input.cobCheck").each(function() {
                checkBox(this, $(this).prop("checked"));
            });
            updateSelections($(this));
        });
        $(".cobWrapper").on("click", ".cobCheck", function(e) {
            checkBox(this, $(this).prop("checked"));
            updateSelections($(this).closest(".cobWrapper"));
        });
        $(".cobWrapper").each(function() {
            updateSelections(this);
        });
        $(".cobWrapper").on("click", ".cobOperation", function(e) {
            e.preventDefault();
            var wrapper = $(this).closest(".cobWrapper");
            if (!ws.cob.hasChecks(wrapper)) {
                alert("Please select at least one item from the list to continue.");
                return;
            }
            if (!$(this).data("bulk-params")) {
                $(this).trigger("bulk-needs-params");
                return;
            }
            var form = $('<form method="post" action="/site/bulk"/>').addClass("hidden");
            $("<input>").attr({
                type: "hidden",
                name: "operation",
                value: $(this).data("bulk-operation")
            }).appendTo(form);
            for (var key in $(this).data("bulk-params")) {
                var val = $(this).data("bulk-params")[key];
                if ("function" == typeof val) val = val.call(form);
                $("<input>").attr({
                    type: "hidden",
                    name: "params[" + key + "]",
                    value: val
                }).appendTo(form);
            }
            for (var prop in ws.cob.getChecks(wrapper)) $("<input>").attr("type", "hidden").addClass("cobId").attr("name", "cobCheck[]").val(prop).appendTo(form);
            var returnTo = document.location.href;
            if ($(this).data("bulk-goto")) returnTo = $(this).data("bulk-goto");
            $("<input>").attr("type", "hidden").attr("name", "goto").val(returnTo).appendTo(form);
            wrapper.append(form);
            form.submit();
        });
        if (!History.enabled) return false;
        History.Adapter.bind(window, "statechange", function(e) {
            var State = History.getState();
            var tableId = null;
            if (!State) return;
            if (State.data) tableId = State.data.tableId;
            if (!tableId) tableId = $(".cobWrapper").attr("id");
            if (State.url && tableId) ws.cob.makeAjaxCall(State.url, tableId);
        });
    });
    function toggleFilters(wrapper) {
        wrapper = $(wrapper);
        var $btn = wrapper.find(".filter-link");
        if (!wrapper.find(".filter-row").is(":visible")) {
            $btn.addClass("active");
            wrapper.find(".filter-row").show();
            Cookie.set("filter-preference", 1, 30);
            return;
        }
        if (!filtering(wrapper)) {
            $btn.removeClass("active");
            wrapper.find(".filter-row").hide();
            Cookie.set("filter-preference", 0, 30);
            return;
        }
        if (confirm("Clear all filters?")) {
            Cookie.set("filter-preference", 0, 30);
            var teamFilterLink = wrapper.find(".teamFilterLink");
            var href = ws.common.removeUriParams(teamFilterLink.attr("href"));
            teamFilterLink.attr("href", href).click();
        }
    }
    function filtering(wrapper) {
        var params = ws.common.uriParams(window.location.href);
        var filterState = false;
        $(wrapper).find(".cobFilterOption").each(function() {
            if (params[$(this).attr("name")]) filterState = true;
        });
        return filterState;
    }
    function setCheckboxes(wrapper) {
        wrapper = $(wrapper);
        var checks = ws.cob.getChecks(wrapper);
        wrapper.find("input.cobCheck").each(function() {
            if (checks[$(this).val()]) {
                $(this).prop("checked", true);
                checkBox(this, true);
            }
        });
        updateSelections(wrapper);
    }
    function updateSelections(wrapper) {
        wrapper = $(wrapper);
        var cobTable = wrapper.find("table.cob");
        cobTable.find("input.cobSelectAll").prop("checked", !cobTable.find("input.cobCheck:not(:checked):first").length);
        var selections = wrapper.find(".js-selections");
        var checksCount = ws.cob.getChecksCount(wrapper);
        if (checksCount <= 0) {
            selections.hide();
            setOperationState(wrapper, false);
            wrapper.trigger("cob-selection-update");
            return;
        }
        if (selections.length) {
            selections.show();
            var selectionInner = selections.find("span span");
            if (1 == checksCount) selectionInner.text(selections.data("singular").replace("%d", checksCount)); else selectionInner.text(selections.data("plural").replace("%d", checksCount));
        }
        setOperationState(wrapper, true);
        selections.show().find("span").css("color", "#F00").animate({
            color: "#000"
        }, 2e3);
        wrapper.trigger("cob-selection-update");
    }
    function setOperationState(wrapper, isEnabled) {
        var cobBtns = $(wrapper).find(".cobOperations .btn.cobOperation");
        cobBtns.filter(":button").prop("disabled", !isEnabled);
        cobBtns.not(":button").toggleClass("disabled", !isEnabled);
    }
    function checkBox(checkbox, check) {
        checkbox = $(checkbox);
        checkbox.closest("tr").toggleClass("info", check);
        setCheck(checkbox.closest(".cobWrapper"), checkbox.val(), check);
    }
    function setCheck(wrapper, key, check) {
        var checks = ws.cob.getChecks(wrapper);
        var checksCount = ws.cob.getChecksCount(wrapper);
        if (check && !checks[key]) {
            checks[key] = 1;
            checksCount++;
        } else if (!check && checks[key]) {
            delete checks[key];
            checksCount--;
        }
        wrapper.data("cob-checks-count", checksCount);
    }
    function defaultCallback(table, html) {
        table.html(html);
        if (overlay) {
            overlay.dialog("destroy");
            overlay = null;
        }
        if (ws.cob.scrollOnLoad && !table.find("th:first").is(":inView")) $.scrollTo(table, {
            axis: "y"
        });
    }
    return {
        TABLE_ID: "utable",
        scrollOnLoad: true,
        enableState: true,
        getChecks: function(wrapper) {
            var checks = wrapper.data("cob-checks");
            if (!checks) {
                checks = {};
                wrapper.data("cob-checks", checks);
            }
            return checks;
        },
        getChecksCount: function(wrapper) {
            var checksCount = $(wrapper).data("cob-checks-count");
            return checksCount || 0;
        },
        hasChecks: function(wrapper) {
            for (var prop in ws.cob.getChecks(wrapper)) return true;
            return false;
        },
        clearSelections: function(wrapper) {
            wrapper.find("input[type=checkbox].cobCheck").prop("checked", false).each(function() {
                checkBox(this, false);
            });
            wrapper.find(".cobSelectAll").prop("checked", false);
            wrapper.data("cob-checks-count", 0);
            wrapper.data("cob-checks", {});
            updateSelections(wrapper);
        },
        refreshRows: function() {
            $("table.cob .refreshLink").trigger("click");
        },
        registerCallback: function(name, callback) {
            registeredCallbacks[name] = callback;
        },
        associateCallback: function(tableId, callbackName) {
            var callback = registeredCallbacks[callbackName];
            associatedCallbacks[tableId] = callback;
        },
        addCallback: function(callback) {
            callbacks.push(callback);
        },
        makeAjaxLink: function(a, tableId) {
            $(a).click(ws.common.makeLinkClickFunction(function(event) {
                if (!ws.tags.promptForOpenInputs(event)) return false;
                var url = $(this).attr("href");
                if (ws.cob.enableState) History.pushState({
                    tableId: tableId
                }, null, url); else ws.cob.makeAjaxCall(url, tableId);
            }));
        },
        makeAjaxCall: function(url, tableId) {
            overlay = ws.dialog.blankOverlay();
            ws.common.trackFileLink(url);
            var ajaxUrl = ws.common.addUriParams(url, [ [ ws.cob.TABLE_ID, tableId ] ]);
            return ws.common.ajaxPost({
                url: ajaxUrl
            }).done(function(data) {
                var html = data.content;
                if (overlay) {
                    overlay.dialog("destroy");
                    overlay = null;
                }
                ws.cob.makeCallback(tableId)(html);
            });
        },
        makeCallback: function(tableId, callback) {
            if (!callback) callback = associatedCallbacks[tableId];
            if (!callback) callback = defaultCallback;
            return function(html) {
                var table = $("#" + tableId);
                callback(table, html);
                $.each(callbacks, function(i, cb) {
                    cb(table);
                });
                setCheckboxes(table);
                table.find(".jssmLink, .pagerLink").each(function() {
                    ws.cob.makeAjaxLink(this, tableId);
                });
            };
        },
        initFilterRow: function(wrapper) {
            wrapper = $(wrapper);
            if (Cookie.get("filter-preference") || filtering(wrapper)) toggleFilters(wrapper);
            if (wrapper.data("filter-handlers-attached")) return;
            wrapper.on("click", ".filter-link", function(e) {
                toggleFilters(wrapper);
                e.preventDefault();
            });
            wrapper.on("change", ".cobFilterOption", function() {
                var params = {};
                wrapper.find(".cobFilterOption").each(function() {
                    if ($(this).is("select,input")) params[$(this).attr("name")] = $(this).val();
                });
                var cobUrlA = wrapper.find(".cobUrl");
                var href = ws.common.updateUriParams(cobUrlA.attr("href"), params);
                cobUrlA.attr("href", href).click();
            });
            wrapper.data("filter-handlers-attached", true);
        }
    };
}(jQuery);

(function() {
    var CANVAS_Z_INDEX, COMMENT_MARGIN, Comment, DivCanvas, ElemFinder, IMAGE_HIGHLIGHT_MARGIN, MENUBAR_ACTIVE_CLASS, MENUBAR_DISABLED_CLASS, MENU_Z_INDEX, MINIMUM_MIDDLE_EXTENT_HEIGHT, MINIMUM_MULTILINE_STARTING_EXTENT_WIDTH, POSITION_SEARCH_INCREMENT, SELECTED_COMMENT_Z_INDEX, Space, UNSELECTED_COMMENT_Z_INDEX, commentFooter, composerTemplate, contentTemplate, outerHtml, proxyTemplate, windowLoaded;
    POSITION_SEARCH_INCREMENT = 10;
    COMMENT_MARGIN = 4;
    IMAGE_HIGHLIGHT_MARGIN = 4;
    MINIMUM_MULTILINE_STARTING_EXTENT_WIDTH = 5;
    MINIMUM_MIDDLE_EXTENT_HEIGHT = 10;
    UNSELECTED_COMMENT_Z_INDEX = 0;
    SELECTED_COMMENT_Z_INDEX = 1;
    CANVAS_Z_INDEX = 10;
    MENU_Z_INDEX = 12;
    MENUBAR_DISABLED_CLASS = "disabled";
    MENUBAR_ACTIVE_CLASS = "Current";
    if (wikispaces_isMobileSite) {
        MENUBAR_DISABLED_CLASS = "ui-disabled";
        MENUBAR_ACTIVE_CLASS = "ui-btn-active";
    }
    windowLoaded = function() {
        var deferred;
        deferred = jQuery.Deferred();
        jQuery(window).load(function() {
            return deferred.resolve();
        });
        return deferred.promise();
    }();
    outerHtml = function(elem) {
        return jQuery(elem).clone().wrap("<div></div>").parent().html();
    };
    window.WikispacesCommentManager = {
        comments: [],
        spaces: [],
        openComment: null,
        readOnly: true,
        clear: function() {
            var space, _i, _len, _ref, _results;
            this.comments = [];
            jQuery(".commentList").empty();
            _ref = this.spaces;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                space = _ref[_i];
                _results.push(this.removeSpace(space));
            }
            return _results;
        },
        reload: function() {
            var space, _i, _len, _ref, _this = this;
            _ref = this.spaces;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                space = _ref[_i];
                space.reset();
            }
            return this.retrieveData(function(digests) {
                _this.commentsFromDigests(digests);
                return _this.redrawAll();
            });
        },
        retrieveData: function(callback) {
            return jQuery.ajax({
                iframe: true,
                type: "GET",
                url: ws.common.pathFor("page", "shares", wikispaces_page),
                dataType: "json",
                processData: false,
                success: function(response) {
                    return callback(response.content.comments);
                }
            });
        },
        commentsFromDigests: function(digests) {
            var _this = this;
            this.comments = _(digests).map(function(digest) {
                return new Comment(digest);
            });
            return this.comments;
        },
        fetchPageViewComments: function() {
            var _this = this;
            return this.retrieveData(function(digests) {
                return _this.loadPageViewComments(digests);
            });
        },
        loadPageViewComments: function(digests) {
            var match, _ref, commentSpace;
            commentSpace = new WikispacesCommentSpace("#content_view", ".commentContainer", ".commentContainer");
            this.commentsFromDigests(digests);
            this.redrawAll();
            match = window.location.hash.match(/#comment-(\d+)-open/);
            if (match) return null != (_ref = WikispacesCommentManager.commentById(match[1])) ? _ref.select().scrollTo() : void 0;
        },
        addSpace: function(space) {
            this.spaces.push(space);
            return this.redrawAll();
        },
        removeSpace: function(space) {
            space.remove();
            this.spaces = _(this.spaces).without(space);
            return this.spaces;
        },
        preemptSpaces: function() {
            var spaces;
            spaces = this.spaces;
            this.spaces = [];
            this.undiscover();
            return spaces;
        },
        restoreSpaces: function(spaces) {
            this.spaces = spaces;
            return this.spaces;
        },
        rediscover: function() {
            var comment, _i, _len, _ref, _results;
            _ref = this.comments;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                comment = _ref[_i];
                _results.push(comment.discover(this.spaces));
            }
            return _results;
        },
        undiscover: function() {
            var comment, _i, _len, _ref, _results;
            _ref = this.discoveredComments();
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                comment = _ref[_i];
                _results.push(comment.undiscover());
            }
            return _results;
        },
        discoveredComments: function() {
            return _(this.comments).select(function(comment) {
                return comment.isDiscovered();
            });
        },
        unsavedComments: function() {
            return _(this.discoveredComments()).select(function(comment) {
                return comment.isUnsaved();
            });
        },
        sortedComments: function() {
            return _(this.spaces).chain().map(function(s) {
                return s.sortedComments();
            }).flatten().value();
        },
        commentsInSpace: function(space) {
            return _(this.comments).select(function(comment) {
                return comment.space === space;
            });
        },
        commentById: function(id) {
            return _(this.comments).find(function(comment) {
                return comment.attributes.id === id;
            });
        },
        addComment: function(comment) {
            this.comments.push(comment);
            return this.redrawAll(true);
        },
        removeComment: function(comment) {
            this.comments = _(this.comments).without(comment);
            return this.positionProxies();
        },
        showAll: function() {
            return jQuery(".commentColumn, .commentContainer .div-canvas").show();
        },
        hideAll: function() {
            return jQuery(".commentColumn, .commentContainer .div-canvas").hide();
        },
        redrawAll: function() {
            this.rediscover();
            return this.positionProxies();
        },
        deselectAll: function() {
            var comment, _i, _len, _ref, _results;
            _ref = this.discoveredComments();
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                comment = _ref[_i];
                _results.push(comment.deselect());
            }
            return _results;
        },
        markCommentsSaved: function() {
            return this.reload();
        },
        generateCommentId: function() {
            var id, version, _ref, _ref1, checkId;
            if (!this.idCounter) this.idCounter = 0;
            version = null != (_ref1 = "undefined" !== typeof tinymce && null !== tinymce ? tinymce.mainEditor.plugins.wscommon.getOption("version") : void 0) ? _ref1 : "v";
            id = "" + version + "_" + ++this.idCounter;
            checkId = function(comment) {
                return comment.commentId === id;
            };
            while (_(this.comments).any(checkId)) id = "" + version + "_" + ++this.idCounter;
            return id;
        },
        positionProxies: function() {
            var comment, drawIndex, drawQueue, drawable, height, maxY, _i, _j, _len, _len1, _ref, _results;
            this.reservedPositions = [];
            drawQueue = [];
            _ref = this.sortedComments();
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                comment = _ref[_i];
                if (comment.isDiscovered()) {
                    height = comment.height();
                    drawQueue.push({
                        comment: comment,
                        y: this.findPosition(comment.preferredY(), height)
                    });
                } else comment.hide();
            }
            maxY = jQuery(".commentColumn").height();
            drawQueue = _(drawQueue).sortBy(function(drawable) {
                return drawable.y;
            });
            drawIndex = 0;
            _results = [];
            for (_j = 0, _len1 = drawQueue.length; _j < _len1; _j++) {
                drawable = drawQueue[_j];
                drawable.comment.$proxy.css({
                    visibility: "visible",
                    top: Math.floor(drawable.y)
                }).show();
                maxY = Math.max(maxY, drawable.y + height);
                _results.push(drawIndex += 1);
            }
            return _results;
        },
        findPosition: function(preferredY, height) {
            var downProbe, position, top, upProbe;
            top = 0;
            upProbe = Math.max(preferredY, top);
            downProbe = Math.max(preferredY + POSITION_SEARCH_INCREMENT, top);
            position = null;
            while (null == position) {
                if (upProbe >= top && this.isPositionClear(upProbe, height)) position = upProbe; else if (this.isPositionClear(downProbe, height)) position = downProbe;
                upProbe -= POSITION_SEARCH_INCREMENT;
                downProbe += POSITION_SEARCH_INCREMENT;
            }
            this.reservedPositions.push([ position - COMMENT_MARGIN, position + height + COMMENT_MARGIN ]);
            return position;
        },
        isPositionClear: function(pos, height) {
            var isBetween, _this = this;
            isBetween = function(num, low, high) {
                return low < num && num < high;
            };
            return _(this.reservedPositions).isEmpty() || _(this.reservedPositions).all(function(reservation) {
                return !isBetween(pos, reservation[0], reservation[1]) && !isBetween(pos + height, reservation[0], reservation[1]) && !isBetween(reservation[0], pos, pos + height);
            });
        }
    };
    window.WikispacesCommentSpace = Space = function() {
        function Space(contents, contentContainer, canvasContainer, drawBehind) {
            this.contents = jQuery(contents);
            this.contentContainer = jQuery(contentContainer);
            this.canvasContainer = jQuery(canvasContainer);
            this.drawBehind = jQuery(drawBehind || contentContainer);
            this.canvas = new DivCanvas(this.drawBehind, this.canvasContainer, "a.range", this.contents);
            WikispacesCommentManager.addSpace(this);
        }
        Space.prototype.remove = function() {
            return this.canvas.destroy();
        };
        Space.prototype.reset = function() {
            var comment, _i, _len, _ref, _results;
            _ref = this.comments();
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                comment = _ref[_i];
                _results.push(comment.reset());
            }
            return _results;
        };
        Space.prototype.comments = function() {
            return WikispacesCommentManager.commentsInSpace(this);
        };
        Space.prototype.sortedComments = function() {
            var unsorted;
            unsorted = this.comments();
            return _(jQuery("a.range[name^=comment-]", this.contents)).chain().map(function(elem) {
                return _(unsorted).find(function(comment) {
                    return comment.opener[0] === elem;
                });
            }).compact().value();
        };
        Space.prototype.yOffset = function() {
            return this.contentContainer.offset().top - jQuery(".commentSubject").offset().top;
        };
        Space.prototype.closeAll = function() {
            var comment, _i, _len, _ref, _results;
            _ref = this.sortedComments();
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                comment = _ref[_i];
                _results.push(comment.close());
            }
            return _results;
        };
        return Space;
    }();
    window.WikispacesComment = Comment = function() {
        function Comment(attributes) {
            var _base, _base1;
            this.attributes = attributes ? attributes : {};
            this.composing = false;
            if (!this.attributes.id) {
                if (!this.attributes.commentId) this.attributes.commentId = WikispacesCommentManager.generateCommentId();
                this.attributes.userCreated = {
                    username: wikispaces_username,
                    url: "/user/view/" + wikispaces_username,
                    imageUrl: "/user/pic/" + wikispaces_username + "-sm.jpg"
                };
                if (!this.attributes.replyPages) this.attributes.replyPages = [];
                this.composing = true;
            }
            this.space = null;
            this.$proxy = jQuery(proxyTemplate(this.attributes));
            this.div = jQuery(this.template()(this.attributes)).css("visibility", "hidden");
            this.rerender();
        }
        Comment.prototype.open = function(opts) {
            var top, _ref;
            if (null == opts) opts = {};
            if (null != (_ref = this.space)) _ref.closeAll();
            WikispacesCommentManager.openComment = this;
            this.$proxy.addClass("open");
            this.showExtent();
            top = this.extent.last().position().top + this.extent.last().height() + this.space.yOffset();
            this.div.appendTo(".commentList").css({
                visibility: "visible",
                top: top,
                right: jQuery(".commentColumn").width() + 4
            }).show();
            jQuery("abbr.timeago").timeago();
            jQuery(".ws-tip").tooltip({
                container: this.div
            });
            this.div.find(".previous, .next").toggle(!!(this.previous() || this.next()));
            this.div.find(".previous").prop("disabled", !this.previous());
            this.div.find(".next").prop("disabled", !this.next());
            if (!opts.noFocus) this.div.find("textarea").focus();
            return this.repositionDiv();
        };
        Comment.prototype.repositionDiv = function() {
            var overflow, top;
            if ((overflow = this.div.offset().top + this.div.outerHeight() - jQuery(document).outerHeight()) > 0) {
                top = parseInt(this.div.css("top").match(/\d+/)[0], 10);
                return this.div.css({
                    top: top - overflow
                });
            }
        };
        Comment.prototype.close = function() {
            this.$proxy.removeClass("open");
            this.hideExtent();
            this.div.css({
                visibility: "hidden"
            });
            WikispacesCommentManager.openComment = null;
            return WikispacesCommentManager.openComment;
        };
        Comment.prototype.insertInto = function(space) {
            var _this = this;
            this.space = space;
            this.$proxy.appendTo(jQuery(".commentList")).hide();
            this.$proxy.on("mouseenter", function() {
                _this.showExtent();
                return _this.$proxy.addClass("selected");
            });
            this.$proxy.on("mouseleave", function() {
                if (!_this.$proxy.hasClass("open")) _this.hideExtent();
                return _this.$proxy.removeClass("selected");
            });
            return this.$proxy.on("click", function() {
                if (_this.$proxy.hasClass("open")) return _this.close(); else return _this.open();
            });
        };
        Comment.prototype.setReply = function(reply) {
            return this.div.find(".reply textarea").val(reply);
        };
        Comment.prototype.previous = function() {
            var index, list;
            list = this.space.sortedComments();
            if ((index = _(list).indexOf(this)) > 0) return list[index - 1];
        };
        Comment.prototype.next = function() {
            var index, list;
            list = this.space.sortedComments();
            if ((index = _(list).indexOf(this)) !== list.length - 1) return list[index + 1];
        };
        Comment.prototype.template = function() {
            if (this.composing) return composerTemplate; else return contentTemplate;
        };
        Comment.prototype.rerender = function() {
            var esto, _this = this;
            this.$proxy.html(jQuery(proxyTemplate(this.attributes)).html());
            this.div.html(jQuery(this.template()(this.attributes)).html());
            jQuery("abbr.timeago").timeago();
            jQuery(".ws-tip").tooltip({
                container: this.div
            });
            this.div.find(".userLink").click(ws.common.makeLinkClickFunction(ws.common.userLinkClick));
            esto = this;
            this.div.find(".ws-reveal").on("click keydown", function() {
                jQuery(this).removeClass("ws-unrevealed").next(".ws-hidden").slideDown();
                return esto.repositionDiv();
            });
            this.div.find(".previous").on("click", function() {
                _this.previous().open({
                    noFocus: true
                });
                return false;
            });
            this.div.find(".next").on("click", function() {
                _this.next().open({
                    noFocus: true
                });
                return false;
            });
            this.div.find(".closeme").on("click", function() {
                _this.close();
                return false;
            });
            this.div.find("form.compose").on("submit", function() {
                _this.close();
                return false;
            });
            this.div.find(".commentHeader .trash").on("click", function() {
                _this["delete"]();
                return false;
            });
            this.div.find(".toggle-lock").on("click", function() {
                _this.attributes.locked = !_this.attributes.locked;
                _this.div.find(".toggle-lock").toggleClass("active");
                _this.div.find(".toggle-lock").attr("title", _this.attributes.locked ? "Replies are not allowed. Click to allow." : "Replies are allowed. Click to disallow.").tooltip("fixTitle").tooltip("show");
                _this.sync(true);
                return false;
            });
            this.div.find(".toggle-monitor").on("click", function() {
                _this.attributes.monitored = !_this.attributes.monitored;
                _this.div.find(".toggle-monitor").toggleClass("active");
                _this.div.find(".toggle-monitor").attr("title", _this.attributes.monitored ? "You are monitoring replies. Click to stop." : "You are not monitoring replies. Click to monitor.").tooltip("fixTitle").tooltip("show");
                _this.sync(true);
                return false;
            });
            this.div.find(".delete").on("click", function() {
                if (_this.composing && !_this.body() || confirm("Do you really want to delete this comment?")) _this["delete"]();
                return false;
            });
            this.div.find(".remove").on("click", function() {
                var msg;
                msg = "Do you really want to remove this comment?";
                if (!_this.composing) msg += " It will remain visible in the page's discussion list.";
                if (_this.composing && !_this.body() || confirm(msg)) _this.remove();
                return false;
            });
            if (!wikispaces_can_edit || this.attributes.locked && !window.ws.context.userCanAdministerWiki) this.div.find(".reply").hide();
            this.div.find(".delete-reply").on("click", function(evt) {
                var id;
                if (!confirm("Are you sure you want to delete this reply?")) return;
                id = jQuery(evt.target).closest(".commentReply").data("id");
                return jQuery.ajax({
                    iframe: true,
                    type: "POST",
                    url: ws.common.pathFor("message", "delete", "$", id),
                    dataType: "json",
                    success: function(response) {
                        return _this.update(response.content);
                    }
                });
            });
            return this.div.find("form.reply").on("submit", function() {
                var replyText;
                if (!(replyText = _this.div.find("form.reply textarea").val())) {
                    alert("Please enter a reply first.");
                    return false;
                }
                _this.div.find(".spinner").show();
                _this.div.find("form.reply").prop("disabled", true);
                jQuery.ajax({
                    iframe: true,
                    type: "POST",
                    url: ws.common.pathFor("share", "reply", _this.attributes.id),
                    data: {
                        body: replyText
                    },
                    dataType: "json",
                    processData: false,
                    success: function(response) {
                        return _this.update(response.content);
                    },
                    complete: function() {
                        return _this.div.find(".spinner").hide();
                    }
                });
                return false;
            });
        };
        Comment.prototype.update = function(attrs, opts) {
            var share, _ref, _ref1;
            if (null == opts) opts = {};
            this.attributes = attrs;
            if (!opts.silent && (share = null != (_ref = ws.stream) ? null != (_ref1 = _ref.shares) ? _ref1.get(this.attributes.id) : void 0 : void 0)) share.set(attrs);
            if (!opts.noRender) this.rerender();
            return this.repositionDiv();
        };
        Comment.prototype.sync = function(noRender) {
            var _this = this;
            if (null == noRender) noRender = false;
            return jQuery.ajax({
                iframe: true,
                type: "POST",
                url: ws.common.pathFor("share", "update", this.attributes.id),
                data: this.attributes,
                dataType: "json",
                success: function(response) {
                    return _this.update(response.content, {
                        noRender: noRender
                    });
                }
            });
        };
        Comment.prototype.reset = function() {
            this.close();
            this.div.remove();
            this.$proxy.remove();
            return this.undiscover();
        };
        Comment.prototype.remove = function() {
            var _ref, _ref1;
            this.reset();
            if (null != (_ref = this.opener)) _ref.remove();
            return null != (_ref1 = this.closer) ? _ref1.remove() : void 0;
        };
        Comment.prototype["delete"] = function(opts) {
            var wipe, _this = this;
            if (null == opts) opts = {};
            wipe = function() {
                var share, _ref, _ref1;
                _this.remove();
                if (!opts.silent && (share = null != (_ref = ws.stream) ? null != (_ref1 = _ref.shares) ? _ref1.get(_this.attributes.id) : void 0 : void 0)) ws.stream.shares.remove(share);
                WikispacesCommentManager.removeComment(_this);
                _this.composing = false;
                return _this.composing;
            };
            if (this.composing) return wipe(); else return jQuery.ajax({
                iframe: true,
                type: "POST",
                url: ws.common.pathFor("share", "delete", this.attributes.id),
                success: wipe
            });
        };
        Comment.prototype.discover = function(spaces) {
            var backwards, space, _i, _len, _ref;
            this.opener = this.closer = null;
            for (_i = 0, _len = spaces.length; _i < _len; _i++) {
                space = spaces[_i];
                this.opener = jQuery(space.contents).find(this.openSelector());
                this.closer = jQuery(space.contents).find(this.closeSelector());
                if (0 === this.opener.length && 0 === this.closer.length) {
                    if (this.space === space) this.undiscover();
                    continue;
                } else if (!this.isDiscovered() && (null != (_ref = space.editor) ? _ref.selection.isCollapsed() : void 0)) if (0 === this.opener.length) {
                    space.editor.selection.setContent(this.openerHtml());
                    this.opener = jQuery(space.contents).find(this.openSelector());
                } else if (0 === this.closer.length) {
                    space.editor.selection.setContent(this.closerHtml());
                    this.closer = jQuery(space.contents).find(this.closeSelector());
                }
                backwards = jQuery("a[name=" + this.opener.attr("name") + "], a[name=" + this.closer.attr("name") + "]", space.contents)[0] === this.closer[0];
                if (backwards || this.hasNullExtent()) this.remove(); else {
                    this.opener.slice(1).remove();
                    this.closer.slice(1).remove();
                }
                if (space !== this.space) this.insertInto(space);
                return true;
            }
        };
        Comment.prototype.undiscover = function() {
            var _ref;
            this.deselect();
            if (null != (_ref = this.extent)) _ref.remove();
            this.$proxy.remove();
            this.space = null;
            return this.space;
        };
        Comment.prototype.isDiscovered = function() {
            var _ref, _ref1;
            return (null != (_ref = this.opener) ? _ref.length : void 0) > 0 && (null != (_ref1 = this.closer) ? _ref1.length : void 0) > 0;
        };
        Comment.prototype.isContentBetween = function(node1, node2) {
            var n;
            n = null != node1 ? node1.nextSibling : void 0;
            while (n && n !== node2) {
                if (3 !== n.nodeType || n.nodeValue) return true;
                n = n.nextSibling;
            }
            return false;
        };
        Comment.prototype.hasNullExtent = function() {
            return !this.isContentBetween(this.opener[0], this.closer[0]);
        };
        Comment.prototype.scrollTo = function() {
            return jQuery.scrollTo(this.$proxy, {
                offset: -70
            });
        };
        Comment.prototype.showExtent = function() {
            this.hideExtent();
            this.extent = this.space.canvas.makeExtent(this.opener.get(0), this.closer.get(0));
            return this.extent;
        };
        Comment.prototype.hideExtent = function() {
            var _ref;
            return null != (_ref = this.extent) ? _ref.remove() : void 0;
        };
        Comment.prototype.openAnchorName = function() {
            return "comment-" + this.attributes.commentId + "-open";
        };
        Comment.prototype.closeAnchorName = function() {
            return "comment-" + this.attributes.commentId + "-close";
        };
        Comment.prototype.openSelector = function() {
            return "a.range[name=" + this.openAnchorName() + "]";
        };
        Comment.prototype.closeSelector = function() {
            return "a.range[name=" + this.closeAnchorName() + "]";
        };
        Comment.prototype.generateOpener = function(doc) {
            return jQuery("<a>", doc).addClass("range").attr("name", this.openAnchorName()).get(0);
        };
        Comment.prototype.generateCloser = function(doc) {
            return jQuery("<a>", doc).addClass("range").attr("name", this.closeAnchorName()).get(0);
        };
        Comment.prototype.openerHtml = function() {
            return outerHtml(this.generateOpener());
        };
        Comment.prototype.closerHtml = function() {
            return outerHtml(this.generateCloser());
        };
        Comment.prototype.preferredY = function() {
            if (!(null != this.opener.get(0).offsetParent && null != this.closer.get(0).offsetParent)) WikispacesCommentManager.rediscover();
            return ElemFinder.top(this.opener) + this.space.yOffset();
        };
        Comment.prototype.height = function() {
            if (!this.$proxy.parent().size()) this.$proxy.appendTo("body");
            return this.$proxy.height();
        };
        Comment.prototype.draw = function(y, canvas) {
            if (!(null != this.opener.get(0).offsetParent && null != this.closer.get(0).offsetParent)) WikispacesCommentManager.rediscover();
            this.$proxy.css({
                visibility: "visible",
                top: Math.floor(y)
            }).show();
            if (this.$proxy.hasClass("open")) return this.showExtent();
        };
        Comment.prototype.hide = function() {
            var _ref;
            this.deselect();
            this.div.hide();
            if (null != (_ref = this.extent)) _ref.hide();
            return this.$proxy.hide();
        };
        Comment.prototype.commentId = function() {
            return this.attributes.commentId;
        };
        Comment.prototype.body = function() {
            return this.div.find("textarea").val();
        };
        Comment.prototype.memo = function() {
            return {
                body: this.body(),
                commentId: this.commentId(),
                locked: this.div.find(".btn.locked").hasClass("active"),
                monitored: this.div.find(".btn.monitored").hasClass("active")
            };
        };
        Comment.prototype.select = function() {
            var _ref;
            WikispacesCommentManager.deselectAll();
            this.div.addClass("selected");
            if (null != (_ref = this.extent)) _ref.addClass("selected").css("z-index", SELECTED_COMMENT_Z_INDEX);
            return this;
        };
        Comment.prototype.deselect = function() {
            var _ref;
            this.div.removeClass("selected");
            if (null != (_ref = this.extent)) _ref.removeClass("selected").css("z-index", UNSELECTED_COMMENT_Z_INDEX);
            return this;
        };
        Comment.prototype.isSelected = function() {
            return this.div.hasClass("selected");
        };
        Comment.prototype.isUnsaved = function() {
            return this.composing;
        };
        return Comment;
    }();
    DivCanvas = function() {
        function DivCanvas(targetDiv, canvasContainer, locatorPattern, locatorSource) {
            var left, top;
            this.targetDiv = targetDiv;
            this.locatorPattern = locatorPattern;
            this.locatorSource = locatorSource;
            jQuery(this.targetDiv).css({
                position: "relative",
                zIndex: CANVAS_Z_INDEX
            });
            jQuery(canvasContainer).css({
                position: "relative",
                zIndex: CANVAS_Z_INDEX
            });
            top = parseInt(this.targetDiv.css("padding-top"), 10) + parseInt(canvasContainer.css("padding-top"), 10);
            left = parseInt(this.targetDiv.css("padding-left"), 10) + parseInt(canvasContainer.css("padding-left"), 10);
            this.canvasDiv = jQuery("<div>").addClass("div-canvas").css({
                position: "absolute",
                top: top,
                left: left
            }).prependTo(canvasContainer);
            this.reset();
        }
        DivCanvas.prototype.show = function() {
            return this.canvasDiv.show();
        };
        DivCanvas.prototype.hide = function() {
            return this.canvasDiv.hide();
        };
        DivCanvas.prototype.destroy = function() {
            return this.canvasDiv.remove();
        };
        DivCanvas.prototype.reset = function() {
            this.canvasDiv.empty();
            this.canvasDiv.css({
                width: this.targetDiv.width(),
                height: this.targetDiv.height()
            });
            return ElemFinder.prepare(this.locatorPattern, this.locatorSource);
        };
        DivCanvas.prototype.makeExtentDiv = function(t, l, w, h) {
            return jQuery("<div>").addClass("commentExtent").css({
                top: t,
                left: l,
                width: w,
                height: h
            })[0];
        };
        DivCanvas.prototype.makeImageFrame = function(img) {
            img = jQuery(img);
            return this.makeExtentDiv(img.position().top, img.position().left, img.outerWidth() + IMAGE_HIGHLIGHT_MARGIN, img.outerHeight() + IMAGE_HIGHLIGHT_MARGIN);
        };
        DivCanvas.prototype.elemsBetween = function(fromElem, toElem) {
            var elems, nextNode;
            elems = [];
            nextNode = fromElem.nextSibling;
            while (nextNode !== toElem) {
                if (!nextNode) return [];
                if (1 === nextNode.nodeType) elems.push(nextNode);
                nextNode = nextNode.nextSibling;
            }
            return elems;
        };
        DivCanvas.prototype.makeExtent = function(fromElem, toElem) {
            var divs, fromHeight, fromLeft, fromTd, fromTop, left, right, toHeight, toLeft, toTd, toTop, width, _this = this;
            divs = [];
            jQuery(this.elemsBetween(fromElem, toElem)).filter("img").each(function(index, elem) {
                return divs.push(_this.makeImageFrame(elem));
            });
            fromTop = ElemFinder.top(fromElem);
            fromLeft = ElemFinder.left(fromElem);
            fromHeight = ElemFinder.height(fromElem);
            toTop = ElemFinder.top(toElem);
            toLeft = ElemFinder.left(toElem);
            toHeight = ElemFinder.height(toElem);
            fromTd = jQuery(fromElem).closest("table.wiki_table td");
            toTd = jQuery(toElem).closest("table.wiki_table td");
            if (fromTd.length && fromTd.get(0) === toTd.get(0)) {
                left = fromTd.position().left;
                right = left + fromTd.innerWidth();
            } else {
                left = 0;
                right = this.canvasDiv.width();
            }
            if (Math.abs(fromTop - toTop) < 10) {
                width = toLeft - fromLeft;
                divs.push(this.makeExtentDiv(fromTop, fromLeft, width, fromHeight));
            } else if (this.isRtl(fromElem)) {
                if (fromLeft - left >= MINIMUM_MULTILINE_STARTING_EXTENT_WIDTH) divs.push(this.makeExtentDiv(fromTop, left, fromLeft - left, fromHeight));
                if (toTop - fromTop - fromHeight >= MINIMUM_MIDDLE_EXTENT_HEIGHT) divs.push(this.makeExtentDiv(fromTop + fromHeight, left, right - left, toTop - fromTop - fromHeight));
                divs.push(this.makeExtentDiv(toTop, toLeft, right - toLeft, toHeight));
            } else {
                if (right - fromLeft >= MINIMUM_MULTILINE_STARTING_EXTENT_WIDTH) divs.push(this.makeExtentDiv(fromTop, fromLeft, right - fromLeft, fromHeight));
                if (toTop - fromTop - fromHeight >= MINIMUM_MIDDLE_EXTENT_HEIGHT) divs.push(this.makeExtentDiv(fromTop + fromHeight, left, right - left, toTop - fromTop - fromHeight));
                divs.push(this.makeExtentDiv(toTop, left, toLeft - left, toHeight));
            }
            return jQuery(divs).appendTo(this.canvasDiv);
        };
        DivCanvas.prototype.isRtl = function(elem) {
            return "rtl" === jQuery(elem).css("direction") || "rtl" === jQuery(elem).parents("*[dir]").attr("dir");
        };
        return DivCanvas;
    }();
    ElemFinder = {
        top: function(elem) {
            var top;
            if (jQuery.browser.mozilla) return jQuery(elem).position().top - this.height(elem) + 2; else if (jQuery.browser.webkit) {
                jQuery(elem).html("&zwj;");
                top = jQuery(elem).position().top - 2;
                jQuery(elem).html("");
                return top;
            } else if (jQuery.browser.msie && !WikispacesCommentManager.readOnly && parseFloat(jQuery.browser.version) >= 10) return jQuery(elem).position().top - this.height(elem) + 4; else return jQuery(elem).position().top;
        },
        height: function(elem) {
            var height;
            if (jQuery.browser.msie) if (!WikispacesCommentManager.readOnly && parseFloat(jQuery.browser.version) >= 10) return parseInt(jQuery(elem).css("lineHeight").match(/^\d+/)[0], 10); else return jQuery(elem).get(0).offsetHeight; else {
                height = parseInt(jQuery(elem).css("lineHeight").match(/^\d+/), 10);
                if (_.isNaN(height)) return jQuery(elem).get(0).offsetHeight; else return height;
            }
        },
        left: function(elem) {
            var left, _ref;
            elem = jQuery(elem)[0];
            if (jQuery.browser.webkit) {
                jQuery(elem).html("&zwj;");
                left = jQuery(elem).position().left;
                jQuery(elem).html("");
                return left;
            } else if (jQuery.browser.msie && "true" === jQuery(null != (_ref = elem.ownerDocument) ? _ref.body : void 0).attr("contentEditable")) {
                jQuery(elem).html(" ");
                left = jQuery(elem).position().left;
                jQuery(elem).html("");
                return left;
            } else return jQuery(elem).position().left;
        },
        prepare: function(locatorPattern, source) {
            if (jQuery.browser.msie) return jQuery(locatorPattern, source).html("&zwj;"); else if (jQuery.browser.webkit) {
                jQuery("span.wkzw", source).remove();
                return jQuery("<span>").addClass("wkzw").html("&zwj;").insertBefore(jQuery(locatorPattern, source));
            }
        }
    };
    jQuery(document).ready(function() {
        var _this = this;
        WikispacesCommentManager.readOnly = true;
        jQuery(".commentColumn").on("click", function() {
            return WikispacesCommentManager.deselectAll();
        });
        jQuery(window).resize(function() {
            return WikispacesCommentManager.redrawAll();
        });
        jQuery(document).keydown(function(e) {
            var _ref, _ref1;
            if (!WikispacesCommentManager.openComment || WikispacesCommentManager.openComment.div.find("textarea").is(":focus")) return;
            switch (e.keyCode) {
              case 37:
              case 38:
                if (null != (_ref = WikispacesCommentManager.openComment.previous())) _ref.open({
                    noFocus: true
                });
                return false;

              case 39:
              case 40:
                if (null != (_ref1 = WikispacesCommentManager.openComment.next())) _ref1.open({
                    noFocus: true
                });
                return false;
            }
        });
        if (jQuery("#content_view a.range[name^=comment-]:first").size() > 0 && "C" !== ws.context.wiki.module) return WikispacesCommentManager.fetchPageViewComments();
    });
    commentFooter = '<div class="commentFooter modal-footer">\n  <div class="pull-left">\n    <button class="btn btn-small previous"><i class="icon-arrow-left"></i></button>\n    <button class="btn btn-small next"><i class="icon-arrow-right"></i></button>\n  </div>\n  <% if (ws.context.userCanAdministerWiki && !WikispacesCommentManager.readOnly) { %>\n  <div class="pull-right">\n    <button class="btn btn-small remove">Remove</button>\n  </div>\n  <% } %>\n</div>';
    contentTemplate = _.template('<div class="ws-box commentView">\n  <div class="comment-close">\n    <button type="button" class="closeme close" aria-hidden="true">&times;</button>\n  </div>\n  <div class="commentHeader">\n    <p class="ws-stream-meta command-context">\n      <a class="userLink userLinkPicture" href="<%= userCreated.url %>"><img class="userPicture" src="<%= userCreated.imageUrl %>" width="16" height="16"></a>\n      <a href="<%= userCreated.url %>"><%= userCreated.username %></a>\n      <% if (smartDate == \'__live__\') { %>\n      <abbr class="timeago" title="<%= (new Date(parseInt(dateCreated, 10) * 1000)).toISOString() %>">\n        <%= dateCreated %>\n      </abbr>\n      <% } else { %>\n        <%- smartDate %>\n      <% } %>  \n      <% if (ws.context.userCanAdministerWiki) { %>\n        <i class="icon-trash contextual-command delete ws-tip" title="Delete Comment"></i>\n      <% } %>\n    </p>\n  </div>\n\n    <div class="commentBody">\n      <div class="commentContent">\n        <%= description %>\n      </div>\n\n      <% for(i = 0; i < replyPages.length; i++) { %>\n        <% for(var j = 0; j < replyPages[i].digests.length; j++) { %>\n      <div class="commentReply" data-id="<%= replyPages[i].digests[j].id %>">\n        <p class="ws-stream-meta command-context">\n          <a class="userLink userLinkPicture" href="<%= replyPages[i].digests[j].userCreated.url %>"><img class="userPicture" src="<%= replyPages[i].digests[j].userCreated.imageUrl %>" width="16" height="16"></a>\n          <a href="<%= replyPages[i].digests[j].userCreated.url %>"><%= replyPages[i].digests[j].userCreated.username %></a>\n          <% if (smartDate == \'__live__\') { %>\n          <abbr class="timeago" title="<%= (new Date(parseInt(replyPages[i].digests[j].dateCreated, 10) * 1000)).toISOString() %>">\n            <%= new Date(parseInt(replyPages[i].digests[j].dateCreated, 10) * 1000).toLocaleString() %>\n          </abbr>\n          <% } else { %>\n            <%- smartDate %>\n          <% } %>  \n          <% if (ws.context.userCanAdministerWiki) { %>\n          <i class="icon-trash contextual-command delete-reply ws-tip" title="Delete Reply"></i>\n          <% } %>\n          </p>\n        <div class="commentContent"><%= replyPages[i].digests[j].body %></div>\n      </div>\n        <% } %>\n      <% } %>\n\n      <form class="reply commentReply">\n        <textarea name="reply" placeholder="Reply" class="ws-reveal ws-unrevealed" /></textarea>\n        <div class="btn-toolbar">\n          <button class="btn btn-small">Post</button>\n\n          <% if (ws.context.user.id) { %>\n            <% if (monitored) { %>\n            <button class="btn btn-small pull-right toggle-monitor ws-tip active" title="You are monitoring replies. Click to stop."><i class="icon-eye-open"></i></button>\n            <% } else { %>\n            <button class="btn btn-small pull-right toggle-monitor ws-tip" title="You are not monitoring replies. Click to monitor."><i class="icon-eye-open"></i></button>\n            <% } %>\n          <% } %>\n          <% if (ws.context.userCanAdministerWiki) { %>\n            <% if (locked) { %>\n            <button class="btn btn-small pull-right toggle-lock ws-tip active" title="Replies are not allowed. Click to allow."><i class="icon-lock"></i></button>\n            <% } else { %>\n            <button class="btn btn-small pull-right toggle-lock ws-tip" title="Replies are allowed. Click to disallow."><i class="icon-lock"></i></button>\n            <% } %>\n          <% } %>\n\n          <img src="/i/spinner.gif" class="spinner pull-right" style="display:none"/>\n        </div>\n      </form>\n   </div>\n\n  ' + commentFooter + "\n</div>");
    composerTemplate = _.template('<div class="ws-box commentView">\n  <div class="commentComposer">\n    <div class="comment-close">\n      &nbsp;<button type="button" class="close closeme" aria-hidden="true">&times;</button>\n    </div>\n    <div class="commentHeader">\n      <p class="ws-stream-meta command-context">\n        <img class="userPicture" src="<%= userCreated.imageUrl %>" width="16" height="16">\n        <a href="#" onclick="return false;"><%= userCreated.username %></a>\n      </p>\n    </div>\n    <div class="commentBody">\n      <textarea name="comment" class="compose" placeholder="Comment"/></textarea><br/>\n      <div class="btn-toolbar" style="margin-left: 6px">\n        <button class="btn btn-small monitored active pull-right" style="margin-left: 6px" onclick="jQuery(this).toggleClass(\'active\')"><i class="icon-eye-open"></i></button>\n        <button class="btn btn-small locked btn-toggle pull-right" onclick="jQuery(this).toggleClass(\'active\')"><i class="icon-lock"></i></button>\n        <button class="btn btn-small closeme">Save</button>\n      </div>\n    </div>\n  </div>\n  ' + commentFooter + "\n</div>");
    proxyTemplate = _.template('<div class="comment-proxy">\n  <span class="commentUser">\n  <% if (userCreated) { %>\n    <img class="userPicture" src="<%= userCreated.imageUrl %>" width="16" height="16">\n  <% } else { %>\n    <img class="userPicture" src="/i/user_none_sm.jpg" width="16" height="16">\n  <% } %>\n  </span>\n  <span class="commentReplies"><%= 1 + _(replyPages).reduce(function(memo, page){ return memo + page.digests.length; }, 0) %></span>\n</div>');
}).call(this);

ws.namespace("ws.dialog");

ws.dialog = function($, undefined) {
    var dialogStack = [];
    var $xDialog = null;
    $(document).ready(function() {
        if (wikispaces_isMobileSite) return;
        $(document).on("click", ".WikispacesDialogLink,.WikispacesModelessDialogLink", ws.common.makeLinkClickFunction(function() {
            var closeCallback = $(this).data("dialogonclose");
            var modeless = $(this).hasClass("WikispacesModelessDialogLink");
            ws.dialog.frameDialog(this.href, ws.common.resolveNameToBoundFunction(closeCallback), {
                modeless: modeless
            });
        }));
        $(".WikispacesXDomainDialogLink").on("click", ws.common.makeLinkClickFunction(function() {
            var url = $(this).attr("href");
            var gt = ws.common.getURLParameter("goto");
            if (!gt) gt = window.location.href;
            ws.common.addUriParams(url, [ [ "goto", gt ] ]);
            ws.dialog.xDomainDialog(url);
        }));
        $(document).on("dialogclose", function(event) {
            $(event.target).closest(".ui-dialog").find("*").addBack().remove();
        });
    });
    function sizeFrameToContent($iframe) {
        if ($iframe.get(0).contentWindow.document.body) {
            var newWidth = $("body", $iframe.get(0).contentWindow.document).width() + 20;
            if (newWidth > $iframe.attr("width")) $iframe.attr("width", newWidth);
            $iframe.attr("height", $("body", $iframe.get(0).contentWindow.document).height() + 40);
        }
    }
    function recenterDialog($dialog) {
        var top = Math.max(($(window).height() - $dialog.parent().height()) / 2.2, 0) + $(window).scrollTop();
        $dialog.parent().css("top", top + "px");
    }
    function dialogOnLoad(src, overlay, $dialog, $iframe) {
        var $dialogContent = $("#dialogContent", $iframe.get(0).contentWindow.document);
        if (0 === $dialogContent.length) {
            window.location.href = src;
            return;
        }
        if (0 === $dialogContent.contents().length) return;
        var $content = $dialogContent.find(".WikispacesContent");
        var width = $content.data("dialogwidth"), height = $content.data("dialogheight");
        if (width) $iframe.attr("width", width - 40);
        if (height) $iframe.attr("height", height);
        $dialog.dialog("option", {
            width: parseInt($iframe.attr("width"), 10) + 40,
            title: $content.find(".pageTitle").html()
        });
        $dialog.dialog("option", {
            width: parseInt($iframe.attr("width"), 10) + 40
        });
        if (overlay && !$dialog.dialog("isOpen")) {
            overlay.dialog("destroy");
            overlay = null;
        }
        $dialog.dialog("open");
        var iframeWindow = $iframe.get(0).contentWindow;
        iframeWindow.jQuery("body", iframeWindow.document).on("resize.dialog", function() {
            if ($iframe.is(":visible")) {
                sizeFrameToContent($iframe);
                ws.common.hideOverlappingEmbeds($dialog.closest(".ui-dialog"));
            }
            $(document).trigger("resize.dialog");
        });
        if (!$content.data("noresize")) sizeFrameToContent($iframe);
        recenterDialog($dialog);
        ws.common.hideOverlappingEmbeds($dialog.closest(".ui-dialog"));
        $dialogContent.find("input:visible, textarea:visible").first().focus();
    }
    function tabFrameDialog(title, tabs, width, height, selectedTab, closeCallback) {
        var overlay = ws.dialog.blankOverlay();
        var $dialog = $("<div>").addClass("frameDialog").css({
            padding: 0,
            overflow: "hidden"
        }).dialog({
            modal: true,
            resizable: false,
            draggable: false,
            title: title,
            width: width,
            autoOpen: false
        });
        dialogStack.push($dialog);
        var $tabs = $("<div id='tabs'><ul></ul></div>").appendTo($dialog);
        var tabsDeferred = $.Deferred();
        var selectedTabIndex = 0;
        _(tabs).each(function(tab, i) {
            $tabs.find("ul").append($('<li><a href="#tabs-' + i + '">' + tab.label + "</a></li>"));
            var deferred = $.Deferred();
            var $iframe = $("<iframe>").attr({
                src: ws.common.addUriParams(tab.path, [ [ "f", "dialog" ] ]),
                frameborder: "no",
                scrolling: "auto",
                width: width - 40,
                height: height
            }).on("load", function() {
                deferred.resolve();
            });
            $("<div>").attr("id", "tabs-" + i).data("tab-id", tab.id).data("iframe-onload", deferred.promise()).appendTo($tabs).append($iframe);
            if (tab.id == selectedTab || !selectedTab && 0 === i) {
                selectedTabIndex = i;
                deferred.done(function() {
                    var $dialogContent = $("#dialogContent", $iframe.get(0).contentWindow.document);
                    if (0 === $dialogContent.length) {
                        window.location.href = src;
                        return;
                    }
                    if (0 === $dialogContent.contents().length) return;
                    tabsDeferred.done(function() {
                        _.defer(function() {
                            sizeFrameToContent($iframe);
                            if (overlay) {
                                overlay.dialog("destroy");
                                overlay = null;
                            }
                            $dialog.dialog("open");
                            $tabs.tabs("option", "active", selectedTabIndex);
                            $tabs.tabs("option", "collapsible", false);
                            recenterDialog($dialog);
                            $(document).trigger("dialogonload", [ $dialog, $iframe ]);
                        });
                    });
                });
            }
            deferred.done(function() {
                var i$ = $iframe.get(0).contentWindow.jQuery;
                i$("body").on("resize.dialog", function() {
                    if ($iframe.is(":visible")) {
                        sizeFrameToContent($iframe);
                        ws.common.hideOverlappingEmbeds($dialog.closest(".ui-dialog"));
                    }
                    $(document).trigger("resize.dialog");
                });
            });
        });
        $tabs.tabs({
            collapsible: true,
            active: false,
            activate: function(event, ui) {
                ui.newPanel.data("iframe-onload").done(function() {
                    $panelIframe = $("iframe", ui.newPanel);
                    if (!$panelIframe.is(":visible")) return;
                    i$ = $panelIframe.get(0).contentWindow.jQuery;
                    i$("body").trigger("resize.dialog").find("input:visible, textarea:visible").first().focus();
                    i$("body").trigger("dialogShown");
                });
            }
        });
        tabsDeferred.resolve();
        $dialog.on("dialogclose", function() {
            ws.common.hideOverlappingEmbeds($dialog.closest(".ui-dialog"));
            dialogStack.pop();
            if (closeCallback) closeCallback();
        });
        return $dialog;
    }
    return {
        xDomainDialog: function(src) {
            if ($xDialog) $xDialog.dialog("close");
            var $iframe = $("<iframe>").attr({
                src: ws.common.addUriParams(src, [ [ "f", "dialog" ], [ "pwin", window.location.href ] ]),
                frameborder: "no",
                scrolling: "auto",
                width: 480,
                height: 300
            });
            var $dialog = $("<div>").addClass("frameDialog xDomainDialog").append($iframe).dialog({
                modal: true,
                draggable: false,
                resizable: false,
                autoOpen: true,
                minWidth: 490
            });
            $dialog.css("height", "auto");
            $xDialog = $dialog;
            $.receiveMessage(function(e) {
                var m;
                m = e.data.match(/title=(.*?)(?:&|$)/);
                if (m) {
                    $dialog.dialog("option", "title", ws.common.escapeHtml(decodeURIComponent(m[1])));
                    return;
                }
                m = e.data.match(/openDialog=(.+?)(?:&|$)/);
                if (m) {
                    $dialog.dialog("close");
                    $xDialog = null;
                    ws.dialog.frameDialog(decodeURIComponent(m[1]));
                    return;
                }
                m = e.data.match(/redirect=(.+?)(?:&|$)/);
                if (m) {
                    $dialog.dialog("close");
                    ws.dialog.blankOverlay();
                    window.location.href = decodeURIComponent(m[1]);
                    return;
                }
                if (e.data.match(/closeAndReload/)) {
                    $dialog.dialog("close");
                    ws.dialog.blankOverlay();
                    window.location.reload();
                    return;
                }
                if (e.data.match(/close/)) {
                    $dialog.dialog("close");
                    return;
                }
                m = e.data.match(/dim=(\d+)x(\d+)/);
                if (m) {
                    var w = Number(m[1]);
                    var h = Number(m[2]);
                    if (w > $iframe.attr("width")) {
                        $iframe.attr("width", w + 40);
                        $dialog.dialog("option", "width", w + 50);
                    }
                    $iframe.attr("height", h).css("height", h);
                    recenterDialog($dialog);
                }
            });
        },
        resizeXDomainFrame: function(parent_url) {
            $.postMessage({
                dim: $(document).width() + "x" + $(document).height()
            }, parent_url);
        },
        titleXDomainDialog: function(parent_url, title) {
            if (!title) title = $(".pageTitle").text();
            $.postMessage("title=" + encodeURIComponent(title), parent_url);
        },
        newObjectDialog: function(selectedTab) {
            var tabs = [ {
                id: "page",
                label: "New Page",
                path: ws.common.pathFor("space", "page")
            }, {
                id: "doc",
                label: "New Google Doc",
                path: ws.common.pathFor("doc", "create")
            }, {
                id: "files",
                label: "Upload Files",
                path: ws.common.pathFor("file", "upload")
            }, {
                id: "template",
                label: "New Template",
                path: ws.common.pathFor("space", "createtemplate")
            } ];
            if (!ws.context.instance.supportsGoogleDocs) tabs = [ tabs[0], tabs[2], tabs[3] ];
            var $dialog = tabFrameDialog("New", tabs, 750, 350, selectedTab, function() {
                $dialog.find("iframe").each(function(index, iframe) {
                    if (iframe.contentWindow.callFinally) iframe.contentWindow.callFinally();
                });
            });
            $dialog.on("tabsactivate", function(event, ui) {
                if ("files" == ui.newPanel.data("tab-id")) {
                    var iWin = ui.newPanel.find("iframe").get(0).contentWindow;
                    ui.newPanel.data("iframe-onload").done(function() {
                        iWin.ws.plupload.init(iWin.jQuery("#WikispacesUploader"), function() {
                            this.closest("body").trigger("resize.dialog");
                        });
                    });
                }
            });
            $("#tabs", $dialog).addClass("ui-tabs-vertical ui-helper-clearfix");
            $("#tabs li", $dialog).removeClass("ui-corner-top").addClass("ui-corner-left");
            $("iframe", $dialog).each(function() {
                var width = $(this).attr("width") - $(".ui-tabs-nav", $dialog).width();
                $(this).attr("width", width);
                $(this).closest(".ui-tabs-panel").css("width", width);
            });
        },
        frameDialog: function(src, closeCallback, opts) {
            var options = _.extend({
                modeless: false
            }, opts);
            try {
                if (window.parent != window && parent.ws && parent.ws.dialog) {
                    var $reparentedDialog = parent.ws.dialog.frameDialog(src, closeCallback, options);
                    if ($reparentedDialog.find("iframe")) $reparentedDialog.find("iframe").get(0).contentWindow.dialogParent = window;
                    return $reparentedDialog;
                }
            } catch (x) {}
            var overlay = null;
            if (!options.modeless) overlay = ws.dialog.blankOverlay();
            var $iframe = $("<iframe>").attr({
                src: ws.common.addUriParams(src, [ [ "f", "dialog" ] ]),
                frameborder: "no",
                scrolling: "auto"
            });
            var $dialog = $("<div>").addClass("frameDialog").append($iframe).dialog({
                modal: !options.modeless,
                draggable: options.modeless,
                resizable: false,
                autoOpen: false
            });
            dialogStack.push($dialog);
            $iframe.on("load", function() {
                dialogOnLoad(src, overlay, $dialog, $iframe);
                $(document).trigger("dialogonload", [ $dialog, $iframe ]);
            });
            $dialog.on("dialogclose", function() {
                ws.common.hideOverlappingEmbeds($dialog.closest(".ui-dialog"));
                dialogStack.pop();
                if (closeCallback) closeCallback();
            });
            $iframe.get(0).contentWindow.dialogParent = window;
            return $dialog;
        },
        closeDialog: function(opts) {
            if (!opts) opts = {};
            var $dialog = _(dialogStack).last();
            if ($dialog) $dialog.dialog("close");
            var topWindow = _(dialogStack).isEmpty() ? window : _(dialogStack).last().find("iframe").get(0).contentWindow;
            if (opts.reload) topWindow.location.reload(); else if (opts.redirect) {
                ws.dialog.blankOverlay();
                window.location.href = opts.redirect;
            } else if (opts.notices) {
                if ($dialog) {
                    $dialog.dialog("destroy");
                    $dialog.remove();
                }
                topWindow.ws.common.removeNotice();
                topWindow.ws.common.addJsonNotices(opts);
            }
        },
        blankOverlay: function() {
            return jQuery("<div>").dialog({
                modal: true
            }).closest(".ui-dialog").hide().end();
        }
    };
}(jQuery);

ws.namespace("ws.editableWebsite");

ws.editableWebsite = function($, undefined) {
    $(document).ready(function() {
        $("a.WikispacesEditableHideControls").click(function(event) {
            event.preventDefault();
            ws.editableWebsite.showControls(false);
        });
        $("a.WikispacesEditableShowControls").click(function(event) {
            event.preventDefault();
            ws.editableWebsite.showControls();
        });
    });
    return {
        controlsVisible: function() {
            var controls = $(".WikispacesEditableShowControls");
            if (0 === controls.length) return true;
            return !controls.is(":visible");
        },
        showControls: function(show) {
            if ("undefined" == typeof show) show = true;
            ret = $.ajax(ws.common.pathFor("wiki", "editable") + "?flag=" + (show + 0));
            $("a.WikispacesEditableShowControls").toggle(!show);
            $("a.WikispacesEditableHideControls").toggle(show);
            $(".WikiControls").toggle(show);
            if (!show) WikispacesCommentManager.hideAll();
            return ret;
        }
    };
}(jQuery);

ws.namespace("ws.editor");

ws.editor = function($, undefined) {
    var mainEditorId = "wsMainEditor";
    var corePlugins = [ "wscommon", "wsundo", "wslink", "wsstyle", "wstable", "wsimage", "wswidget", "wslist", "wsobjectresize", "wsselection", "wsblockformat", "autoresize", "rgbcolor", "wsbrtop", "wscommentspace" ];
    var mainPlugins = [ "wssave", "wsautosave", "wsundomain", "wspreview", "wspreviewtext", "wsassessment", "wsreference", "wsautoload", "wstext", "wslinktext", "wsimagetext", "wstabletext", "wswidgettext", "wsstyletext", "wstoolbarscroll", "wssubeditor", "wspopup", "wssavewithcommentpopup", "wsdraftrecoveredpopup", "wscleanuppopup", "wsconcurrenteditorpopup", "wsimagepopup", "wslinkpopup", "wsstylepopup", "wstablepopup", "wswidgetpopup", "wsimageoverlay", "wswidgetoverlay", "wstableoverlay", "wsexpireddraftpopup", "wslinkoverlay", "wscomment" ];
    var _editorDeferred = $.Deferred();
    return {
        _editorDeferred: _editorDeferred,
        editorLoaded: _editorDeferred.promise(),
        loadEditor: function(moreCoreOptions, moreMainOptions) {
            var coreOptions = {
                mode: "exact",
                language: "",
                convert_newlines_to_brs: false,
                apply_source_formatting: false,
                force_br_newlines: false,
                force_p_newlines: true,
                forced_root_block: "p",
                body_class: "wiki",
                formats: {
                    underline: {
                        inline: "u"
                    }
                },
                gecko_spellcheck: true,
                inline_styles: false,
                fix_list_elements: false,
                theme: "-subeditor",
                convert_urls: false
            };
            var mainOptions = {
                elements: mainEditorId,
                plugins: "-paste,-" + corePlugins.concat(mainPlugins).join(",-"),
                theme_wikispaces_toolbar_align: "left",
                theme_wikispaces_toolbar_location: "external",
                paste_remove_styles_if_webkit: false,
                paste_retain_style_properties: "all",
                paste_remove_word_images: false,
                wsautosave_enabled: "page" == wikispaces_object,
                wssubeditor_plugins: "-paste,-" + corePlugins.join(",-"),
                wssubeditor_options: $.extend({}, coreOptions, moreCoreOptions),
                button_tile_map: true,
                theme: "-wikispaces",
                add_form_submit_trigger: false,
                submit_patch: false,
                setup: function(ed) {
                    tinymce.mainEditor = ed;
                    ed.onInit.add(function(ed) {
                        ed.focus();
                    });
                }
            };
            if (tinyMCE.isIDevice) tinyMCE.isIDevice = false;
            tinyMCE.init($.extend({}, coreOptions, moreCoreOptions, mainOptions, moreMainOptions));
        },
        loadEditorPlugins: function(callback) {
            var cb, nocache = "?_=" + new Date().valueOf();
            $.each([ "wikispaces", "subeditor", "reference" ].reverse(), function(i, val) {
                var innerCb = cb;
                cb = function() {
                    tinymce.ThemeManager.load(val, "/s/js/editor/themes/" + val + "/editor_template_src.js" + nocache, innerCb);
                };
            });
            $.each([ "wscleanup" ].concat(corePlugins, mainPlugins).reverse(), function(i, val) {
                var lib = "";
                if (!this.match(/^ws/)) lib = "-lib";
                var innerCb = cb;
                cb = function() {
                    tinymce.PluginManager.load(val, "/s/js/editor" + lib + "/plugins/" + val + "/editor_plugin_src.js" + nocache, innerCb);
                };
            });
            cb();
            tinymce.ScriptLoader.loadQueue(callback);
        },
        loadEditorLibs: function(url) {
            var se = document.createElement("script");
            se.type = "text/javascript";
            se.src = url;
            document.getElementsByTagName("head")[0].appendChild(se);
        },
        enableButtons: function() {
            $(".editButton").css("cursor", "pointer").on("click.wsEditor", ws.common.makeLinkClickFunction(function() {
                $(this).off("click.wsEditor").addClass("Current");
                $(".WikispacesNotice").fadeOut();
                ws.common.displayBanner(false);
                ws.navigation.app.collapse();
                try {
                    ws.editor.disableEditButtons();
                    ws.editor.startEditor.call(this);
                } catch (e) {
                    ws.common.log(e);
                    return true;
                }
            }));
        },
        restoreButtons: function() {
            $(".editButton").off("click.wsEditor");
        },
        disableEditButtons: function(element) {
            $(element).find(".editButton").css("cursor", "default").attr("href", "#").off("click.wsEditor");
        }
    };
}(jQuery);

ws.namespace("ws.editor.content");

ws.editor.content = function($, undefined) {
    var content = {
        draftRecovered: '<div id="draftRecovered" class="wikispaces_message">' + '<p>We\'ve recovered an unsaved draft from <span id="recoveredDraftDate"></span>.</p>' + '<p id="outOfDateDraft" style="display: none;">' + 'However, another person has edited this page since your last draft.  If you continue, their changes will be overwritten. To view these changes, <a href="#">click here</a>.' + "</p>" + "<p>What would you like to do?</p>" + '<button class="wsbtn wsbtn-primary" id="recoverDraft">Edit from Recovered Draft</button>' + '<button class="wsbtn" id="discardDraft">Ignore Recovered Draft</button>' + "</div>",
        cleanupPopupContents: '<div id="cleanupPopupContents" style="padding: 5px;">' + "<h1>Style Cleanup</h1>" + '<p>Please wait while your page styles are being optimized. <img id="cleanupSpinner" style="vertical-align: top;" src="/i/spinner.gif" width="18" height="18" alt="please wait..."/></p>' + "</div>"
    };
    return {
        isLoaded: false,
        callbacks: [],
        loadContent: function(id) {
            if (content[id]) return content[id];
            throw "Unloaded editor part: " + id;
        },
        setContent: function(key, val) {
            content[key] = val;
        },
        add: function(func) {
            ws.editor.content.callbacks.push(func);
            if (ws.editor.content.isLoaded) func();
        },
        loaded: function() {
            ws.editor.content.isLoaded = true;
            $.each(ws.editor.content.callbacks, function(index, callback) {
                callback();
            });
        }
    };
}(jQuery);

jQuery(document).ready(function($) {
    var COOKIE = "tour";
    var hashLoading = false;
    var lastValidId = null;
    var leavingElem = null;
    guiders.CALCULATE_NEXT = "calculate";
    guiders.loaded = false;
    guiders._defaultSettings.expectedPath = null;
    guiders._defaultSettings.previousId = null;
    guiders._defaultSettings.xButton = true;
    guiders._defaultSettings.preShow = null;
    guiders._defaultSettings.overlay = true;
    guiders._defaultSettings.buttons = [];
    guiders.playlists = {};
    $(document).on("resize.dialog", function() {
        guiders.reposition();
    });
    guiders.loadGuiders = function() {
        if (wikispaces_isMobileSite || "C" == ws.context.wiki.module) return $.Deferred().reject().promise();
        if (guiders.loaded) return $.when();
        return $.ajax({
            url: "/wiki/guiders",
            dataType: "script",
            data: {
                wsobject: wikispaces_object,
                wsmethod: wikispaces_method,
                wspage: wikispaces_page
            }
        });
    };
    guiders.abortTour = function() {
        guiders.hideAll();
        if (leavingElem) $(leavingElem).on("click.guiderclick", function(event) {
            if (!event.isDefaultPrevented()) window.location.href = $(this).attr("href");
        }).click().off("click.guiderclick");
    };
    guiders.setMilestone = function(tour, stage) {
        $.ajax("/wiki/setmilestone/" + tour, {
            type: "POST",
            data: "stage=" + stage
        });
    };
    guiders.showPreviousStep = function() {
        guiders.show(lastValidId);
        lastValidId = null;
    };
    guiders.jumpToStep = function(guiderId) {
        guiders.hideAll();
        guiders.show(guiderId);
    };
    guiders.advanceGuidersAfterLoad = function(event) {
        var guiders = window.guiders;
        if (window.parent != window) guiders = window.parent.guiders;
        if (Cookie.get(COOKIE)) {
            var guider = guiders._guiderById(Cookie.get(COOKIE));
            var next = guider.next;
            if (next) Cookie.set(COOKIE, next);
        }
    };
    function isLinkExternal(url) {
        if (url.indexOf("http") == -1) return false;
        var base_url = url.replace("https://", "").replace("http://", "").split("/")[0];
        var current_url = location.href.replace("https://", "").replace("http://", "").split("/")[0];
        return base_url != current_url;
    }
    function attachTourWarnings() {
        $(document).on("click", "a", function(event) {
            var $a = $(this);
            var url = $a.attr("href");
            if (url && "javascript:" != url.substring(0, 11) && !$a.hasClass("guider_button") && !$a.hasClass("nextGuiderLink") && !$a.hasClass("editButton")) if (Cookie.get(COOKIE) && (isLinkExternal(url) || isNotExpectedPath(url))) {
                event.preventDefault();
                event.stopPropagation();
                lastValidId = Cookie.get(COOKIE);
                guiders.hideAll();
                leavingElem = this;
                guiders.show("misstep-leaving");
            }
        });
    }
    function loadFromCookie() {
        var tour_name = Cookie.get(COOKIE);
        if (tour_name) {
            var guiders = window.guiders;
            if (window.parent != window) guiders = window.parent.guiders;
            guiders.show(tour_name);
        }
    }
    function isMisstep(id) {
        return "misstep" == id.substring(0, 7);
    }
    function isNotExpectedPath(url) {
        url = url.replace("https://", "").replace("http://", "");
        url = url.substring(url.indexOf("/"), url.length);
        if ("#" == url) return false;
        var tour_id = Cookie.get(COOKIE);
        if (tour_id) {
            var guider = guiders._guiderById(tour_id);
            if (guider.expectedPath) return guider.expectedPath != url;
            return false;
        }
        return false;
    }
    function checkNext() {
        var currentGuider = guiders._guiders[guiders._currentGuiderID];
        if (currentGuider.next == guiders.CALCULATE_NEXT) {
            var parts = currentGuider.id.split("-");
            if (3 == parts.length) {
                var next = guiders.playlists[parts[0]][parts[1]];
                if (next) currentGuider.next = next; else currentGuider.next = guiders.playlists[parts[0]]["final"];
            } else currentGuider.next = "misstep-no-return";
        }
    }
    guiders._showOverlay = function() {};
    guiders._highlightElement = function(selector) {
        if ("function" == typeof selector) selector = selector();
        $(document).mask(selector);
    };
    guiders._dehighlightElement = function(selector) {
        $(document).mask(false);
    };
    (function() {
        var orig = guiders._showIfHashed;
        guiders._showIfHashed = function(myGuider) {
            hashLoading = true;
            orig.call(guiders, myGuider);
            hashLoading = false;
        };
    })();
    (function() {
        var orig = guiders.createGuider;
        guiders.createGuider = function(passedSettings) {
            if (!passedSettings.highlight) {
                if (!$(".hiddenHighlight").length) {
                    var hidden = $('<div class="hiddenHighlight" style="display: none;"></div>');
                    $("body").append(hidden);
                }
                passedSettings.highlight = ".hiddenHighlight";
            }
            orig.apply(guiders, arguments);
            var myGuider = guiders._guiders[guiders._lastCreatedGuiderID];
            myGuider.elem.find("h1").css("width", myGuider.width - 20 + "px");
        };
    })();
    (function() {
        var orig = guiders.hideAll;
        guiders.hideAll = function() {
            orig.apply(guiders, arguments);
            Cookie.erase(COOKIE);
            guiders._currentGuiderID = null;
        };
    })();
    (function() {
        var orig = guiders.next;
        guiders.next = function() {
            var guiders = window.guiders;
            if (window.parent != window) guiders = window.parent.guiders;
            checkNext();
            if (Cookie.get(COOKIE)) orig.apply(guiders, arguments);
        };
    })();
    (function() {
        var orig = guiders.reposition;
        guiders.reposition = function() {
            orig.apply(guiders, arguments);
            if (guiders._currentGuiderID) {
                var guider = guiders._guiderById(guiders._currentGuiderID);
                if (guider.highlight) {
                    guiders._dehighlightElement(guider.highlight);
                    guiders._highlightElement(guider.highlight);
                }
                var elem = $(guider.elem);
                var resized = false;
                var left = elem.offset().left;
                if (left < 0) {
                    elem.width(elem.width() + left - 1);
                    resized = true;
                }
                if (left + elem.width() > $("body").width()) {
                    elem.width($("body").width() - left);
                    resized = true;
                }
                var top = elem.offset().top;
                if (top < 0) {
                    elem.height(elem.height() + top - 1);
                    resized = true;
                }
                if (top + elem.height() > $("body").height()) {
                    elem.height($("body").height() - top);
                    resized = true;
                }
                if (resized) {
                    orig.apply(guiders, arguments);
                    guiders._styleArrow(myGuider);
                }
            }
        };
    })();
    (function() {
        var orig = guiders.show;
        guiders.show = function(id) {
            $(".nextGuiderLink").removeClass("nextGuiderLink");
            var myGuider = guiders._guiderById(id);
            if (myGuider.expectedPath && myGuider.expectedPath != window.location.pathname) {
                Cookie.set(COOKIE, id);
                window.location = myGuider.expectedPath + window.location.hash;
                return;
            }
            var actualShow = function() {
                try {
                    orig.call(guiders, id);
                    guiders._styleArrow(myGuider);
                    if (!isMisstep(id)) Cookie.set(COOKIE, id);
                } catch (e) {
                    guiders.hideAll();
                    if ("misstep-no-return" == id) alert("There was a problem with the help system."); else guiders.show("misstep-no-return");
                    return;
                }
            };
            if ("function" == typeof myGuider.preShow) {
                var preShowPromise = myGuider.preShow.call(guiders);
                preShowPromise.done(actualShow);
            } else actualShow();
        };
        if ((Cookie.get(COOKIE) || 1 == window.location.hash.indexOf("guider")) && window.parent == window) $(window).load(function() {
            guiders.loadGuiders().done(function() {
                if (!hashLoading) loadFromCookie();
            });
        });
        attachTourWarnings();
    })();
});

ws.namespace("ws.guidercontent");

ws.guidercontent = function($, undefined) {
    var content = {};
    return {
        set: function(key, value) {
            content[key] = value;
        },
        get: function(id) {
            if (content[id]) return content[id];
            throw "Unloaded guider stages content " + id;
        }
    };
}(jQuery);

ws.namespace("ws.guiders.stages");

ws.guiders.stages = function($, undefined) {
    var startEditor = function(callback) {
        var d = $.Deferred();
        d.done(callback);
        ws.editor.editorLoaded.done(function() {
            $("#recoverDraft").click();
            d.resolve();
        });
        return d.promise();
    };
    var uploadDialog = function() {
        var d1 = $.Deferred();
        if ($(".frameDialog").length) {
            d1.resolve();
            return $.when();
        }
        $(document).on("dialogonload.guiders", function(event, $dialog, $iframe) {
            if ($iframe.attr("src").indexOf("/file/upload") !== -1) {
                $(document).off("dialogonload.guiders");
                d1.resolve();
            }
        });
        ws.dialog.newObjectDialog("files");
        return d1;
    };
    function Stages() {
        this.createMiscStages = function() {
            guiders.createGuider({
                id: "misstep-no-return",
                title: ws.guidercontent.get("misstep1Title"),
                description: ws.guidercontent.get("misstep1Description"),
                buttons: [ {
                    name: ws.guidercontent.get("buttonEndTour"),
                    onclick: function(event) {
                        guiders.hideAll();
                        event.preventDefault();
                    }
                } ]
            });
            guiders.createGuider({
                id: "misstep-leaving",
                title: ws.guidercontent.get("misstep2Title"),
                description: ws.guidercontent.get("misstep2Description"),
                buttons: [ {
                    name: ws.guidercontent.get("buttonGoBack"),
                    onclick: function(event) {
                        guiders.hideAll();
                        guiders.showPreviousStep();
                        event.preventDefault();
                    }
                }, {
                    name: ws.guidercontent.get("buttonEndTour"),
                    onclick: function(event) {
                        guiders.abortTour();
                        event.preventDefault();
                    }
                } ]
            });
        };
        this.createintroStage = function(tourname, next_guider_id, positionToActions, pageUrl) {
            guiders.createGuider({
                id: tourname + "-intro-1",
                next: tourname + "-intro-2",
                title: ws.guidercontent.get("intro1Title"),
                description: ws.guidercontent.get("intro1Description"),
                buttons: [ {
                    name: ws.guidercontent.get("buttonEndTour"),
                    onclick: function(event) {
                        guiders.hideAll();
                        event.preventDefault();
                    }
                }, {
                    name: ws.guidercontent.get("buttonNext"),
                    onclick: function(event) {
                        guiders.next();
                        event.preventDefault();
                    }
                } ],
                expectedPath: pageUrl
            });
            guiders.createGuider({
                id: tourname + "-intro-2",
                next: next_guider_id,
                title: ws.guidercontent.get("intro2Title"),
                description: ws.guidercontent.get("intro2Description"),
                buttons: [ {
                    name: ws.guidercontent.get("buttonNext"),
                    onclick: function(event) {
                        guiders.next();
                        event.preventDefault();
                    }
                } ],
                preShow: function() {
                    var d = $.Deferred();
                    $(document).on("showPanel", function(event, name) {
                        if ("Help" == name) d.resolve();
                    });
                    ws.navigation.app.show("Help");
                    return d.promise();
                },
                onShow: function() {
                    $(".WikiInternalHeaderNav a").on("click.guider", function(event) {
                        event.preventDefault();
                        event.stopImmediatePropagation();
                        event.stopPropagation();
                    });
                },
                onHide: function() {
                    ws.navigation.app.collapse();
                    jQuery(".WikiInternalHeaderNav a").off("click.guider");
                },
                attachTo: ".WikiInternalHeaderNav",
                highlight: ".WikiInternalHeaderNav",
                position: 9
            });
        };
        this.createeditStage = function(tourname, next_guider_id, positionToActions, pageUrl) {
            guiders.createGuider({
                id: tourname + "-edit-1",
                next: tourname + "-edit-2",
                title: ws.guidercontent.get("edit1Title"),
                description: ws.guidercontent.get("edit1Description"),
                attachTo: ".editButton",
                position: 6,
                highlight: ".editButton",
                preShow: function() {
                    return ws.editableWebsite.showControls();
                },
                onShow: function() {
                    ws.editor.restoreButtons();
                    $(".editButton").on("click.guider", guiders.next);
                },
                onHide: function() {
                    $(".editButton").off("click.guider");
                },
                expectedPath: pageUrl
            });
            guiders.createGuider({
                id: tourname + "-edit-2",
                next: tourname + "-edit-3",
                title: ws.guidercontent.get("edit2Title"),
                description: ws.guidercontent.get("edit2Description"),
                attachTo: "#wsMainEditor_container",
                highlight: "#wsMainEditor_container",
                buttons: [ {
                    name: ws.guidercontent.get("buttonNext"),
                    onclick: function(event) {
                        guiders.next();
                        event.preventDefault();
                    }
                } ],
                preShow: startEditor,
                expectedPath: ws.common.pathFor("page", "edit", wikispaces_page)
            });
            guiders.createGuider({
                id: tourname + "-edit-3",
                next: tourname + "-edit-4",
                title: ws.guidercontent.get("edit3Title"),
                description: ws.guidercontent.get("edit3Description"),
                attachTo: "#wsMainEditor_wssave_action",
                position: 9,
                highlight: "#wsMainEditor_wssave_action",
                preShow: startEditor,
                onShow: function() {
                    $("#wsMainEditor_wssave_action").on("click.guider", guiders.advanceGuidersAfterLoad);
                },
                onHide: function() {
                    ws.editor.editorLoaded.done(function() {
                        $("#wsMainEditor_wssave_action").off("click.guider");
                    });
                },
                expectedPath: ws.common.pathFor("page", "edit", wikispaces_page)
            });
            guiders.createGuider({
                id: tourname + "-edit-4",
                next: next_guider_id,
                title: ws.guidercontent.get("edit4Title"),
                description: ws.guidercontent.get("edit4Description"),
                buttons: [ {
                    name: ws.guidercontent.get("buttonNext"),
                    onclick: function(event) {
                        guiders.next();
                        event.preventDefault();
                    }
                } ],
                onShow: function() {
                    guiders.setMilestone(tourname, "edit");
                }
            });
        };
        this.createfileStage = function(tourname, next_guider_id, positionToActions, pageUrl) {
            guiders.createGuider({
                id: tourname + "-file-1",
                next: tourname + "-file-2",
                title: ws.guidercontent.get("file1Title"),
                description: ws.guidercontent.get("file1Description"),
                buttons: [ {
                    name: ws.guidercontent.get("buttonNext"),
                    onclick: function(event) {
                        guiders.next();
                        event.preventDefault();
                    }
                } ]
            });
            guiders.createGuider({
                id: tourname + "-file-2",
                next: tourname + "-file-3",
                title: ws.guidercontent.get("file2Title"),
                description: ws.guidercontent.get("file2Description"),
                attachTo: "#WikiActionPagesAndFiles",
                position: positionToActions,
                highlight: "#WikiActionPagesAndFiles .WikiActionSupplemental",
                onShow: function() {
                    $(document).one("dialogonload.guiders", function(event, $dialog, $iframe) {
                        guiders.next();
                    });
                },
                onHide: function() {
                    $(document).off("dialogonload.guider");
                }
            });
            guiders.createGuider({
                id: tourname + "-file-3",
                next: tourname + "-file-4",
                title: ws.guidercontent.get("file3Title"),
                description: ws.guidercontent.get("file3Description"),
                attachTo: ".ui-dialog",
                highlight: function() {
                    return $(".frameDialog #tabs li").eq(-2);
                },
                position: 9,
                preShow: function() {
                    if ($(".frameDialog").length) return $.when();
                    var d = $.Deferred();
                    $(document).one("dialogonload", function(event) {
                        d.resolve();
                    });
                    $("#WikiActionPagesAndFiles .WikiActionSupplemental a").click();
                    return d.promise();
                },
                onShow: function() {
                    $(document).on("dialogTabChanged.guider", function(e, tab) {
                        if ("upload" == tab) guiders.next();
                    });
                },
                onHide: function() {
                    $(document).off("dialogTabChanged.guider");
                },
                expectedPath: pageUrl
            });
            guiders.createGuider({
                id: tourname + "-file-4",
                next: tourname + "-file-5",
                title: ws.guidercontent.get("file4Title"),
                description: ws.guidercontent.get("file4Description"),
                preShow: uploadDialog,
                onShow: function() {
                    $(document).on("fileUploaded.guider", guiders.next);
                },
                onHide: function() {
                    $(document).off("fileUploaded.guider");
                },
                attachTo: ".ui-tabs-panel:visible",
                highlight: ".ui-tabs-panel:visible",
                position: 9
            });
            guiders.createGuider({
                id: tourname + "-file-5",
                next: tourname + "-file-6",
                title: ws.guidercontent.get("file5Title"),
                description: ws.guidercontent.get("file5Description"),
                preShow: uploadDialog,
                onShow: function() {
                    $(document).on("dialogclose.guider", ".ui-dialog", guiders.next);
                },
                onHide: function() {
                    $(document).off("dialogclose.guider");
                },
                attachTo: ".ui-dialog-titlebar-close",
                position: 3,
                highlight: ".ui-dialog-titlebar-close",
                expectedPath: pageUrl
            });
            guiders.createGuider({
                id: tourname + "-file-6",
                next: tourname + "-file-7",
                title: ws.guidercontent.get("file6Title"),
                description: ws.guidercontent.get("file6Description"),
                attachTo: ".editButton",
                position: 6,
                highlight: ".editButton",
                onShow: function() {
                    ws.editor.restoreButtons();
                    $(".editButton").on("click.guider", guiders.next);
                },
                onHide: function() {
                    $(".editButton").off(".guider");
                },
                expectedPath: pageUrl
            });
            guiders.createGuider({
                id: tourname + "-file-7",
                next: tourname + "-file-8",
                title: ws.guidercontent.get("file7Title"),
                description: ws.guidercontent.get("file7Description"),
                attachTo: "#wsMainEditor_wsimage",
                position: 6,
                highlight: "#wsMainEditor_wsimage",
                preShow: startEditor,
                onShow: function() {
                    $("#wsMainEditor_wsimage").addClass("nextGuiderLink").on("click.guider", guiders.next);
                },
                onHide: function() {
                    ws.editor.editorLoaded.done(function() {
                        $(document).off("click.guider");
                    });
                },
                expectedPath: ws.common.pathFor("page", "edit", wikispaces_page)
            });
            guiders.createGuider({
                id: tourname + "-file-8",
                next: tourname + "-file-9",
                title: ws.guidercontent.get("file8Title"),
                description: ws.guidercontent.get("file8Description"),
                attachTo: ".fileList",
                highlight: "#imageDivTable .fileList, #imageDivTable .inputArea, #imageDivTable #imagePages",
                position: 3,
                preShow: function() {
                    return startEditor(function() {
                        if (!$(".wsPopup .fileList").length) tinymce.activeEditor.wsExecCommand("wsimage");
                    });
                },
                onShow: function() {
                    $(".fileList").on("click.guider", "li", guiders.next);
                },
                onHide: function() {
                    ws.editor.editorLoaded.done(function() {
                        $(".fileList li").off("click.guider");
                    });
                },
                expectedPath: ws.common.pathFor("page", "edit", wikispaces_page)
            });
            guiders.createGuider({
                id: tourname + "-file-9",
                next: tourname + "-file-10",
                title: ws.guidercontent.get("file9Title"),
                description: ws.guidercontent.get("file9Description"),
                attachTo: "#wsMainEditor_wssave_action",
                position: 6,
                highlight: "#wsMainEditor_wssave_action",
                preShow: startEditor,
                onShow: function() {
                    $("#wsMainEditor_wssave_action").on("click.guider", guiders.advanceGuidersAfterLoad);
                },
                onHide: function() {
                    ws.editor.editorLoaded.done(function() {
                        $("#wsMainEditor_wssave_action").off("click.guider");
                    });
                },
                expectedPath: ws.common.pathFor("page", "edit", wikispaces_page)
            });
            guiders.createGuider({
                id: tourname + "-file-10",
                next: next_guider_id,
                title: ws.guidercontent.get("file10Title"),
                description: ws.guidercontent.get("file10Description"),
                buttons: [ {
                    name: ws.guidercontent.get("buttonNext"),
                    onclick: function(event) {
                        guiders.next();
                        event.preventDefault();
                    }
                } ],
                onShow: function() {
                    guiders.setMilestone(tourname, "file");
                },
                expectedPath: pageUrl
            });
        };
        this.createnavStage = function(tourname, next_guider_id, positionToActions, pageUrl) {
            guiders.createGuider({
                id: tourname + "-nav-1",
                next: tourname + "-nav-2",
                title: ws.guidercontent.get("nav1Title"),
                description: ws.guidercontent.get("nav1Description"),
                preShow: function() {
                    return ws.navbar.setEditMode(false);
                },
                buttons: [ {
                    name: ws.guidercontent.get("buttonNext"),
                    onclick: function(event) {
                        guiders.next();
                        event.preventDefault();
                    }
                } ]
            });
            guiders.createGuider({
                id: tourname + "-nav-2",
                next: tourname + "-nav-3",
                title: ws.guidercontent.get("nav2Title"),
                description: ws.guidercontent.get("nav2Description"),
                attachTo: ".WikispacesNavbar",
                position: positionToActions,
                highlight: ".WikispacesNavbar",
                preShow: function() {
                    return ws.navbar.setEditMode(false);
                },
                buttons: [ {
                    name: ws.guidercontent.get("buttonNext"),
                    onclick: function(event) {
                        guiders.next();
                        event.preventDefault();
                    }
                } ]
            });
            var origSetEditMode = ws.navbar.setEditMode;
            guiders.createGuider({
                id: tourname + "-nav-3",
                next: tourname + "-nav-4",
                title: ws.guidercontent.get("nav3Title"),
                description: ws.guidercontent.get("nav3Description"),
                attachTo: ".WikispacesCustomNavEdit",
                position: positionToActions,
                highlight: ".WikispacesCustomNavEdit",
                preShow: function() {
                    return ws.navbar.setEditMode(false);
                },
                onShow: function() {
                    ws.navbar.setEditMode = function() {
                        return origSetEditMode.apply(this, arguments).done(function() {
                            guiders.next();
                        });
                    };
                },
                onHide: function() {
                    ws.navbar.setEditMode = origSetEditMode;
                }
            });
            var origAddTag = ws.navbar.addTag;
            guiders.createGuider({
                id: tourname + "-nav-4",
                next: tourname + "-nav-5",
                title: ws.guidercontent.get("nav4Title"),
                description: ws.guidercontent.get("nav4Description"),
                attachTo: "#WikispacesNavbarOptions",
                position: positionToActions,
                highlight: "#WikispacesNavbarOptions .WikispacesNavbarNewTagNavbarForm",
                preShow: function() {
                    return ws.navbar.setEditMode();
                },
                onShow: function() {
                    ws.navbar.addTag = function() {
                        return origAddTag.apply(this, arguments).done(function() {
                            guiders.next();
                        });
                    };
                },
                onHide: function() {
                    ws.navbar.addTag = origAddTag;
                }
            });
            guiders.createGuider({
                id: tourname + "-nav-5",
                next: tourname + "-nav-6",
                title: ws.guidercontent.get("nav5Title"),
                description: ws.guidercontent.get("nav5Description"),
                attachTo: "#WikispacesNavbarTags",
                position: positionToActions,
                highlight: ".WikispacesNavbar",
                preShow: function() {
                    return ws.navbar.setEditMode();
                },
                buttons: [ {
                    name: ws.guidercontent.get("buttonNext"),
                    onclick: function(event) {
                        guiders.next();
                        event.preventDefault();
                    }
                } ]
            });
            var origShowMorePageBar = ws.common.showMorePageBar;
            guiders.createGuider({
                id: tourname + "-nav-6",
                next: tourname + "-nav-7",
                title: ws.guidercontent.get("nav6Title"),
                description: ws.guidercontent.get("nav6Description"),
                attachTo: ".ws-btn-more",
                position: 6,
                highlight: ".ws-btn-more",
                preShow: function() {
                    return ws.navbar.setEditMode();
                },
                onShow: function() {
                    ws.common.showMorePageBar = function() {
                        origShowMorePageBar.apply(this, arguments);
                        guiders.next();
                    };
                },
                onHide: function() {
                    ws.common.showMorePageBar = origShowMorePageBar;
                },
                expectedPath: pageUrl
            });
            var origHideMorePageBar = ws.common.hideMorePageBar;
            var origHideTagDropdown = ws.common.hideTagDropdown;
            var origShowTagDropdown = ws.common.showTagDropdown;
            guiders.createGuider({
                id: tourname + "-nav-7",
                next: tourname + "-nav-8",
                title: ws.guidercontent.get("nav7Title"),
                description: ws.guidercontent.get("nav7Description"),
                attachTo: ".ws-more-menu",
                position: 6,
                highlight: ".ws-more-menu .ws-tag-dropdown-toggle",
                preShow: function() {
                    return ws.navbar.setEditMode().done(function() {
                        ws.common.showMorePageBar();
                        $(".ws-more-menu .WikiTagsEdit:visible .WikiTagFormCancel").click();
                        $(".ws-more-menu .dropdown.open .ws-tag-dropdown-toggle").click();
                    });
                },
                onShow: function() {
                    ws.common.hideMorePageBar = function() {};
                    ws.common.hideTagDropdown = function() {};
                    ws.common.showTagDropdown = function() {
                        origShowTagDropdown.apply(this, arguments);
                        guiders.next();
                    };
                },
                onHide: function() {
                    ws.common.hideMorePageBar = origHideMorePageBar;
                    ws.common.hideTagDropdown = origHideTagDropdown;
                    ws.common.showTagDropdown = origShowTagDropdown;
                },
                expectedPath: pageUrl
            });
            var origTagShowInput = ws.tags.showInput;
            guiders.createGuider({
                id: tourname + "-nav-8",
                next: tourname + "-nav-9",
                title: ws.guidercontent.get("nav8Title"),
                description: ws.guidercontent.get("nav8Description"),
                attachTo: ".ws-more-menu",
                position: 6,
                highlight: ".ws-more-menu .ws-tag-dropdown-menu",
                preShow: function() {
                    return ws.navbar.setEditMode().done(function() {
                        ws.common.showMorePageBar();
                        $(".ws-more-menu .WikiTagsEdit:visible .WikiTagFormCancel").click();
                        $(".ws-more-menu .dropdown:not(.open) .ws-tag-dropdown-toggle").click();
                    });
                },
                onShow: function() {
                    ws.common.hideMorePageBar = function() {};
                    ws.common.hideTagDropdown = function() {};
                    ws.tags.showInput = function() {
                        origTagShowInput.apply(this, arguments);
                        guiders.next();
                    };
                },
                onHide: function() {
                    ws.common.hideMorePageBar = origHideMorePageBar;
                    ws.common.hideTagDropdown = origHideTagDropdown;
                    ws.tags.showInput = origTagShowInput;
                },
                expectedPath: pageUrl
            });
            var origRefresh = ws.navbar.refresh;
            guiders.createGuider({
                id: tourname + "-nav-9",
                next: tourname + "-nav-10",
                title: ws.guidercontent.get("nav9Title"),
                description: ws.guidercontent.get("nav9Description"),
                attachTo: ".ws-more-menu",
                position: 6,
                highlight: ".ws-more-menu .ws-tag-dropdown-menu .WikiTagInput, .ws-more-menu .ws-tag-dropdown-menu .ws-tag-form-save",
                preShow: function() {
                    return ws.navbar.setEditMode().done(function() {
                        ws.common.showMorePageBar();
                        $(".ws-more-menu .dropdown:not(.open) .ws-tag-dropdown-toggle").click();
                        $(".ws-more-menu .WikiTagList:visible .WikiTagsEditLink").click();
                    });
                },
                onShow: function() {
                    ws.common.hideMorePageBar = function() {};
                    ws.common.hideTagDropdown = function() {};
                    $(".WikiTagsEdit .ws-tag-form-save").on("click.guider", function() {
                        $(document).mask();
                    });
                    ws.navbar.refresh = function(force) {
                        return origRefresh.apply(this, arguments).done(function() {
                            if (force) guiders.next();
                        });
                    };
                },
                onHide: function() {
                    ws.common.hideMorePageBar = origHideMorePageBar;
                    ws.common.hideTagDropdown = origHideTagDropdown;
                    ws.navbar.refresh = origRefresh;
                    $(".WikiTagsEdit .ws-tag-form-save").off("click.guider");
                },
                expectedPath: pageUrl
            });
            guiders.createGuider({
                id: tourname + "-nav-10",
                next: tourname + "-nav-11",
                title: ws.guidercontent.get("nav10Title"),
                description: ws.guidercontent.get("nav10Description"),
                attachTo: ".WikispacesNavbar",
                position: positionToActions,
                highlight: ".WikispacesNavbar",
                preShow: function() {
                    return ws.navbar.setEditMode();
                },
                onShow: function() {
                    ws.common.hideMorePageBar();
                },
                buttons: [ {
                    name: ws.guidercontent.get("buttonNext"),
                    onclick: function(event) {
                        guiders.next();
                        event.preventDefault();
                    }
                } ]
            });
            origSetEditMode = ws.navbar.setEditMode;
            guiders.createGuider({
                id: tourname + "-nav-11",
                next: next_guider_id,
                title: ws.guidercontent.get("nav11Title"),
                description: ws.guidercontent.get("nav11Description"),
                attachTo: ".WikispacesNavbarEditDone",
                position: positionToActions,
                highlight: ".WikispacesNavbarEditDone",
                preShow: function() {
                    return ws.navbar.setEditMode();
                },
                onShow: function() {
                    ws.navbar.setEditMode = function() {
                        return origSetEditMode.apply(this, arguments).done(function() {
                            guiders.setMilestone(tourname, "nav");
                            guiders.next();
                        });
                    };
                },
                onHide: function() {
                    ws.navbar.setEditMode = origSetEditMode;
                }
            });
        };
        this.createinviteStage = function(tourname, next_guider_id, positionToActions) {
            guiders.createGuider({
                id: tourname + "-invite-1",
                next: tourname + "-invite-2",
                title: ws.guidercontent.get("invite1Title"),
                description: ws.guidercontent.get("invite1Description"),
                buttons: [ {
                    name: ws.guidercontent.get("buttonNext"),
                    onclick: function(event) {
                        guiders.next();
                        event.preventDefault();
                    }
                } ]
            });
            guiders.createGuider({
                id: tourname + "-invite-2",
                next: tourname + "-invite-3",
                title: ws.guidercontent.get("invite2Title"),
                description: ws.guidercontent.get("invite2Description"),
                attachTo: "#WikiActionMembers",
                position: positionToActions,
                highlight: "#WikiActionMembers .WikiActionSupplemental",
                onShow: function() {
                    $(document).one("dialogonload.guiders", function(event, $dialog, $iframe) {
                        guiders.next();
                    });
                },
                onHide: function() {
                    $(document).off("dialogonload.guider");
                }
            });
            guiders.createGuider({
                id: tourname + "-invite-3",
                next: tourname + "-invite-4",
                title: ws.guidercontent.get("invite3Title"),
                description: ws.guidercontent.get("invite3Description"),
                attachTo: ".ui-dialog",
                highlight: ".frameDialog",
                position: 9,
                buttons: [ {
                    name: ws.guidercontent.get("buttonSkip"),
                    onclick: function(event) {
                        guiders.next();
                        $(".ui-dialog .ui-dialog-titlebar-close").click();
                        event.preventDefault();
                    }
                } ],
                preShow: function() {
                    var d = $.Deferred();
                    if (!$(".frameDialog").length) {
                        $(document).one("dialogonload.guiders", function(event, $dialog, $iframe) {
                            d.resolve();
                        });
                        $("#WikiActionMembers .WikiActionSupplemental a").addClass("nextGuiderLink").click().removeClass("nextGuiderLink");
                    } else d.resolve();
                    return d.promise();
                },
                onShow: function() {
                    $(document).on("dialogclose.guider", guiders.next);
                },
                onHide: function() {
                    $(document).off("dialogclose.guider");
                }
            });
            guiders.createGuider({
                id: tourname + "-invite-4",
                next: tourname + "-invite-5",
                title: ws.guidercontent.get("invite4Title"),
                description: ws.guidercontent.get("invite4Description"),
                attachTo: "#WikiActionMembers",
                position: positionToActions,
                onShow: function() {
                    $('#WikiActionMembers a:not(".WikispacesDialogLink")').on("click.guider", guiders.next);
                },
                onHide: function() {
                    $('#WikiActionMembers a:not(".WikispacesDialogLink")').off("click.guider");
                },
                highlight: "#WikiActionMembers a:not('.WikispacesDialogLink')"
            });
            guiders.createGuider({
                id: tourname + "-invite-5",
                next: next_guider_id,
                title: ws.guidercontent.get("invite5Title"),
                description: ws.guidercontent.get("invite5Description"),
                highlight: ".PendingEmailInvitations table.cob > *, #WikiTableMemberList table.cob > *",
                buttons: [ {
                    name: ws.guidercontent.get("buttonNext"),
                    onclick: function(event) {
                        guiders.next();
                        event.preventDefault();
                    }
                } ],
                onShow: function() {
                    guiders.setMilestone(tourname, "invite");
                },
                expectedPath: "/wiki/members"
            });
        };
        this.createpermissionsStage = function(tourname, next_guider_id, positionToActions) {
            guiders.createGuider({
                id: tourname + "-permissions-1",
                next: tourname + "-permissions-2",
                title: ws.guidercontent.get("permissions1Title"),
                description: ws.guidercontent.get("permissions1Description"),
                buttons: [ {
                    name: ws.guidercontent.get("buttonNext"),
                    onclick: function(event) {
                        guiders.next();
                        event.preventDefault();
                    }
                } ],
                preShow: function() {
                    return ws.editableWebsite.showControls();
                }
            });
            guiders.createGuider({
                id: tourname + "-permissions-2",
                next: tourname + "-permissions-3",
                title: ws.guidercontent.get("permissions2Title"),
                description: ws.guidercontent.get("permissions2Description"),
                attachTo: "#WikiActionManage",
                position: positionToActions,
                highlight: "#WikiActionManage",
                onShow: function() {
                    $("#WikiActionManage a").on("click.guider", guiders.next);
                },
                onHide: function() {
                    $("#WikiActionManage a").off("click.guider");
                }
            });
            var permissionsSelector = '.nav-list a[href*="permissions"]';
            guiders.createGuider({
                id: tourname + "-permissions-3",
                next: tourname + "-permissions-4",
                title: ws.guidercontent.get("permissions3Title"),
                description: ws.guidercontent.get("permissions3Description"),
                attachTo: permissionsSelector,
                position: 3,
                highlight: permissionsSelector,
                onShow: function() {
                    $(permissionsSelector).on("click.guider", guiders.next).addClass("nextGuiderLink");
                },
                onHide: function() {
                    $(permissionsSelector).off("click.guider");
                },
                expectedPath: "/wiki/about"
            });
            guiders.createGuider({
                id: tourname + "-permissions-4",
                next: tourname + "-permissions-5",
                title: ws.guidercontent.get("permissions4Title"),
                description: ws.guidercontent.get("permissions4Description"),
                attachTo: "form[action*=permissions] fieldset:first button",
                position: 3,
                highlight: "form[action*=permissions] fieldset:first",
                onShow: function() {
                    $("form[action*=permissions]").on("submit.guider", guiders.advanceGuidersAfterLoad);
                },
                onHide: function() {
                    $("form[action*=permissions]").off("submit.guider");
                },
                expectedPath: "/space/permissions"
            });
            guiders.createGuider({
                id: tourname + "-permissions-5",
                next: next_guider_id,
                title: ws.guidercontent.get("permissions5Title"),
                description: ws.guidercontent.get("permissions5Description"),
                buttons: [ {
                    name: ws.guidercontent.get("buttonNext"),
                    onclick: function(event) {
                        guiders.next();
                        event.preventDefault();
                    }
                } ],
                onShow: function() {
                    guiders.setMilestone(tourname, "permissions");
                },
                expectedPath: "/space/permissions"
            });
        };
        this.createcolorStage = function(tourname, next_guider_id, positionToActions) {
            guiders.createGuider({
                id: tourname + "-color-1",
                next: tourname + "-color-2",
                title: ws.guidercontent.get("color1Title"),
                description: ws.guidercontent.get("color1Description"),
                buttons: [ {
                    name: ws.guidercontent.get("buttonNext"),
                    onclick: function(event) {
                        guiders.next();
                        event.preventDefault();
                    }
                } ]
            });
            guiders.createGuider({
                id: tourname + "-color-2",
                next: tourname + "-color-3",
                title: ws.guidercontent.get("color2Title"),
                description: ws.guidercontent.get("color2Description"),
                attachTo: "#WikiActionManage",
                position: positionToActions,
                onShow: function() {
                    $("#WikiActionManage a").on("click.guider", guiders.next);
                },
                onHide: function() {
                    $("#WikiActionManage a").off("click.guider");
                },
                highlight: "#WikiActionManage"
            });
            guiders.createGuider({
                id: tourname + "-color-3",
                next: tourname + "-color-4",
                title: ws.guidercontent.get("color3Title"),
                description: ws.guidercontent.get("color3Description"),
                attachTo: 'a[href*="theme/list"]',
                position: 6,
                highlight: 'a[href*="theme/list"]',
                onShow: function() {
                    $('a[href*="theme/list"]').on("click.guider", guiders.next).addClass("nextGuiderLink");
                },
                onHide: function() {
                    $('a[href*="theme/list"]').off("click.guider");
                },
                expectedPath: "/wiki/about"
            });
            guiders.createGuider({
                id: tourname + "-color-4",
                next: tourname + "-color-5",
                title: ws.guidercontent.get("color4Title"),
                description: ws.guidercontent.get("color4Description"),
                attachTo: ".colorSelector:visible",
                position: 12,
                highlight: ".info:visible",
                onShow: function() {
                    $('form[action*="theme/list"]:first').on("submit.guider", guiders.advanceGuidersAfterLoad);
                },
                onHide: function() {
                    $('form[action*="theme/list"]:first').off("submit.guider");
                },
                expectedPath: "/theme/list"
            });
            guiders.createGuider({
                id: tourname + "-color-5",
                next: next_guider_id,
                title: ws.guidercontent.get("color5Title"),
                description: ws.guidercontent.get("color5Description"),
                buttons: [ {
                    name: ws.guidercontent.get("buttonNext"),
                    onclick: function(event) {
                        guiders.next();
                        event.preventDefault();
                    }
                } ],
                onShow: function() {
                    guiders.setMilestone(tourname, "color");
                },
                expectedPath: "/theme/list"
            });
        };
        this.createiconStage = function(tourname, next_guider_id, positionToActions) {
            guiders.createGuider({
                id: tourname + "-icon-1",
                next: tourname + "-icon-2",
                title: ws.guidercontent.get("icon1Title"),
                description: ws.guidercontent.get("icon1Description"),
                buttons: [ {
                    name: ws.guidercontent.get("buttonNext"),
                    onclick: function(event) {
                        guiders.next();
                        event.preventDefault();
                    }
                } ]
            });
            guiders.createGuider({
                id: tourname + "-icon-2",
                next: next_guider_id,
                title: ws.guidercontent.get("icon2Title"),
                description: ws.guidercontent.get("icon2Description"),
                attachTo: ".WikispacesEditableControls",
                position: 6,
                highlight: ".WikispacesEditableControls",
                preShow: function() {
                    return $.when(ws.editableWebsite.showControls(false), ws.navigation.app.expand());
                },
                onShow: function() {
                    $(".WikispacesEditableControls").on("click.guider", guiders.next).addClass("nextGuiderLink");
                    guiders.setMilestone(tourname, "icon");
                },
                onHide: function() {
                    $(".WikispacesEditableControls").off("click.guider");
                }
            });
        };
        this.createlogoStage = function(tourname, next_guider_id, positionToActions) {
            guiders.createGuider({
                id: tourname + "-logo-1",
                next: tourname + "-logo-2",
                title: ws.guidercontent.get("logo1Title"),
                description: ws.guidercontent.get("logo1Description"),
                attachTo: "#WikiActionManage",
                position: positionToActions,
                highlight: "#WikiActionManage",
                preShow: function() {
                    return ws.editableWebsite.showControls();
                },
                onShow: function() {
                    $("#WikiActionManage a").on("click.guider", guiders.next).addClass("nextGuiderLink");
                },
                onHide: function() {
                    $("#WikiActionManage a").off("click.guider");
                }
            });
            guiders.createGuider({
                id: tourname + "-logo-2",
                next: tourname + "-logo-3",
                title: ws.guidercontent.get("logo2Title"),
                description: ws.guidercontent.get("logo2Description"),
                attachTo: 'a[href*="wiki/logo"]',
                position: 3,
                highlight: 'a[href*="wiki/logo"]',
                onShow: function() {
                    $('a[href*="wiki/logo"]').on("click.guider", guiders.next).addClass("nextGuiderLink");
                },
                onHide: function() {
                    $('a[href*="wiki/logo"]').off("click.guider");
                },
                expectedPath: "/wiki/about"
            });
            guiders.createGuider({
                id: tourname + "-logo-3",
                next: tourname + "-logo-4",
                title: ws.guidercontent.get("logo3Title"),
                description: ws.guidercontent.get("logo3Description"),
                attachTo: 'form[action*="/wiki/logo"] input[name=userfile]',
                position: 3,
                highlight: 'form[action*="/wiki/logo"] input[name=userfile]',
                onShow: function() {
                    $("input[name=userfile]").on("change", guiders.next);
                },
                onHide: function() {
                    $("input[name=userfile]").off("change");
                },
                expectedPath: "/wiki/logo"
            });
            guiders.createGuider({
                id: tourname + "-logo-4",
                next: tourname + "-logo-5",
                title: ws.guidercontent.get("logo4Title"),
                description: ws.guidercontent.get("logo4Description"),
                attachTo: 'form[action*="/wiki/logo"] button[name=go]',
                position: 3,
                highlight: 'form[action*="/wiki/logo"] button[name=go]',
                onShow: function() {
                    $('form[action*="/wiki/logo"]').on("submit.guiders", guiders.advanceGuidersAfterLoad);
                },
                onHide: function() {
                    $('form[action*="/wiki/logo"]').off("submit.guiders");
                }
            });
            guiders.createGuider({
                id: tourname + "-logo-5",
                next: tourname + "-logo-6",
                title: ws.guidercontent.get("logo5Title"),
                description: ws.guidercontent.get("logo5Description"),
                attachTo: ".WikiLogo",
                position: 3,
                highlight: ".WikiLogo",
                buttons: [ {
                    name: ws.guidercontent.get("buttonNext"),
                    onclick: function(event) {
                        guiders.next();
                        event.preventDefault();
                    }
                } ]
            });
            guiders.createGuider({
                id: tourname + "-logo-6",
                next: next_guider_id,
                title: ws.guidercontent.get("logo6Title"),
                description: ws.guidercontent.get("logo6Description"),
                attachTo: 'form[action*="/wiki/logo"] button[name=removeLogo]',
                position: 3,
                highlight: 'form[action*="/wiki/logo"]',
                onShow: function() {
                    $("body,html").animate({
                        scrollTop: window.screen.height
                    }, "fast");
                    $("button[name=removeLogo]").on("click.guiders", guiders.advanceGuidersAfterLoad);
                    guiders.setMilestone(tourname, "logo");
                },
                onHide: function() {
                    $("body,html").animate({
                        scrollTop: 0
                    }, "fast");
                    $("button[name=removeLogo]").off("click.guiders");
                },
                buttons: [ {
                    name: ws.guidercontent.get("buttonNext"),
                    onclick: function(event) {
                        guiders.next();
                        event.preventDefault();
                    }
                } ]
            });
        };
        this.createthemeStage = function(tourname, next_guider_id, positionToActions) {
            guiders.createGuider({
                id: tourname + "-theme-1",
                next: tourname + "-theme-2",
                title: ws.guidercontent.get("theme1Title"),
                description: ws.guidercontent.get("theme1Description"),
                attachTo: "#WikiActionManage",
                position: positionToActions,
                highlight: "#WikiActionManage",
                preShow: function() {
                    return ws.editableWebsite.showControls();
                },
                onShow: function() {
                    $("#WikiActionManage a").on("click.guider", guiders.next).addClass("nextGuiderLink");
                },
                onHide: function() {
                    $("#WikiActionManage a").off("click.guider");
                }
            });
            guiders.createGuider({
                id: tourname + "-theme-2",
                next: tourname + "-theme-3",
                title: ws.guidercontent.get("theme2Title"),
                description: ws.guidercontent.get("theme2Description"),
                attachTo: 'a[href*="/theme/list"]',
                position: 3,
                highlight: 'a[href*="/theme/list"]',
                onShow: function() {
                    $('a[href*="/theme/list"]').on("click.guider", guiders.advanceGuidersAfterLoad).addClass("nextGuiderLink");
                },
                onHide: function() {
                    $('a[href*="/theme/list"]').off("click.guider");
                },
                expectedPath: "/wiki/about"
            });
            guiders.createGuider({
                id: tourname + "-theme-3",
                next: tourname + "-theme-4",
                title: ws.guidercontent.get("theme3Title"),
                description: ws.guidercontent.get("theme3Description"),
                attachTo: "#themeSwatches",
                position: 12,
                highlight: "#themeSwatches",
                onShow: function() {
                    $(".themeSwatch").on("click.guider", guiders.next);
                },
                onHide: function() {
                    $(".themeSwatch").off("click.guider");
                }
            });
            guiders.createGuider({
                id: tourname + "-theme-4",
                next: tourname + "-theme-5",
                title: ws.guidercontent.get("theme4Title"),
                description: ws.guidercontent.get("theme4Description"),
                attachTo: ".wsbtn-primary:visible",
                position: 12,
                highlight: ".info:visible",
                onShow: function() {
                    $(".themeRow button.wsbtn-primary").on("click.guider", guiders.advanceGuidersAfterLoad);
                },
                onHide: function() {
                    $(".themeRow button.wsbtn-primary").off("click.guider");
                },
                expectedPath: "/theme/list"
            });
            guiders.createGuider({
                id: tourname + "-theme-5",
                next: tourname + "-theme-6",
                title: ws.guidercontent.get("theme5Title"),
                description: ws.guidercontent.get("theme5Description"),
                buttons: [ {
                    name: ws.guidercontent.get("buttonNext"),
                    onclick: function(event) {
                        guiders.next();
                        event.preventDefault();
                    }
                } ]
            });
            var origShowControls = ws.editableWebsite.showControls;
            guiders.createGuider({
                id: tourname + "-theme-6",
                next: next_guider_id,
                title: ws.guidercontent.get("theme6Title"),
                description: ws.guidercontent.get("theme6Description"),
                attachTo: ".WikispacesEditableControls",
                position: 6,
                highlight: ".WikispacesEditableControls",
                preShow: function() {
                    return ws.editableWebsite.showControls();
                },
                onShow: function() {
                    ws.editableWebsite.showControls = function() {
                        guiders.setMilestone(tourname, "theme");
                        return origShowControls.apply(this, arguments).done(function() {
                            guiders.advanceGuidersAfterLoad();
                            window.location = "/";
                        });
                    };
                },
                onHide: function() {
                    ws.editableWebsite.showControls = origShowControls;
                }
            });
        };
        this.createroundupStage = function(tourname) {
            guiders.createGuider({
                id: tourname + "-roundup-1",
                title: ws.guidercontent.get("roundupTitle"),
                description: ws.guidercontent.get("roundupDescription"),
                buttons: [ {
                    name: ws.guidercontent.get("buttonEndTour"),
                    onclick: function(event) {
                        guiders.hideAll();
                        event.preventDefault();
                    }
                } ]
            });
        };
    }
    var stages = new Stages();
    return {
        createStages: function(tourname, playlist, positionToActions, pageUrl) {
            stages.createMiscStages();
            _.each(playlist, function(stage, key, list) {
                stages["create" + stage + "Stage"](tourname, tourname + "-" + list[key + 1] + "-1", positionToActions, pageUrl);
            });
        }
    };
}(jQuery);

ws.namespace("ws.help");

ws.help = function($, undefined) {
    var helpStack = Array();
    var MAX_BREADCRUMBS = 4;
    var currentId = "0";
    var currentSection = "0";
    var currentSectionCount = 0;
    var sectionTitles = {
        1: "Editing Your Home Page",
        2: "Introduction to Your Wiki",
        3: "Becoming Familiar with Your Wiki",
        4: "Managing Your User Account",
        5: "Inviting Members to Your Wiki",
        6: "Some Advanced Features",
        7: "More on Wikispaces and Wikis"
    };
    $(document).ready(function() {
        if ($(".WikispacesHelp").length) $(".WikispacesHelpLink").click(ws.common.makeLinkClickFunction(function() {
            ws.help.showHelp(jQuery(this).data("help"));
        }));
    });
    function getHelpPageText(page) {
        var pageText = page;
        if (!pageText) pageText = "";
        if ("/" == pageText.substr(0, 1)) pageText = pageText.substr(1);
        pageText = decodeURIComponent(pageText);
        pageText = pageText.replace(/\+/g, " ");
        if (pageText.lastIndexOf(".") > 0) pageText = pageText.substr(pageText.lastIndexOf(".") + 1);
        return pageText;
    }
    function showBreadcrumbs() {
        $(".WikispacesHelpBreadcrumbs span.WikispacesHelpBreadcrumb").remove(":not(.WikispacesHelpBreadcrumbHome)");
        var startAt = helpStack.length - MAX_BREADCRUMBS;
        if (startAt < 1) startAt = 1;
        for (var i = startAt; i < helpStack.length; i++) {
            var page = helpStack[i];
            var pageText = getHelpPageText(page);
            var lastCrumb = $(".WikispacesHelpBreadcrumbs span:last");
            var newCrumb = '<span class="WikispacesHelpBreadcrumb"> &gt; <a href="' + window.location.protocol + "//help." + wikispaces_main_domain + "/" + page + '" onclick="return ws.help.gotoBreadcrumb(\'' + i + "');\">" + pageText + "</a></span>";
            lastCrumb.after(" " + newCrumb);
        }
        if (helpStack.length - 1 > MAX_BREADCRUMBS) $(".WikispacesHelpBreadcrumbsEllipsis").show(); else $(".WikispacesHelpBreadcrumbsEllipsis").hide();
        $(".WikispacesHelpBreadcrumbs .WikispacesHelpBreadcrumbCurrent").removeClass("WikispacesHelpBreadcrumbCurrent");
        $(".WikispacesHelpBreadcrumbs .WikispacesHelpBreadcrumb:last").addClass("WikispacesHelpBreadcrumbCurrent");
    }
    function generateHelpToc(helpContent) {
        $(helpContent).find("#toc").remove();
        var toc = $('<div id="toc"><h1 class="nopad">Table of Contents</h1></div>');
        helpContent.find("h1,h2,h3,h4,h5,h6").each(function() {
            var link = $('<a href="#">' + $(this).text() + "</a>");
            var heading = $(this);
            link.click(function(event) {
                helpContent.scrollTo(heading, 300);
                event.preventDefault();
                return false;
            });
            var div = $('<div style="margin-left: ' + this.tagName.substr(1, 2) + 'em;"></div>');
            div.append(link);
            toc.append(div);
        });
        helpContent.prepend(toc);
    }
    function fixHelpContent(helpContent) {
        var helpLink = window.location.protocol + "//help." + wikispaces_main_domain;
        $(helpContent).find('img[src^="/"]').attr("src", function(i, oldSrc) {
            return helpLink + oldSrc;
        });
        $(helpContent).find('a[href^="/"]').attr("href", function(i, oldSrc) {
            return helpLink + oldSrc;
        });
        $("a[href$='site/help']").each(function() {
            $(this).attr("href", $(this).attr("href") + "?src=" + wikispaces_wikiName);
        });
        $(helpContent).find("a").each(function() {
            var link = $(this);
            if (!link.attr("href") || helpLink != link.attr("href").substr(0, helpLink.length)) return;
            link.off("click");
            link.click(function(event) {
                if (ws.help.loadHelp(link.attr("href").substr(helpLink.length))) {
                    event.preventDefault();
                    return false;
                }
            });
        });
    }
    return {
        showGettingStartedHome: function() {
            $(".WikispacesGettingStartedCategory").empty();
            $(".WikispacesGettingStartedBreadcrumbHome").addClass("WikispacesHelpBreadcrumbCurrent");
            return false;
        },
        attachGettingStarted: function(type) {
            $(".WikispacesHelpTrigger").click(function() {
                $(".WikispacesHelp").clone().dialog({
                    modal: true,
                    resizable: false,
                    title: "Help",
                    width: 880,
                    dialogClass: "WikispacesHelpPopup"
                }).css({
                    "z-index": 3001,
                    padding: 0
                });
                ws.help.loadGettingStarted(type);
                return false;
            });
        },
        attachHelpWindow: function() {
            $(".WikispacesHelpTrigger").click(function() {
                ws.help.showHelp();
                return false;
            });
        },
        showHelp: function(page) {
            if (parent != window && "function" == typeof parent.ws.help.showHelp) return parent.ws.help.showHelp(page);
            if (!page && 0 === helpStack.length) page = "/home";
            ws.navigation.app.collapse();
            $(".WikispacesHelp").clone().dialog({
                modal: true,
                resizable: false,
                title: "Help",
                width: 880,
                dialogClass: "WikispacesHelpPopup"
            }).css({
                "z-index": 3001,
                padding: 0
            });
            if (page) ws.help.loadHelp(page);
        },
        loadGettingStarted: function(type) {
            $(".WikispacesHelpControls").hide();
            $(".WikispacesHelpContent").hide();
            ws.navigation.app.collapse();
            $(".WikispacesGettingStartedControls").show();
            $(".WikispacesGettingStartedContent").show();
            var gettingStartedUrl = "/site/helpcontent/none?mode=gettingstarted" + type;
            ws.common.ajaxPost({
                queueName: "help",
                url: gettingStartedUrl,
                type: "GET",
                dataType: "html"
            }).done(function(data) {
                $(".WikispacesGettingStartedContent").html(data);
                generateHelpToc($(".WikispacesHelpPopup .WikispacesGettingStartedContent"));
                ws.session.reloadSessionSuccess();
            });
        },
        loadHelp: function(page) {
            $(".WikispacesHelpControls").show();
            $(".WikispacesHelpContent").show();
            $(".WikispacesGettingStartedControls").hide();
            $(".WikispacesGettingStartedContent").hide();
            var baseUrl = document.location.protocol + "//" + document.location.hostname;
            if (page.substring(0, baseUrl.length) == baseUrl && "/Help." == page.substr(baseUrl.length, 6)) page = page.substr(baseUrl.length);
            if ("http://" == page.substring(0, 7) || "https://" == page.substring(0, 8)) return false;
            if ("/file/view/" == page.substring(0, 11)) {
                window.location = window.location.protocol + "//help." + wikispaces_main_domain + page;
                return true;
            }
            $(".WikispacesHelpBreadcrumbSpinner").html('<img src="/i/spinner.gif" width="18" height="18" alt="please wait"/>');
            if ("/" == page.substr(0, 1)) page = page.substr(1);
            var anchor = "";
            if (page.indexOf("#") > 0) {
                anchor = page.substr(page.indexOf("#") + 1);
                page = page.substr(0, page.indexOf("#"));
            }
            if (page == helpStack[helpStack.length]) if (anchor) $(".WikispacesHelpContent").scrollTo($(".WikispacesHelpContent a[name='" + anchor + "']")); else $(".WikispacesHelpContent").scrollTop(0); else {
                var helpUrl = "/site/helpcontent/" + page;
                ws.common.ajaxPost({
                    queueName: "help",
                    url: helpUrl,
                    type: "GET",
                    dataType: "html"
                }).done(function(data) {
                    ws.session.reloadSessionSuccess();
                    $(".WikispacesHelpContent").html(data);
                    fixHelpContent($(".WikispacesHelpContent"));
                    generateHelpToc($(".WikispacesHelpPopup .WikispacesHelpContent"));
                    helpStack.push(page);
                    showBreadcrumbs();
                    $(".WikispacesHelpBreadcrumbSpinner").html("");
                    if (anchor) $(".WikispacesHelpContent").scrollTo($(".WikispacesHelpContent a[name='" + anchor + "']")); else $(".WikispacesHelpContent").scrollTop(0);
                });
            }
            return true;
        },
        gotoBreadcrumb: function(index) {
            var page = helpStack[index];
            for (var i = helpStack.length; i > index; i--) helpStack.pop();
            ws.help.loadHelp(page);
            return false;
        }
    };
}(jQuery);

ws.namespace("ws.math");

ws.math = function($, undefined) {
    return {
        process: function(parent) {
            if ($('.wiki script[type="math/tex"]').length > 0) if (window.MathJax) MathJax.Hub.Queue([ "Typeset", MathJax.Hub, parent ]); else ws.math.loadMath();
        },
        loadMath: function() {
            var url = "/s/js/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML";
            var se = document.createElement("script");
            se.type = "text/javascript";
            se.src = url;
            document.getElementsByTagName("head")[0].appendChild(se);
        }
    };
}(jQuery);

ws.namespace("ws.messagequeue");

ws.messagequeue = function($, undefined) {
    $(document).ready(function() {
        var channels = [];
        if (ws.context.user.id) channels.push(ws.context.environment_name + "user" + ws.context.user.id);
        if (ws.context.space.id) channels.push(ws.context.environment_name + "space" + ws.context.space.id);
        if (!channels.length) return;
        var channel = channels.join("/");
        var es = new EventSource("/queue/subscribe/ev/" + channel);
        es.addEventListener("message", function(event) {
            var message = JSON.parse(event.data);
            var parts = message.text.split(" ");
            var area = parts.shift();
            $(document).trigger("message." + area, parts);
        });
    });
    return {};
}(jQuery);

ws.namespace("ws.navbar");

ws.navbar = function($, undefined) {
    $(document).ready(function() {
        var $navbar = $(".WikispacesNavbar");
        if (!$navbar.length) return;
        hideIfEmpty($navbar.find("#WikispacesNavbarFavoritesEntry"));
        setExpandedFromCookie($navbar);
        $(document).on("message.navbar", function(event, action, spaceId) {
            if ("refresh" == action && spaceId == $navbar.data("spaceid")) ws.navbar.refresh();
        });
        $navbar.on("click", ".WikispacesNavbarEntry .WikispacesNavbarEntryHeader:not(.ui-sortable *)", function(e) {
            $(this).find(".WikispacesNavbarToggle:visible").click();
        });
        $navbar.on("click", ".WikispacesNavbarToggle.WikispacesNavbarPlus", makeToggleEntryFunc(false));
        $navbar.on("click", ".WikispacesNavbarToggle.WikispacesNavbarMinus", makeToggleEntryFunc(true));
        $navbar.on("click", "a.WikispacesNavbarSeeMore", function(e) {
            ws.navbar.seeMore($(this).closest(".WikispacesNavbarEntryItems"));
            e.preventDefault();
        });
        jQuery(document).on("tagUpdate", "form.WikiTagForm", function() {
            ws.navbar.refresh(true);
        });
        $(".WikispacesCustomNavEdit").on("click.navEdit", ws.common.makeLinkClickFunction(clickEdit));
        $navbar.on("click", ".WikispacesNavbarEditDone", function(e) {
            clickDone();
            e.preventDefault();
        });
        $navbar.on("click", ".WikispacesNavbarRemoveEntry", function(e) {
            removeElem($(this).closest(".WikispacesNavbarEntry"));
            e.stopPropagation();
        });
        $navbar.on("click", ".WikispacesNavbarSortableEntry .ui-sortable a", function(e) {
            e.preventDefault();
        });
        $navbar.on("submit", ".WikispacesNavbarShowAllPagesForm", function(e) {
            submitShowAll($(this));
            e.preventDefault();
        });
        $navbar.on("submit", ".WikispacesNavbarNewTagNavbarForm", function(e) {
            ws.navbar.addTag();
            e.preventDefault();
        });
    });
    function clickEdit() {
        ws.navbar.setEditMode(true);
        var $edit = $(this);
        $edit.data("edittext", $edit.text());
        var editText = $edit.data("editpagetext");
        if (!editText) editText = "";
        $edit.text(editText);
        $(".WikispacesCustomNavEdit").off(".navEdit");
    }
    function clickDone() {
        ws.navbar.setEditMode(false);
        $(".WikispacesCustomNavEdit").each(function() {
            var $edit = $(this);
            $edit.text($edit.data("edittext"));
            $edit.on("click.navEdit", ws.common.makeLinkClickFunction(clickEdit));
        });
    }
    function setExpandedFromCookie(elem) {
        $(elem).find(".WikispacesNavbarEntry").not("#WikispacesNavbarOptions").each(function() {
            var $entry = $(this);
            if (Cookie.get($entry.attr("id"))) $entry.addClass("WikispacesNavbarEntryCollapsed"); else $entry.removeClass("WikispacesNavbarEntryCollapsed");
        });
    }
    function makeToggleEntryFunc(collapse) {
        return function(e) {
            var $entry = $(this).closest(".WikispacesNavbarEntry");
            var slideType = collapse ? "slideUp" : "slideDown";
            Cookie.set($entry.attr("id"), collapse, 365);
            e.stopPropagation();
            return $entry.find(".WikispacesNavbarEntryItems")[slideType]("fast").promise().done(function() {
                $entry.toggleClass("WikispacesNavbarEntryCollapsed", collapse);
            });
        };
    }
    function hideIfEmpty(entry) {
        entry.toggle(!!entry.find("li").length);
    }
    function submitShowAll(elem) {
        var $form = $(elem);
        $form.find(".icon-spinner").show();
        return ws.common.ajaxPost({
            form: $form
        }).pipe(function() {
            return ws.navbar.refresh(true);
        }).always(function() {
            $form.closest("li").addClass("hidden");
            $form.find(".icon-spinner").hide();
        });
    }
    function removeElem(elem) {
        elem.addClass("WikispacesNavbarEntryWorking");
        var id = elem.data("entryid");
        var $navbar = elem.closest(".WikispacesNavbar");
        var navbarUrl = $navbar.data("navbarurl");
        return ws.common.ajaxPost({
            url: navbarUrl + "/update/" + id,
            data: {
                status: "D"
            }
        }).done(function() {
            elem.hide();
            if (!$navbar.find("#WikispacesNavbarAllPagesEntry").is(":visible")) $navbar.find(".WikispacesNavbarShowAllPages").removeClass("hidden");
        }).always(function() {
            elem.removeClass("WikispacesNavbarEntryWorking");
        });
    }
    function reorderTags(elem) {
        var navbarUrl = elem.closest(".WikispacesNavbar").data("navbarurl");
        var tags = [];
        elem.find(".WikispacesNavbarEntry:visible").addClass("WikispacesNavbarEntryWorking").each(function(index) {
            tags.push($(this).data("entryid"));
        });
        return ws.common.ajaxPost({
            url: navbarUrl + "/tagreorder",
            data: {
                "tags[]": tags
            }
        }).fail(function() {
            elem.sortable("cancel");
        }).always(function(data) {
            elem.find(".WikispacesNavbarEntry").removeClass("WikispacesNavbarEntryWorking");
        });
    }
    function reorderPages(elem) {
        var navbarUrl = elem.closest(".WikispacesNavbar").data("navbarurl");
        var entryId = elem.closest(".WikispacesNavbarEntry").addClass("WikispacesNavbarEntryWorking").data("entryid");
        var pages = [];
        elem.find("li a").each(function() {
            pages.push($(this).data("uniqid"));
        });
        return ws.common.ajaxPost({
            url: navbarUrl + "/pagereorder/" + entryId,
            data: {
                "pages[]": pages
            }
        }).fail(function() {
            elem.sortable("cancel");
        }).always(function(data) {
            elem.closest(".WikispacesNavbarEntry").removeClass("WikispacesNavbarEntryWorking");
        });
    }
    function setSortable(enable) {
        var $navbar = $(".WikispacesNavbar");
        if (!$navbar.length) return;
        var $tags = $navbar.find("div#WikispacesNavbarTags");
        var $pages = $navbar.find(".WikispacesNavbarSortableEntry ol");
        if (!enable) {
            if ($tags.is(".ui-sortable")) $tags.sortable("destroy");
            if ($pages.is(".ui-sortable")) $pages.sortable("destroy");
            return;
        }
        $tags.sortable({
            handle: ".WikispacesNavbarEntryHeader",
            tolerance: "pointer",
            containment: "parent",
            update: function() {
                reorderTags($(this));
            }
        });
        $pages.sortable({
            tolerance: "pointer",
            containment: "parent",
            update: function() {
                reorderPages($(this));
            }
        });
    }
    function setupTagForm(enable) {
        var $navbar = $(".WikispacesNavbar");
        if (!$navbar.length) return;
        var $tagInput = $navbar.find(".WikispacesNavbarNewTagNavbarForm").find("input[name=tagName]");
        hasSelect2 = !!$tagInput.data("select2");
        if (enable == hasSelect2) return;
        if (!hasSelect2) ws.select2.tag($tagInput, {
            width: false,
            containerCss: {
                display: "inline-block",
                "float": "none"
            }
        });
        if (!enable) $tagInput.select2("close");
    }
    return {
        seeMore: function(elem, num) {
            var entry = elem.closest(".WikispacesNavbarEntry");
            var entry_id = entry.data("entryid");
            var d = $.Deferred();
            var params = {
                num: num
            };
            if (!num) {
                params.num = elem.find("span.WikispacesNavbarNum").text();
                params.seeMore = 1;
            }
            entry.addClass("WikispacesNavbarEntryWorking");
            var navbarUrl = elem.closest(".WikispacesNavbar").data("navbarurl");
            elem.load(navbarUrl + "/fetch/" + entry_id, params, function(responseText, textStatus) {
                if ("error" === textStatus) d.reject(entry); else d.resolve(entry);
            });
            d.done(function(entry) {
                setSortable($(".WikispacesNavbar").is(".WikispacesNavbarEdit"));
                hideIfEmpty(entry);
            }).always(function(entry) {
                entry.removeClass("WikispacesNavbarEntryWorking");
            });
            return d.promise();
        },
        addTag: function(tagName) {
            var form = $(".WikispacesNavbarNewTagNavbarForm");
            if (!form.length) return $.when();
            if (tagName) form.find("input[name=tagName]").val(tagName);
            if ("" === form.find("input[name=tagName]").val()) return $.when();
            form.find("button").hide();
            form.find(".icon-spinner").show();
            var promise = ws.common.ajaxPost({
                form: form
            });
            form.find("input[name=tagName]").prop("disabled", true).val("");
            return promise.pipe(function() {
                return ws.navbar.refresh(true);
            }).always(function() {
                form.find(".icon-spinner").hide();
                form.find("button").show();
                form.find("input[name=tagName]").removeAttr("disabled").val("");
            });
        },
        refresh: function(force) {
            var $navbar = null;
            if (force) $navbar = $(".WikispacesNavbar"); else $navbar = $(".WikispacesNavbar:not(.WikispacesNavbarEdit)");
            if (!$navbar.length) return $.when();
            var d = $.Deferred();
            var navbarUrl = $navbar.data("navbarurl");
            var entryNums = [];
            $navbar.find(".WikispacesNavbarEntry:visible").each(function() {
                var entry = $(this);
                var num = entry.find("span.WikispacesNavbarNum").text();
                entryNums.push(entry.data("entryid") + ":" + num);
            });
            var div = $("<div>").hide().load(navbarUrl + "/fetch/full", {
                "entryNums[]": entryNums
            }, function(responseText, textStatus) {
                if ("error" === textStatus) d.reject(div); else d.resolve(div);
            });
            d.done(function(div) {
                var newNavbar = div.find(".WikispacesNavbar");
                hideIfEmpty(newNavbar.find("#WikispacesNavbarFavoritesEntry"));
                setExpandedFromCookie(newNavbar);
                var html = newNavbar.html();
                $navbar.html(html);
                setSortable($(".WikispacesNavbar").is(".WikispacesNavbarEdit"));
                if (force) setupTagForm(true);
            }).always(function(div) {
                div.remove();
            });
            return d.promise();
        },
        setEditMode: function(enable) {
            if ("undefined" == typeof enable) enable = true;
            var refresh = false;
            if (!enable && $(".WikispacesNavbar.WikispacesNavbarEdit").length) refresh = true;
            $(".WikispacesNavbar").toggleClass("WikispacesNavbarEdit", enable);
            setupTagForm(enable);
            if (refresh) return ws.navbar.refresh();
            setSortable(enable);
            return $.when();
        }
    };
}(jQuery);

ws.namespace("ws.navigation");

ws.navigation = function($, undefined) {
    $(document).ready(function() {
        var Notice = Backbone.Model.extend({
            defaults: {}
        });
        var NoticeList = Backbone.Collection.extend({
            initialize: function() {
                this.loadedPromise = null;
                var self = this;
                $(document).on("message.mail", function(event, operation, count) {
                    if ("increment" == operation || "decrement" == operation) self.fetch();
                });
            },
            model: Notice,
            url: "/site/notice/" + encodeURIComponent(wikispaces_username)
        });
        var WikiList = Backbone.Collection.extend({
            model: Notice,
            url: "/site/wikilist/" + encodeURIComponent(wikispaces_username),
            initialize: function() {
                this.loadedPromise = null;
            }
        });
        var HelpList = Backbone.Collection.extend({
            model: Notice,
            url: "/site/wikitour",
            initialize: function() {
                this.loadedPromise = null;
            }
        });
        var NavigationApp = Backbone.View.extend({
            events: {
                mouseover: "tryExpand",
                "click .headerButton": "clickButton"
            },
            panels: [],
            initialize: function() {
                var self = this;
                this.options.panels = [];
                $(window).scroll(function() {
                    var anyOpen = _.filter(self.options.panels, function(panel) {
                        return panel.options.displayed;
                    }).length > 0;
                    if ($(document).scrollTop() > 15 && !anyOpen) self.collapse();
                });
                $(document).on("message.mail", function(event, operation, count) {
                    if ("increment" == operation || "decrement" == operation) self.$el.find("#NoticeButton").text(count);
                });
            },
            render: function() {
                var noticePanel = new NoticePanel({
                    collection: new NoticeList(),
                    viewClass: NoticeView,
                    name: "Notice",
                    parentApp: this,
                    id: "NoticeTool"
                });
                this.options.panels.push(noticePanel);
                var wikiPanel = new WikiPanel({
                    collection: new WikiList(),
                    viewClass: WikiView,
                    name: "Wiki",
                    parentApp: this,
                    id: "WikiTool"
                });
                this.options.panels.push(wikiPanel);
                if (!wikispaces_isMobileSite) {
                    var helpPanel = new HelpPanel({
                        collection: new HelpList(),
                        viewClass: HelpView,
                        name: "Help",
                        parentApp: this,
                        id: "HelpTool"
                    });
                    this.options.panels.push(helpPanel);
                }
                var view = this;
                _.each(this.options.panels, function(panel) {
                    view.$el.append(panel.render().el);
                });
                return this;
            },
            clickButton: function(e) {
                var clickPanel = $(e.target).data("panel");
                _.each(this.options.panels, function(panel) {
                    if (panel.options.name != clickPanel) panel.hide();
                });
                _.each(this.options.panels, function(panel) {
                    if (panel.options.name == clickPanel) if (panel.options.displayed) panel.hide(); else panel.show();
                });
                e.preventDefault();
            },
            highlightButton: function(panel) {
                this.$el.find(".headerButton").closest(".WikiInternalHeaderNavMenuArea").removeClass("active");
                this.$el.find('.headerButton[data-panel="' + panel + '"]').closest(".WikiInternalHeaderNavMenuArea").addClass("active");
            },
            tryExpand: function() {
                if (!this.options.justHidden) this.expand();
            },
            expand: function() {
                if (!this.options.isHidden) return $.when();
                this.options.isHidden = false;
                return this.$el.animate({
                    right: 0
                }).promise();
            },
            collapse: function() {
                if (this.options.isHidden) return;
                if ($(".WikiInternalHeaderNav").is(".noHide")) return;
                if (wikispaces_isMain && "www" == wikispaces_spaceName && !wikispaces_username) return;
                _.each(this.options.panels, function(panel) {
                    panel.hide();
                });
                if ($(".WikiInternalHeaderNav .slideMarker").length) {
                    var slideSize = $(window).width() - $(".WikiInternalHeaderNav .slideMarker").offset().left;
                    this.$el.animate({
                        right: -slideSize
                    });
                    this.options.isHidden = true;
                    this.options.justHidden = true;
                    setTimeout(function() {
                        ws.navigation.app.options.justHidden = false;
                    }, 500);
                }
            },
            show: function(panelName) {
                this.$el.find('.headerButton[data-panel="' + panelName + '"]').click();
            }
        });
        var Panel = Backbone.View.extend({
            tagName: "div",
            className: "panel",
            parentApp: null,
            initialize: function() {
                var view = this;
                this.options.displayed = false;
                $(window).resize(function() {
                    if (view.options.displayed) view.updateHeight();
                });
                this.collection.on("add", this.addOne, this);
                this.collection.on("reset", this.addAll, this);
            },
            render: function() {
                this.$el.hide();
                if (0 === this.$el.closest("body").length) {
                    this.$el.append('<div id="' + this.options.name + 'ToolList"><ol class="dropdown-menu"></ol></div>');
                    this.$el.find(".dropdown-menu").show();
                }
                return this;
            },
            addOne: function(notice) {
                var view = new this.options.viewClass({
                    model: notice
                });
                this.getPanelArea().append(view.render().el);
            },
            addAll: function() {
                this.getPanelArea().empty();
                var func = _.bind(this.addOne, this);
                this.collection.each(func);
            },
            getPanelArea: function() {
                return this.$el.find("#" + this.id + "List ol");
            },
            updateHeight: function() {
                var $navTool = $(this.id);
                if ($navTool.length) {
                    var height = $(window).height() - ($navTool.offset().top - $(window).scrollTop());
                    $navTool.height(height);
                }
            },
            show: function() {
                var view = this;
                var promise = this.collection.loadedPromise;
                if (!promise) {
                    promise = this.collection.fetch();
                    this.collection.loadedPromise = promise;
                }
                var existingAnimation = this.options.parentApp.options.animationDone;
                var newAnimation = $.Deferred();
                this.options.parentApp.options.animationDone = newAnimation.promise();
                $.when(promise, existingAnimation).pipe(function() {
                    return view.options.parentApp.expand();
                }).pipe(function() {
                    view.options.parentApp.highlightButton(view.options.name);
                    return view.$el.slideDown(0).promise();
                }).done(function() {
                    view.$el.css("max-height", view.$el.get(0).scrollHeight);
                    view.$el.css("width", $(".WikiInternalHeaderNavMenu")[0].scrollWidth);
                    view.updateHeight();
                    $(document).trigger("showPanel", [ view.options.name ]);
                    newAnimation.resolve();
                });
                this.options.displayed = true;
                return this;
            },
            hide: function() {
                var view = this;
                var existingAnimation = this.options.parentApp.options.animationDone;
                var newAnimation = $.Deferred();
                this.options.parentApp.options.animationDone = newAnimation.promise();
                $.when(existingAnimation).pipe(function() {
                    return view.$el.slideUp(0).promise();
                }).done(function() {
                    view.options.parentApp.highlightButton("");
                    newAnimation.resolve();
                });
                this.options.displayed = false;
            }
        });
        var NoticePanel = Panel.extend({
            render: function() {
                var ret = Panel.prototype.render.apply(this, arguments);
                var domain = "www." + ws.context.instance.url;
                this.$el.find("#NoticeToolList ol").append('<li class="js-last text-center"><a href="//' + domain + "/mail/list/" + ws.context.user.username + '?folder=Inbox">View All Messages</a></li>');
                return ret;
            },
            addOne: function(notice) {
                var insertBefore = this.getPanelArea().find("li.js-last");
                var view = new this.options.viewClass({
                    model: notice
                });
                insertBefore.before(view.render().$el);
            },
            addAll: function() {
                this.getPanelArea().find("li.mailItem").remove();
                var func = _.bind(this.addOne, this);
                this.collection.each(func);
            }
        });
        var WikiPanel = Panel.extend({});
        var HelpPanel = Panel.extend({
            render: function() {
                var ret = Panel.prototype.render.apply(this, arguments);
                var domain = "help." + ws.context.instance.url;
                this.$el.find("#HelpToolList ol").append('<li class="js-last divider hidden"></li><li><a class="WikispacesHelpTrigger" rel="nofollow" href="//' + domain + '/">Help Wiki</a></li>');
                ws.help.attachHelpWindow("/home");
                return ret;
            },
            addOne: function(notice) {
                this.getPanelArea().find("li.divider").show();
                var insertBefore = this.getPanelArea().find("li.js-last");
                var view = new this.options.viewClass({
                    model: notice
                });
                insertBefore.before(view.render().$el);
                _.each(notice.get("stages"), function(stage, stage_name) {
                    stage.id = stage_name;
                    stage.tour = notice;
                    view = new HelpStageView({
                        model: stage
                    });
                    insertBefore.before(view.render().$el);
                });
            },
            addAll: function() {
                this.getPanelArea().find("li.wikiTour").remove();
                var func = _.bind(this.addOne, this);
                this.collection.each(func);
            }
        });
        var NoticeView = Backbone.View.extend({
            tagName: "li",
            className: "mailItem",
            events: {
                hover: "highlight",
                click: "clickItem"
            },
            render: function() {
                if ("R" == this.model.get("status")) this.$el.removeClass("unread").addClass("read"); else this.$el.addClass("unread").removeClass("read");
                var date = new Date(1e3 * this.model.get("InternalMail").date_created);
                var user = this.model.get("InternalMail").UserCreated;
                var userImage = ws.user.pic(user, {
                    imageSize: "small"
                });
                this.$el.html('<a href="#"><span class="subject">' + this.model.get("InternalMail").subject + "</span><br/>" + userImage + " " + user.username + " " + date.toDateString() + "</a>");
                return this;
            },
            highlight: function() {
                this.$el.toggleClass("highlight");
            },
            clickItem: function() {
                window.location.href = this.model.get("url");
            }
        });
        var WikiView = Backbone.View.extend({
            tagName: "li",
            className: "wikiItem",
            events: {
                hover: "highlight",
                click: "clickItem"
            },
            render: function() {
                var escapedText = ws.common.escapeHtml(this.model.get("text"));
                this.$el.html('<a href="' + this.model.get("url") + '"><img src="' + (this.model.get("image_type") ? this.model.get("image") : "/i/logo-grey-20.png") + '" width="20" height="20" alt="' + escapedText + '">' + escapedText + "</a>");
                return this;
            },
            highlight: function() {
                this.$el.toggleClass("highlight");
            },
            clickItem: function() {
                window.location.href = this.model.get("url");
            }
        });
        var HelpView = Backbone.View.extend({
            tagName: "li",
            className: "wikiTour",
            events: {
                click: "clickItem"
            },
            render: function() {
                var tour = this.model;
                this.$el.html('<a href="#" data-tour-id="' + tour.get("id") + '-intro-1">' + tour.get("name") + (tour.get("completed") ? " (done!)" : "") + "</a>");
                return this;
            },
            clickItem: function(event) {
                event.preventDefault();
                ws.navigation.app.collapse();
                $(".frameDialog").dialog("close");
                var guider_id = $(event.target).data("tour-id");
                $(event.target).closest(".dropdown-menu").hide();
                guiders.loadGuiders().done(function() {
                    guiders.jumpToStep(guider_id);
                });
            }
        });
        var HelpStageView = HelpView.extend({
            render: function() {
                var stage = this.model;
                this.$el.html('<a href="#" data-tour-id="' + stage.tour.get("id") + "-" + stage.id + '-1"> * ' + stage.name + (stage.completed ? " (done!)" : "") + "</a>");
                return this;
            }
        });
        ws.navigation.app = new NavigationApp({
            el: $(".WikiInternalHeaderNav").get(0)
        });
        ws.navigation.app.render();
    });
    return {};
}(jQuery);

ws.namespace("ws.pricing");

ws.pricing = function($, undefined) {
    var USER_BUCKET_SIZE = 100;
    var MAX_USERS = 1e6;
    function priceCheck(elem, preview, validateCallback, returnCallback) {
        if ($(elem).data("timeout")) clearTimeout($(elem).data("timeout"));
        var handle = setTimeout(function() {
            priceCheckActual(elem, preview, validateCallback, returnCallback);
        }, 200);
        $(elem).data("timeout", handle);
    }
    function priceCheckActual(elem, preview, validateCallback, returnCallback) {
        var $elem = $(elem);
        var plan = $elem.data("plan");
        var version = $elem.data("version");
        var type = $elem.data("type");
        var users = ws.pricing.normalizeUsers($elem.val());
        if ("function" == typeof validateCallback) {
            var valid = validateCallback.call(elem, users);
            if (!valid) return;
        }
        var url = "/site/previewprice/" + encodeURIComponent(plan) + "/" + encodeURIComponent(version) + encodeURIComponent(type) + encodeURIComponent(users);
        ws.common.ajaxPost({
            url: url,
            queueName: "pricing." + $elem.attr("name")
        }).done(function(data) {
            var price = addCommas(data.year);
            preview.html(price);
            if ("function" == typeof returnCallback) returnCallback.call(elem, users, data);
        });
    }
    function addCommas(number) {
        number += "";
        var x = number.split(".");
        var whole = x[0];
        var decimal = x.length > 1 ? "." + x[1] : "";
        var regex = /(\d+)(\d{3})/;
        while (regex.test(whole)) whole = whole.replace(regex, "$1" + "," + "$2");
        return whole + decimal;
    }
    return {
        normalizeUsers: function(users) {
            users = users.replace(/,/, "");
            users = users.replace(/^0+/, "");
            users = parseInt(users, 10);
            if (!users || users <= 0) users = 1;
            users = Math.ceil(users / USER_BUCKET_SIZE) * USER_BUCKET_SIZE;
            return users;
        },
        attachPriceCheck: function(elem, preview, validateCallback, returnCallback) {
            $(elem).change(function() {
                priceCheck(this, preview, validateCallback, returnCallback);
            }).keyup(function() {
                priceCheck(this, preview, validateCallback, returnCallback);
            });
            priceCheck(elem, preview, validateCallback, returnCallback);
        },
        validateUsers: function(users, options, notice) {
            var addError = function(message) {
                if (true === notice) alert(message); else if (false === notice) ; else notice.message = message;
            };
            if (!users) {
                addError("Please enter a user number.");
                return false;
            }
            if (users < options.minUsers) {
                addError("The minimum number of users is " + options.minUsers + ".");
                return false;
            }
            if (users > MAX_USERS) {
                addError("The maximum number of users is ".MAX_USERS + ".");
                return false;
            }
            if (users < options.currentUsers) {
                var currentMinUsers = ws.pricing.normalizeUsers(options.currentUsers);
                addError("You currently have " + options.currentUsers + " active users. Please set your subscription to " + currentMinUsers + " users or more.");
                return false;
            }
            return true;
        }
    };
}(jQuery);

ws.namespace("ws.select2");

ws.select2 = function($, undefined) {
    $(document).ready(function() {
        $.fn.select2.defaults.dropdownCssClass = "WikispacesContent WikispacesBs";
        $.fn.select2.defaults.width = "200px";
        window.Select2["class"].multi.prototype.showSearch = $.noop;
        ws.select2.instance($(".autocompleteInstance"));
        ws.select2.wiki($(".autocompleteWiki"));
        ws.select2.user($(".autocompleteUser"));
        ws.select2.tag($(".autocompleteTag"));
    });
    function fixZIndex() {
        var zMax = $(this).closest(".wsPopup").css("z-index");
        $(".select2-drop-mask").css("z-index", zMax + 1);
        $(".select2-drop").css("z-index", zMax + 2);
        $(".select2-search").css("z-index", zMax + 3);
    }
    function handleResults(data, page) {
        var results = [];
        $(data.content.result).each(function() {
            var id = this.shift();
            var text = this.shift();
            results.push({
                id: id,
                text: text,
                data: this
            });
        });
        return {
            results: results,
            more: data.content.more
        };
    }
    function identityInitSelection(element, callback) {
        var data = {
            id: $(element).val(),
            text: $(element).val()
        };
        callback(data);
    }
    function dataInitSelection(element, callback) {
        var data = {
            id: $(element).val(),
            text: $(element).data("select2-text")
        };
        callback(data);
    }
    function formatSimpleNotEscaped(obj) {
        if (!obj || !obj.text) return "";
        return obj.text;
    }
    function formatSimple(obj) {
        return ws.common.escapeHtml(formatSimpleNotEscaped(obj));
    }
    function formatId(obj) {
        return obj.id;
    }
    function formatTag(obj) {
        return ws.common.escapeHtml(obj.id + " (" + obj.count + ")");
    }
    function formatInstance(obj) {
        return ws.common.escapeHtml(obj.text) + ' <br/><span class="smgrey">' + ws.common.escapeHtml(obj.data[0]) + "</span>";
    }
    function initTagSelection(elem, callback) {
        callback(_.map($(elem).val().split(","), function(tag) {
            return {
                id: tag
            };
        }));
    }
    function createTagSearchChoice(term, results) {
        var lowerTerm = term.toLowerCase();
        var data = this.data();
        if (data && data.length) results = results.concat(data);
        var $matchingdata = $(results).filter(function() {
            return 0 === this.id.toLowerCase().localeCompare(lowerTerm);
        });
        if (0 !== $matchingdata.length) return null;
        return {
            id: term,
            count: 0
        };
    }
    return {
        formatObject: function(obj) {
            if (obj.title) return ws.common.escapeHtml(obj.title); else if (obj.iconUrl) return "<img src='" + ws.common.escapeHtml(obj.iconUrl) + "' width='16' height='16' style='text-align: center'/> " + ws.common.escapeHtml(obj.text); else if (obj.text) return "<img src='/i/mime/32/text/plain.png' width='16' height='16' style='text-align: center'/> " + ws.common.escapeHtml(obj.text); else return "";
        },
        instance: function(input) {
            $(input).select2({
                placeholder: "Find a site",
                ajax: {
                    url: "/int/autocompleteinstance",
                    quietMillis: 200,
                    params: {
                        type: "POST",
                        dataType: "json",
                        iframe: true
                    },
                    data: function(term, page) {
                        return {
                            q: term,
                            p: page,
                            n: 10
                        };
                    },
                    results: handleResults
                },
                formatSelection: formatSimpleNotEscaped,
                formatResult: formatInstance,
                initSelection: dataInitSelection
            }).on("select2-open", fixZIndex);
        },
        user: function(input) {
            $(input).select2({
                placeholder: "Find a user",
                minimumInputLength: 3,
                ajax: {
                    url: "/user/autocomplete",
                    params: {
                        type: "POST",
                        dataType: "json",
                        iframe: true
                    },
                    quietMillis: 200,
                    data: function(term, page) {
                        return {
                            q: term,
                            p: page,
                            n: 10
                        };
                    },
                    results: handleResults
                },
                formatSelection: formatSimpleNotEscaped,
                formatResult: formatSimple,
                initSelection: identityInitSelection
            }).on("select2-open", fixZIndex);
        },
        wikiAndObject: function(wikiInput, pageInput, type) {
            ws.select2.wiki(wikiInput);
            ws.select2.object(pageInput, wikiInput, type);
        },
        wiki: function(wikiInput) {
            var params = {
                a: ("U" == ws.context.user.status) + 0
            };
            $(wikiInput).each(function() {
                var $this = $(this);
                var data = $this.data("autocomplete-params");
                if (!data) data = {};
                var myParams = $.extend({}, params, data);
                $this.select2({
                    placeholder: "Find a wiki",
                    ajax: {
                        url: "/wiki/autocomplete",
                        quietMillis: 200,
                        params: {
                            type: "POST",
                            dataType: "json",
                            iframe: true
                        },
                        data: function(term, page) {
                            return $.extend({}, myParams, {
                                q: term,
                                p: page,
                                n: 10
                            });
                        },
                        results: handleResults
                    },
                    formatSelection: formatSimpleNotEscaped,
                    formatResult: formatSimple,
                    initSelection: dataInitSelection
                });
            }).on("select2-open", fixZIndex);
        },
        tagDefaults: {
            placeholder: "Choose a tag",
            createSearchChoice: createTagSearchChoice,
            ajax: {
                url: ws.common.pathFor("tag", "listjson", "all"),
                quietMillis: 200,
                params: {
                    type: "POST",
                    dataType: "json",
                    iframe: true
                },
                data: function(term, page) {
                    return {
                        q: term,
                        page: page,
                        pageLimit: ws.select2.tagDefaults.pageLimit
                    };
                },
                results: _.identity
            },
            pageLimit: 10,
            formatSelection: formatId,
            formatResult: formatTag
        },
        tagFilterDefaults: {
            placeholder: "Filter by tag",
            multiple: true,
            maximumSelectionSize: 5,
            maximumInputLength: 255,
            initSelection: initTagSelection,
            createSearchChoice: false,
            ajax: {
                data: function(term, page) {
                    return $.extend(ws.select2.tagDefaults.ajax.data.call(this, term, page), {
                        tag: $(this).select2("val").join()
                    });
                }
            }
        },
        tagEditDefaults: {
            width: "350px",
            maximumSelectionSize: 0,
            minimumInputLength: 1,
            tokenSeparators: [ ",", "\n" ],
            createSearchChoice: createTagSearchChoice,
            placeholder: "Add tags",
            formatInputTooShort: function() {
                return "Type a tag name.  Press comma or enter to add another.";
            },
            ajax: {
                data: function(term, page) {
                    return $.extend(ws.select2.tagDefaults.ajax.data.call(this, term, page), {
                        pageLimit: 20,
                        exclude: $(this).select2("val").join()
                    });
                }
            }
        },
        tag: function(tagInput, options) {
            options = $.extend(true, {}, ws.select2.tagDefaults, options || {});
            return $(tagInput).each(function() {
                $(this).select2($.extend(true, {}, options));
            }).on("select2-open", fixZIndex);
        },
        tagFilter: function(tagInput, options) {
            return this.tag(tagInput, $.extend(true, {}, ws.select2.tagFilterDefaults, options || {}));
        },
        tagEdit: function(tagInput, options) {
            return this.tagFilter(tagInput, $.extend(true, {}, ws.select2.tagEditDefaults, options || {}));
        },
        object: function(pageInput, wikiInput, type) {
            var placeholder = "Find a page or file";
            switch (type) {
              case "P":
                placeholder = "Find a page";
                break;

              case "F":
                placeholder = "Find a file";
                break;

              case "G":
                placeholder = "Find a Google Doc";
            }
            $(pageInput).select2({
                placeholder: placeholder,
                createSearchChoice: function(term) {
                    term = term.replace(/,/, "");
                    var prefix = "page:";
                    if ("P" == type) prefix = "";
                    return {
                        id: prefix + term,
                        text: term
                    };
                },
                ajax: {
                    url: ws.common.pathFor("space", "autocompletepage"),
                    quietMillis: 200,
                    params: {
                        type: "POST",
                        dataType: "text",
                        iframe: true
                    },
                    data: function(term, page) {
                        var wiki = wikispaces_wikiName;
                        if (wikiInput) wiki = $(wikiInput).val();
                        return {
                            json: 1,
                            w: wiki,
                            q: term,
                            p: page,
                            n: 10,
                            type: type
                        };
                    },
                    results: function(data, page) {
                        var pages = _(data.split("\n")).chain().compact().map(function(line) {
                            var parts = line.split("|");
                            var prefix = parts[2] + ":";
                            if ("P" == type) prefix = "";
                            return {
                                text: parts[0],
                                id: prefix + parts[0],
                                iconUrl: parts[4]
                            };
                        }).value();
                        var more = 10 == pages.length;
                        return {
                            results: pages,
                            more: more
                        };
                    }
                },
                formatSelection: formatSimpleNotEscaped,
                formatResult: ws.select2.formatObject,
                initSelection: identityInitSelection
            }).on("select2-open", fixZIndex);
        }
    };
}(jQuery);

ws.namespace("ws.session");

ws.session = function($, undefined) {
    var me = this;
    var sessionReloadAttempt = 0;
    var sessionReloadHandle = null;
    return {
        reloadSessionSuccess: function() {},
        reloadSession: function(callback, callbackTime, failureCallback) {
            var failFunc = function() {
                if ("function" == typeof failureCallback) failureCallback.apply(me);
            };
            var d = $.Deferred();
            d.done(function(data) {
                if (data && data.reloadAt > 0) ws.session.reloadSessionAt(data.reloadAt);
                sessionReloadAttempt = 0;
                if ("function" == typeof callback) callback.apply(me);
            }).fail(failFunc);
            if (sessionReloadAttempt > 4) return d.reject().promise();
            sessionReloadAttempt++;
            ws.common.ajaxPost({
                url: "/space/sessionreload"
            }).done(function(data) {
                d.resolve(data);
            }).fail(function() {
                ws.session.reloadSession(callback, callbackTime, failureCallback).done(function(data) {
                    d.resolve(data);
                }).fail(function() {
                    d.reject();
                });
            });
            return d.promise();
        },
        reloadSessionAt: function(time) {
            if ("number" === typeof sessionReloadHandle) clearTimeout(sessionReloadHandle);
            var now = Math.floor(new Date().getTime() / 1e3);
            var when = time - now;
            if (when < 1) when = 1;
            var session = this;
            sessionReloadHandle = setTimeout(function() {
                ws.session.reloadSession();
            }, 1e3 * when);
        }
    };
}(jQuery);

(function($, undefined) {
    function changeStar(method) {
        $(".ws-star i:visible").addClass("icon-spin");
        ws.common.ajaxPost({
            url: ws.common.pathFor("star", method, ws.context.path.page),
            data: {
                type: ws.context.path.object
            }
        }).done(function(data) {
            if (data) data = data.content;
            if ("added" == data) $(".ws-star").removeClass("ws-star-no").addClass("ws-star-yes"); else if ("removed" == data) $(".ws-star").removeClass("ws-star-yes").addClass("ws-star-no");
        }).always(function() {
            $(".ws-star i").removeClass("icon-spin");
        });
    }
    $(document).ready(function() {
        $(".ws-star .ws-star-yes").click(function() {
            changeStar("delete");
        });
        $(".ws-star .ws-star-no").click(function() {
            changeStar("create");
        });
    });
})(jQuery);

ws.namespace("ws.tags");

ws.tags = function($, undefined) {
    var openCounter = 0;
    $(document).ready(function() {
        $(document).on("click", ".WikiTagsEditLink", function(event) {
            ws.tags.showInput(this);
            event.preventDefault();
            return false;
        });
        $(document).on("click", ".WikiTagFormCancel", function(event) {
            hideInput(this);
            event.preventDefault();
            return false;
        });
    });
    function updateTags(form) {
        form = $(form);
        form.find(".WikiTagsEditLink").hide();
        var tags = form.find(".WikiTagInput").select2("val");
        return ws.common.ajaxPost({
            url: form.find('input[name="url"]').val(),
            data: {
                go: true,
                "tags[]": tags,
                object: form.find('input[name="type"]').val()
            }
        }).done(function() {
            var tagUrl = ws.common.pathFor("space", "content");
            form.find(".WikiTagList ul").empty();
            for (var i = 0; i < tags.length; i++) {
                var a = $("<a>").attr("rel", "tag").attr("href", ws.common.addUriParams(tagUrl, [ [ "tag", tags[i] ] ])).text(tags[i]);
                var li = $("<li>").addClass("WikiTag").append(a);
                form.find(".WikiTagList ul").append(li).append(" ");
            }
            form.trigger("tagUpdate");
        }).fail(function() {
            alert("Error: Could not update tags");
        }).always(function() {
            form.find(".WikiTagsEditLink").show();
        });
    }
    function hideInput(element) {
        $(element).closest(".WikiTagForm").removeClass("WikiTagFormEdit");
        openCounter--;
    }
    function save(form) {
        updateTags(form);
        hideInput(form);
    }
    function checkForOpenInputs() {
        if (openCounter > 0) return "You have not yet saved your tag changes.";
    }
    return {
        showInput: function(element) {
            window.onbeforeunload = checkForOpenInputs;
            var form = $(element).closest(".WikiTagForm");
            var input = form.find(".WikiTagInput");
            if (!input.data("select2")) {
                ws.select2.tagEdit(input);
                form.submit(function(event) {
                    save(this);
                    event.preventDefault();
                    return false;
                });
            }
            form.addClass("WikiTagFormEdit");
            input.select2("open");
            openCounter++;
        },
        promptForOpenInputs: function(e) {
            var message = checkForOpenInputs();
            if (!message) return true;
            var res = confirm("Are you sure you want to navigate away from this page?" + "\n\n" + message + "\n\n" + "Press OK to continue, or Cancel to stay on the current page.");
            if (!res) {
                e.stopImmediatePropagation();
                e.preventDefault();
                return false;
            }
            openCounter = 0;
            return true;
        }
    };
}(jQuery);

ws.namespace("ws.user");

ws.user = function($, undefined) {
    return {
        pic: function(user, params) {
            var url;
            if (!user.date_pic_updated) url = "/i/user_none_"; else url = "//www." + ws.context.instance.url + "/user/pic/" + user.date_pic_updated + "/" + encodeURIComponent(user.username) + "-";
            var photo = '<img src="' + url + 'sm.jpg" width="16" height="16" alt="' + ws.common.escapeHtml(user.username) + '" class="userPicture" />';
            if ("large" == params.imageSize) photo = '<img src="' + url + 'lg.jpg" width="48" height="48" alt="' + ws.common.escapeHtml(user.username) + '" class="userPicture" />';
            return photo;
        },
        link: function(user, params) {
            if (!params) params = {};
            var linkUrl = "//www." + ws.context.instance.url;
            if (params.adminLink) linkUrl += "/admin/userdetail/"; else linkUrl += "/user/view/";
            linkUrl += encodeURIComponent(user.username);
            var linkOpen = '<a class="userLink' + (params.showMenu ? "" : " userLinkNoMenu") + '" href="' + linkUrl + '" style="outline: none;"' + (params.target ? ' target="' + params.target + '"' : "") + ">";
            var linkClose = "</a>";
            var photo = "";
            if ("none" != params.imageSize) photo = ws.user.pic(user, params);
            if (photo) photo = linkOpen + photo + linkClose + " ";
            var userString = linkOpen + ws.common.escapeHtml(user.username) + linkClose;
            if (params.hideUsername) $userString = "";
            var highlight = false;
            if (params.activity) {
                userString += " " + user.posts + "/" + user.edits;
                if (user.posts || user.edits > 12) highlight = true;
            }
            if (highlight) userString = '<span style="background-color: red;">' + userString + "</span>";
            return photo + userString;
        }
    };
}(jQuery);

ws.namespace("ws.wikitext");

ws.wikitext = function($, undefined) {
    return {
        highlightIncludeSection: function(button, sectionClassName, hl) {
            $(button).toggleClass("includeEditButton", !hl).toggleClass("includeEditButtonActive", hl);
            $(".includeBody-" + sectionClassName.replace(/%/g, "\\%")).toggleClass("includeBody", !hl).toggleClass("includeBodyActive", hl);
        }
    };
}(jQuery);